TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:22  Page:   1
adc0

 LOC CODE        LINE   SOURCELINE

                     1   ; TASKING C166/ST10 C compiler v8.7r1 Build 775
                     2   ; options: -e -Id:\programme\tasking\c166 v8.7r1\include -x2 -Bhoeufmknladij -OB
                     3   ;          -OE -zswitch_tabmem_default -zautobitastruct-4 -zautobita-0 -FSC -A1
                     4   ;          -zvolatile_union -O0 -g -newerr -s -i0 -Ms
                     5   $DEBUG
                     6   $NOLOCALS
                     7   $EXTEND2
                     8   $NOMOD166
                     9   $STDNAMES(regsuper10bo.def)
                    10   $EXTMAC
                    11   $CASE
                    12   $NOEXPANDREGBANK
                    13   $MODEL(SMALL)
                    14           NAME    ADC0_C
                    15           ?SYMB   'adc0.c',32,80,16
                    16           ?SYMB   '',1,82,0
                    17           ?SYMB   '80166',0,84,0
                    18           ?SYMB   '',0,81,0
                    19           ?SYMB   'void',00H,45,1
                    20           ?SYMB   'char',080000H,45,2
                    21           ?SYMB   'unsigned char',080000H,45,3
                    22           ?SYMB   'short',0100000H,45,4
                    23           ?SYMB   'unsigned short',0100000H,45,5
                    24           ?SYMB   'long',0200000H,45,6
                    25           ?SYMB   'unsigned long',0200000H,45,7
                    26           ?SYMB   'float',0200000H,45,10
                    27           ?SYMB   'double',0400000H,45,11
                    28           ?SYMB   'int',0100000H,45,16
                    29           ?SYMB   'unsigned int',0100000H,45,18
                    30           ?SYMB   'bit',010000H,7,256
                    31           ?SYMB   'adc0.c',0,29,1
                    32           ?SYMB   '',0,86,1
                    33   ; adc0.c      1 //****************************************************************************
                    34   ; adc0.c      2 // @Module        Analog / Digital Converter  (ADC0)
                    35   ; adc0.c      3 // @Filename      ADC0.C
                    36   ; adc0.c      4 // @Project       DAvE_config.dav
                    37   ; adc0.c      5 //----------------------------------------------------------------------------
                    38   ; adc0.c      6 // @Controller    Infineon XE167F-96F66
                    39   ; adc0.c      7 //
                    40   ; adc0.c      8 // @Compiler      Tasking Classic
                    41   ; adc0.c      9 //
                    42   ; adc0.c     10 // @Codegenerator 2.2
                    43   ; adc0.c     11 //
                    44   ; adc0.c     12 // @Description   This file contains functions that use the ADC0 module.
                    45   ; adc0.c     13 //
                    46   ; adc0.c     14 //----------------------------------------------------------------------------
                    47   ; adc0.c     15 // @Date          28.09.2021 15:41:39
                    48   ; adc0.c     16 //
                    49   ; adc0.c     17 //****************************************************************************
                    50   ; adc0.c     18 
                    51   ; adc0.c     19 // USER CODE BEGIN (ADC0_General,1)
                    52   ; adc0.c     20 
                    53   ; adc0.c     21 // USER CODE END
                    54   ; adc0.c     22 
                    55   ; adc0.c     23 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:22  Page:   2
adc0

 LOC CODE        LINE   SOURCELINE

                    56   ; adc0.c     24 
                    57   ; adc0.c     25 //****************************************************************************
                    58   ; adc0.c     26 // @Project Includes
                    59   ; adc0.c     27 //****************************************************************************
                    60   ; adc0.c     28 
                    61   ; adc0.c     29 #include "MAIN.H"
                    62           ?SYMB   'MAIN.H',0,29,2
                    63           ?SYMB   '',0,86,2
                    64           ?SYMB   'XE16xREGS.H',0,29,3
                    65           ?SYMB   '',0,86,3
                    66           ?SYMB   '',0,86,2
                    67           ?SYMB   'SCS.H',0,29,3
                    68           ?SYMB   '',0,86,3
                    69           ?SYMB   'T$2',0,14,257
                    70           ?SYMB   'SCS_EXTCLK_F_SYS',0,33,257
                    71           ?SYMB   'SCS_EXTCLK_F_OUT',1,33,257
                    72           ?SYMB   'SCS_EXTCLK_F_PLL',2,33,257
                    73           ?SYMB   'SCS_EXTCLK_F_OSC',3,33,257
                    74           ?SYMB   'SCS_EXTCLK_F_WU',4,33,257
                    75           ?SYMB   'SCS_EXTCLK_F_TCK',5,33,257
                    76           ?SYMB   'SCS_EXTCLK_F_OSC_FL',6,33,257
                    77           ?SYMB   'SCS_EXTCLK_F_RTC',8,33,257
                    78           ?SYMB   '',16,16,0
                    79           ?SYMB   'SCS_EXTCLK_Type',257,13,258
                    80           ?SYMB   '',0,86,2
                    81           ?SYMB   'IO.H',0,29,3
                    82           ?SYMB   '',0,86,3
                    83           ?SYMB   '',0,86,2
                    84           ?SYMB   'GPT1.H',0,29,3
                    85           ?SYMB   '',0,86,3
                    86           ?SYMB   '',0,86,2
                    87           ?SYMB   'GPT2.H',0,29,3
                    88           ?SYMB   '',0,86,3
                    89           ?SYMB   '',0,86,2
                    90           ?SYMB   'CCU62.H',0,29,3
                    91           ?SYMB   '',0,86,3
                    92           ?SYMB   '',0,86,2
                    93           ?SYMB   'CCU63.H',0,29,3
                    94           ?SYMB   '',0,86,3
                    95           ?SYMB   '',0,86,2
                    96           ?SYMB   'ADC0.H',0,29,3
                    97           ?SYMB   '',0,86,3
                    98           ?SYMB   'ubyte',3,13,259
                    99           ?SYMB   '',0,86,2
                   100           ?SYMB   '',0,86,1
                   101   ; adc0.c     30 
                   102   ; adc0.c     31 // USER CODE BEGIN (ADC0_General,2)
                   103   ; adc0.c     32 
                   104   ; adc0.c     33 // USER CODE END
                   105   ; adc0.c     34 
                   106   ; adc0.c     35 
                   107   ; adc0.c     36 //****************************************************************************
                   108   ; adc0.c     37 // @Macros
                   109   ; adc0.c     38 //****************************************************************************
                   110   ; adc0.c     39 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:22  Page:   3
adc0

 LOC CODE        LINE   SOURCELINE

                   111   ; adc0.c     40 // USER CODE BEGIN (ADC0_General,3)
                   112   ; adc0.c     41 
                   113   ; adc0.c     42 // USER CODE END
                   114   ; adc0.c     43 
                   115   ; adc0.c     44 
                   116   ; adc0.c     45 //****************************************************************************
                   117   ; adc0.c     46 // @Defines
                   118   ; adc0.c     47 //****************************************************************************
                   119   ; adc0.c     48 
                   120   ; adc0.c     49 // USER CODE BEGIN (ADC0_General,4)
                   121   ; adc0.c     50 
                   122   ; adc0.c     51 // USER CODE END
                   123   ; adc0.c     52 
                   124   ; adc0.c     53 
                   125   ; adc0.c     54 //****************************************************************************
                   126   ; adc0.c     55 // @Typedefs
                   127   ; adc0.c     56 //****************************************************************************
                   128   ; adc0.c     57 
                   129   ; adc0.c     58 // USER CODE BEGIN (ADC0_General,5)
                   130   ; adc0.c     59 
                   131   ; adc0.c     60 // USER CODE END
                   132   ; adc0.c     61 
                   133   ; adc0.c     62 
                   134   ; adc0.c     63 //****************************************************************************
                   135   ; adc0.c     64 // @Imported Global Variables
                   136   ; adc0.c     65 //****************************************************************************
                   137   ; adc0.c     66 
                   138   ; adc0.c     67 // USER CODE BEGIN (ADC0_General,6)
                   139   ; adc0.c     68 
                   140   ; adc0.c     69 // USER CODE END
                   141   ; adc0.c     70 
                   142   ; adc0.c     71 
                   143   ; adc0.c     72 //****************************************************************************
                   144   ; adc0.c     73 // @Global Variables
                   145   ; adc0.c     74 //****************************************************************************
                   146   ; adc0.c     75 
                   147   ; adc0.c     76 // USER CODE BEGIN (ADC0_General,7)
                   148   ; adc0.c     77 
                   149   ; adc0.c     78 // USER CODE END
                   150   ; adc0.c     79 
                   151   ; adc0.c     80 
                   152   ; adc0.c     81 //****************************************************************************
                   153   ; adc0.c     82 // @External Prototypes
                   154   ; adc0.c     83 //****************************************************************************
                   155   ; adc0.c     84 
                   156   ; adc0.c     85 // USER CODE BEGIN (ADC0_General,8)
                   157   ; adc0.c     86 
                   158   ; adc0.c     87 // USER CODE END
                   159   ; adc0.c     88 
                   160   ; adc0.c     89 
                   161   ; adc0.c     90 //****************************************************************************
                   162   ; adc0.c     91 // @Prototypes Of Local Functions
                   163   ; adc0.c     92 //****************************************************************************
                   164   ; adc0.c     93 
                   165   ; adc0.c     94 // USER CODE BEGIN (ADC0_General,9)
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:22  Page:   4
adc0

 LOC CODE        LINE   SOURCELINE

                   166   ; adc0.c     95 
                   167   ; adc0.c     96 // USER CODE END
                   168   ; adc0.c     97 
                   169   ; adc0.c     98 
                   170   ; adc0.c     99 //****************************************************************************
                   171   ; adc0.c    100 // @Function      void ADC0_vInit(void) 
                   172   ; adc0.c    101 //
                   173   ; adc0.c    102 //----------------------------------------------------------------------------
                   174   ; adc0.c    103 // @Description   This is the initialization function of the ADC function 
                   175   ; adc0.c    104 //                library. It is assumed that the SFRs used by this library 
                   176   ; adc0.c    105 //                are in reset state. 
                   177   ; adc0.c    106 //                
                   178   ; adc0.c    107 //                Following SFR fields will be initialized:
                   179   ; adc0.c    108 //                GLOBCTR  - Global Control
                   180   ; adc0.c    109 //                RSPR0    - Priority and Arbitration Register
                   181   ; adc0.c    110 //                ASENR    - Arbitration slot enable register
                   182   ; adc0.c    111 //                CHCTRx   - Channel Control Register x
                   183   ; adc0.c    112 //                RCRx     - Result Control Register x
                   184   ; adc0.c    113 //                KSCFG    - Module configuration Register
                   185   ; adc0.c    114 //                INPCR    - Input class Registers
                   186   ; adc0.c    115 //                CHINPRx  - Channel Interrupt register
                   187   ; adc0.c    116 //                EVINPRx  - Event Interrupt register
                   188   ; adc0.c    117 //                SYNCTR   - Synchronisation control register
                   189   ; adc0.c    118 //                LCBRx    - Limit check boundary register
                   190   ; adc0.c    119 //                PISEL    - Port input selection
                   191   ; adc0.c    120 //                QMR0     - Sequential 0 mode register
                   192   ; adc0.c    121 //                CRMR1    - Parallel mode register
                   193   ; adc0.c    122 //                QMR2     - Sequential 2 mode register
                   194   ; adc0.c    123 //
                   195   ; adc0.c    124 //----------------------------------------------------------------------------
                   196   ; adc0.c    125 // @Returnvalue   None
                   197   ; adc0.c    126 //
                   198   ; adc0.c    127 //----------------------------------------------------------------------------
                   199   ; adc0.c    128 // @Parameters    None
                   200   ; adc0.c    129 //
                   201   ; adc0.c    130 //----------------------------------------------------------------------------
                   202   ; adc0.c    131 // @Date          28.09.2021
                   203   ; adc0.c    132 //
                   204   ; adc0.c    133 //****************************************************************************
                   205   ; adc0.c    134 
                   206   ; adc0.c    135 // USER CODE BEGIN (ADC0_Init,1)
                   207   ; adc0.c    136 
                   208   ; adc0.c    137 // USER CODE END
                   209   ; adc0.c    138 
                   210   ; adc0.c    139 void ADC0_vInit(void)
                   211   ; adc0.c    140 {
                   212   ADC0_1_PR       SECTION CODE WORD PUBLIC 'CPROGRAM'
                   213           ?LINE   140
                   214           PUBLIC  _ADC0_vInit
               R   215           ?SYMB   'ADC0_vInit',_ADC0_vInit,37,1
                   216           ?SYMB   '',140,8,34
                   217           ?SYMB   'uword',18,13,261
                   218   _ADC0_vInit     PROC    FAR
                   219           ?SYMB   '',00H,95,0
                   220   ; Locals:
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:22  Page:   5
adc0

 LOC CODE        LINE   SOURCELINE

                   221   ; 
                   222   ; Statics:
                   223   ; 
                   224   ; CSEs:
                   225   ; 
                   226   ; adc0.c    141   // USER CODE BEGIN (ADC0_Init,2)
                   227   ; adc0.c    142 
                   228   ; adc0.c    143   // USER CODE END
                   229   ; adc0.c    144 
                   230   ; adc0.c    145   ///  -----------------------------------------------------------------------
                   231   ; adc0.c    146   ///  Configuration of ADC0 kernel configuration register:
                   232   ; adc0.c    147   ///  -----------------------------------------------------------------------
                   233   ; adc0.c    148   ADC0_KSCFG     =  0x0003;      // load ADC0 kernel configuration register
                   234           ?LINE   148
0000 E03C          235           MOV     R12,#03h
0002 F6FC0CE0      236           MOV     0E00Ch,R12
                   237   ; adc0.c    149 
                   238   ; adc0.c    150   ///  - the ADC module clock is enabled
                   239   ; adc0.c    151   ///  - the ADC module clock = 65,00 MHz
                   240   ; adc0.c    152   ///   
                   241   ; adc0.c    153 
                   242   ; adc0.c    154   _nop();  // one cycle delay 
                   243           ?LINE   154
0006 CC00          244           NOP
                   245   ; adc0.c    155 
                   246   ; adc0.c    156   _nop();  // one cycle delay 
                   247           ?LINE   156
0008 CC00          248           NOP
                   249   ; adc0.c    157 
                   250   ; adc0.c    158   ///  -----------------------------------------------------------------------
                   251   ; adc0.c    159   ///  Configure global control register:
                   252   ; adc0.c    160   ///  -----------------------------------------------------------------------
                   253   ; adc0.c    161   ///  --- Conversion Timing -----------------
                   254   ; adc0.c    162   ///  - conversion time (CTC)    = 01,31 us
                   255   ; adc0.c    163 
                   256   ; adc0.c    164   ///  _Analog clock is 1/5th of module clock and digital clock is 1/1 times 
                   257   ; adc0.c    165   ///  of module clock
                   258   ; adc0.c    166 
                   259   ; adc0.c    167   ///  - the permanent arbitration mode is selected
                   260   ; adc0.c    168   ADC0_GLOBCTR   =  0x0004;      // load global control register
                   261           ?LINE   168
000A E04C          262           MOV     R12,#04h
000C F6FC10E0      263           MOV     0E010h,R12
                   264   ; adc0.c    169 
                   265   ; adc0.c    170   ///  -----------------------------------------------------------------------
                   266   ; adc0.c    171   ///  Configuration of Arbitration Slot enable register and also the Source 
                   267   ; adc0.c    172   ///  Priority register:
                   268   ; adc0.c    173   ///  -----------------------------------------------------------------------
                   269   ; adc0.c    174   ///  - Arbitration Slot 0 is enabled
                   270   ; adc0.c    175 
                   271   ; adc0.c    176   ///  - Arbitration Slot 1 is disabled
                   272   ; adc0.c    177 
                   273   ; adc0.c    178   ///  - Arbitration Slot 2 is disabled
                   274   ; adc0.c    179 
                   275   ; adc0.c    180   ///  - the priority of request source 0 is low
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:22  Page:   6
adc0

 LOC CODE        LINE   SOURCELINE

                   276   ; adc0.c    181   ///  - the wait-for-start mode is selected for source 0
                   277   ; adc0.c    182   ///  - the priority of request source 1 is low
                   278   ; adc0.c    183   ///  - the wait-for-start mode is selected for source 1
                   279   ; adc0.c    184   ///  - the priority of request source 2 is low
                   280   ; adc0.c    185   ///  - the wait-for-start mode is selected for source 2
                   281   ; adc0.c    186   ADC0_ASENR     =  0x0001;      // load Arbitration Slot enable register
                   282           ?LINE   186
0010 E01C          283           MOV     R12,#01h
0012 F6FC18E0      284           MOV     0E018h,R12
                   285   ; adc0.c    187 
                   286   ; adc0.c    188   ADC0_RSPR0     =  0x0000;      // load Priority and Arbitration register
                   287           ?LINE   188
0016 E00C          288           MOV     R12,#00h
0018 F6FC14E0      289           MOV     0E014h,R12
                   290   ; adc0.c    189 
                   291   ; adc0.c    190   ///  -----------------------------------------------------------------------
                   292   ; adc0.c    191   ///  Configuration of Channel Control Registers:
                   293   ; adc0.c    192   ///  -----------------------------------------------------------------------
                   294   ; adc0.c    193   ///  Configuration of Channel 6
                   295   ; adc0.c    194   ///  - the result register0 is selected
                   296   ; adc0.c    195   ///  - the limit check 0 is selected
                   297   ; adc0.c    196 
                   298   ; adc0.c    197   ///  - the reference voltage selected is Standard Voltage (Varef)
                   299   ; adc0.c    198 
                   300   ; adc0.c    199   ///  - the input class selected is Input Class 0
                   301   ; adc0.c    200 
                   302   ; adc0.c    201   ///  - LCBR0 is selected as upper boundary
                   303   ; adc0.c    202 
                   304   ; adc0.c    203   ///  - LCBR1 is selected as lower boundary
                   305   ; adc0.c    204 
                   306   ; adc0.c    205   ADC0_CHCTR6    =  0x0004;      // load channel control register
                   307           ?LINE   205
001C E04C          308           MOV     R12,#04h
001E F6FC2CE0      309           MOV     0E02Ch,R12
                   310   ; adc0.c    206 
                   311   ; adc0.c    207   ///  -----------------------------------------------------------------------
                   312   ; adc0.c    208   ///  Configuration of Sample Time and Resolution:
                   313   ; adc0.c    209   ///  -----------------------------------------------------------------------
                   314   ; adc0.c    210 
                   315   ; adc0.c    211   ///  10 bit resolution selected
                   316   ; adc0.c    212 
                   317   ; adc0.c    213   ADC0_INPCR0    =  0x0000;      // load input class0 register
                   318           ?LINE   213
0022 E00C          319           MOV     R12,#00h
0024 F6FCC0E0      320           MOV     0E0C0h,R12
                   321   ; adc0.c    214 
                   322   ; adc0.c    215   ///  10 bit resolution selected
                   323   ; adc0.c    216 
                   324   ; adc0.c    217   ADC0_INPCR1    =  0x0000;      // load input class1 register
                   325           ?LINE   217
0028 E00C          326           MOV     R12,#00h
002A F6FCC2E0      327           MOV     0E0C2h,R12
                   328   ; adc0.c    218 
                   329   ; adc0.c    219   ///  -----------------------------------------------------------------------
                   330   ; adc0.c    220   ///  Configuration of Result Control Registers:
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:22  Page:   7
adc0

 LOC CODE        LINE   SOURCELINE

                   331   ; adc0.c    221   ///  -----------------------------------------------------------------------
                   332   ; adc0.c    222   ///  Configuration of Result Control Register 0
                   333   ; adc0.c    223   ///  - the data reduction filter is enabled
                   334   ; adc0.c    224   ///  - the event interrupt is enabled
                   335   ; adc0.c    225   ///  - the wait-for-read mode is enabled
                   336   ; adc0.c    226 
                   337   ; adc0.c    227   ///  - the FIFO functionality is disabled
                   338   ; adc0.c    228 
                   339   ; adc0.c    229   ADC0_RCR0      =  0x0053;      // load result control register 0
                   340           ?LINE   229
002E E6FC5300      341           MOV     R12,#053h
0032 F6FCB0E0      342           MOV     0E0B0h,R12
                   343   ; adc0.c    230 
                   344   ; adc0.c    231   ///  Configuration of Result Control Register 1
                   345   ; adc0.c    232   ///  - the data reduction filter is disabled
                   346   ; adc0.c    233   ///  - the event interrupt is disabled
                   347   ; adc0.c    234   ///  - the wait-for-read mode is disabled
                   348   ; adc0.c    235 
                   349   ; adc0.c    236   ///  - the FIFO functionality is disabled
                   350   ; adc0.c    237 
                   351   ; adc0.c    238   ADC0_RCR1      =  0x0000;      // load result control register 1
                   352           ?LINE   238
0036 E00C          353           MOV     R12,#00h
0038 F6FCB2E0      354           MOV     0E0B2h,R12
                   355   ; adc0.c    239 
                   356   ; adc0.c    240   ///  Configuration of Result Control Register 2
                   357   ; adc0.c    241   ///  - the data reduction filter is disabled
                   358   ; adc0.c    242   ///  - the event interrupt is disabled
                   359   ; adc0.c    243   ///  - the wait-for-read mode is disabled
                   360   ; adc0.c    244 
                   361   ; adc0.c    245   ///  - the FIFO functionality is disabled
                   362   ; adc0.c    246 
                   363   ; adc0.c    247   ADC0_RCR2      =  0x0000;      // load result control register 2
                   364           ?LINE   247
003C E00C          365           MOV     R12,#00h
003E F6FCB4E0      366           MOV     0E0B4h,R12
                   367   ; adc0.c    248 
                   368   ; adc0.c    249   ///  Configuration of Result Control Register 3
                   369   ; adc0.c    250   ///  - the data reduction filter is disabled
                   370   ; adc0.c    251   ///  - the event interrupt is disabled
                   371   ; adc0.c    252   ///  - the wait-for-read mode is disabled
                   372   ; adc0.c    253 
                   373   ; adc0.c    254   ///  - the FIFO functionality is disabled
                   374   ; adc0.c    255 
                   375   ; adc0.c    256   ADC0_RCR3      =  0x0000;      // load result control register 3
                   376           ?LINE   256
0042 E00C          377           MOV     R12,#00h
0044 F6FCB6E0      378           MOV     0E0B6h,R12
                   379   ; adc0.c    257 
                   380   ; adc0.c    258   ///  Configuration of Result Control Register 4
                   381   ; adc0.c    259   ///  - the data reduction filter is disabled
                   382   ; adc0.c    260   ///  - the event interrupt is disabled
                   383   ; adc0.c    261   ///  - the wait-for-read mode is disabled
                   384   ; adc0.c    262 
                   385   ; adc0.c    263   ///  - the FIFO functionality is disabled
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:22  Page:   8
adc0

 LOC CODE        LINE   SOURCELINE

                   386   ; adc0.c    264 
                   387   ; adc0.c    265   ADC0_RCR4      =  0x0000;      // load result control register 4
                   388           ?LINE   265
0048 E00C          389           MOV     R12,#00h
004A F6FCB8E0      390           MOV     0E0B8h,R12
                   391   ; adc0.c    266 
                   392   ; adc0.c    267   ///  Configuration of Result Control Register 5
                   393   ; adc0.c    268   ///  - the data reduction filter is disabled
                   394   ; adc0.c    269   ///  - the event interrupt is disabled
                   395   ; adc0.c    270   ///  - the wait-for-read mode is disabled
                   396   ; adc0.c    271 
                   397   ; adc0.c    272   ///  - the FIFO functionality is disabled
                   398   ; adc0.c    273 
                   399   ; adc0.c    274   ADC0_RCR5      =  0x0000;      // load result control register 5
                   400           ?LINE   274
004E E00C          401           MOV     R12,#00h
0050 F6FCBAE0      402           MOV     0E0BAh,R12
                   403   ; adc0.c    275 
                   404   ; adc0.c    276   ///  Configuration of Result Control Register 6
                   405   ; adc0.c    277   ///  - the data reduction filter is disabled
                   406   ; adc0.c    278   ///  - the event interrupt is disabled
                   407   ; adc0.c    279   ///  - the wait-for-read mode is disabled
                   408   ; adc0.c    280 
                   409   ; adc0.c    281   ///  - the FIFO functionality is disabled
                   410   ; adc0.c    282 
                   411   ; adc0.c    283   ADC0_RCR6      =  0x0000;      // load result control register 6
                   412           ?LINE   283
0054 E00C          413           MOV     R12,#00h
0056 F6FCBCE0      414           MOV     0E0BCh,R12
                   415   ; adc0.c    284 
                   416   ; adc0.c    285   ///  Configuration of Result Control Register 7
                   417   ; adc0.c    286   ///  - the data reduction filter is disabled
                   418   ; adc0.c    287   ///  - the event interrupt is disabled
                   419   ; adc0.c    288   ///  - the wait-for-read mode is disabled
                   420   ; adc0.c    289 
                   421   ; adc0.c    290   ///  - the FIFO functionality is disabled
                   422   ; adc0.c    291 
                   423   ; adc0.c    292   ADC0_RCR7      =  0x0000;      // load result control register 7
                   424           ?LINE   292
005A E00C          425           MOV     R12,#00h
005C F6FCBEE0      426           MOV     0E0BEh,R12
                   427   ; adc0.c    293 
                   428   ; adc0.c    294   ///  -----------------------------------------------------------------------
                   429   ; adc0.c    295   ///  Configuration of Channel Interrupt Node Pointer Register:
                   430   ; adc0.c    296   ///  -----------------------------------------------------------------------
                   431   ; adc0.c    297   ADC0_CHINPR0   =  0x0000;      // load channel interrupt node pointer 
                   432           ?LINE   297
0060 E00C          433           MOV     R12,#00h
0062 F6FC98E0      434           MOV     0E098h,R12
                   435   ; adc0.c    298                                  // register
                   436   ; adc0.c    299 
                   437   ; adc0.c    300   ///  - the SR0 line become activated if channel 6 interrupt is generated
                   438   ; adc0.c    301 
                   439   ; adc0.c    302   ADC0_CHINPR4   =  0x0000;      // load channel interrupt node pointer 
                   440           ?LINE   302
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:22  Page:   9
adc0

 LOC CODE        LINE   SOURCELINE

0066 E00C          441           MOV     R12,#00h
0068 F6FC9AE0      442           MOV     0E09Ah,R12
                   443   ; adc0.c    303                                  // register
                   444   ; adc0.c    304 
                   445   ; adc0.c    305   ADC0_CHINPR8   =  0x0000;      // load channel interrupt node pointer 
                   446           ?LINE   305
006C E00C          447           MOV     R12,#00h
006E F6FC9CE0      448           MOV     0E09Ch,R12
                   449   ; adc0.c    306                                  // register
                   450   ; adc0.c    307 
                   451   ; adc0.c    308   ADC0_CHINPR12  =  0x0000;      // load channel interrupt node pointer 
                   452           ?LINE   308
0072 E00C          453           MOV     R12,#00h
0074 F6FC9EE0      454           MOV     0E09Eh,R12
                   455   ; adc0.c    309                                  // register
                   456   ; adc0.c    310 
                   457   ; adc0.c    311   ///  -----------------------------------------------------------------------
                   458   ; adc0.c    312   ///  Configuration of Event Interrupt Node Pointer Register for Source 
                   459   ; adc0.c    313   ///  Interrupts:
                   460   ; adc0.c    314   ///  -----------------------------------------------------------------------
                   461   ; adc0.c    315   ///  - the SR 0 line become activated if the event 0 interrupt is generated
                   462   ; adc0.c    316 
                   463   ; adc0.c    317   ADC0_EVINPR0   =  0x0000;      // load event interrupt set flag register 
                   464           ?LINE   317
0078 E00C          465           MOV     R12,#00h
007A F6FCA8E0      466           MOV     0E0A8h,R12
                   467   ; adc0.c    318 
                   468   ; adc0.c    319   ///  -----------------------------------------------------------------------
                   469   ; adc0.c    320   ///  Configuration of Event Interrupt Node Pointer Register for Result 
                   470   ; adc0.c    321   ///  Interrupts:
                   471   ; adc0.c    322   ///  -----------------------------------------------------------------------
                   472   ; adc0.c    323   ///  - the SR 0 line become activated if the event 8 interrupt is generated
                   473   ; adc0.c    324 
                   474   ; adc0.c    325   ADC0_EVINPR8   =  0x0000;      // load event interrupt set flag register 
                   475           ?LINE   325
007E E00C          476           MOV     R12,#00h
0080 F6FCACE0      477           MOV     0E0ACh,R12
                   478   ; adc0.c    326 
                   479   ; adc0.c    327 
                   480   ; adc0.c    328   ADC0_EVINPR12  =  0x0000;      // load event interrupt set flag register 
                   481           ?LINE   328
0084 E00C          482           MOV     R12,#00h
0086 F6FCAEE0      483           MOV     0E0AEh,R12
                   484   ; adc0.c    329 
                   485   ; adc0.c    330   ///  -----------------------------------------------------------------------
                   486   ; adc0.c    331   ///  Configuration of Service Request Nodes 0 - 3 :
                   487   ; adc0.c    332   ///  -----------------------------------------------------------------------
                   488   ; adc0.c    333   ///  SRN0 service request node configuration:
                   489   ; adc0.c    334   ///  - SRN0 interrupt priority level (ILVL) = 9
                   490   ; adc0.c    335   ///  - SRN0 interrupt group level (GLVL) = 0
                   491   ; adc0.c    336   ///  - SRN0 group priority extension (GPX) = 0
                   492   ; adc0.c    337 
                   493   ; adc0.c    338   ADC_0IC        =  0x0064;     
                   494           ?LINE   338
008A E6FC6400      495           MOV     R12,#064h
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:22  Page:  10
adc0

 LOC CODE        LINE   SOURCELINE

008E F6FC70FF      496           MOV     0FF70h,R12
                   497   ; adc0.c    339 
                   498   ; adc0.c    340 
                   499   ; adc0.c    341   ///  -----------------------------------------------------------------------
                   500   ; adc0.c    342   ///  Configuration of Limit Check Boundary:
                   501   ; adc0.c    343   ///  -----------------------------------------------------------------------
                   502   ; adc0.c    344 
                   503   ; adc0.c    345   ADC0_LCBR0     =  0x0198;      // load limit check boundary register 0
                   504           ?LINE   345
0092 E6FC9801      505           MOV     R12,#0198h
0096 F6FC84E0      506           MOV     0E084h,R12
                   507   ; adc0.c    346 
                   508   ; adc0.c    347   ADC0_LCBR1     =  0x0E64;      // load limit check boundary register 1
                   509           ?LINE   347
009A E6FC640E      510           MOV     R12,#0E64h
009E F6FC86E0      511           MOV     0E086h,R12
                   512   ; adc0.c    348 
                   513   ; adc0.c    349   ADC0_LCBR2     =  0x0554;      // load limit check boundary register 2
                   514           ?LINE   349
00A2 E6FC5405      515           MOV     R12,#0554h
00A6 F6FC88E0      516           MOV     0E088h,R12
                   517   ; adc0.c    350 
                   518   ; adc0.c    351   ADC0_LCBR3     =  0x0AA8;      // load limit check boundary register 3
                   519           ?LINE   351
00AA E6FCA80A      520           MOV     R12,#0AA8h
00AE F6FC8AE0      521           MOV     0E08Ah,R12
                   522   ; adc0.c    352 
                   523   ; adc0.c    353   ///  -----------------------------------------------------------------------
                   524   ; adc0.c    354   ///  Configuration of Gating source and External Trigger Control:
                   525   ; adc0.c    355   ///  -----------------------------------------------------------------------
                   526   ; adc0.c    356   ///  - No Gating source selected for Arbitration Source 0
                   527   ; adc0.c    357 
                   528   ; adc0.c    358   ///  - the trigger input ETR00 is selected for Source 0
                   529   ; adc0.c    359 
                   530   ; adc0.c    360   ///  - No Gating source selected for Arbitration Source 1
                   531   ; adc0.c    361 
                   532   ; adc0.c    362   ///  - the trigger input ETR00 is selected for Source 1
                   533   ; adc0.c    363 
                   534   ; adc0.c    364   ///  - No Gating source selected for Arbitration Source 2
                   535   ; adc0.c    365 
                   536   ; adc0.c    366   ///  - the trigger input ETR00 is selected for Source 1
                   537   ; adc0.c    367 
                   538   ; adc0.c    368   ADC0_PISEL     =  0x0444;      // load external trigger control register
                   539           ?LINE   368
00B2 E6FC4404      540           MOV     R12,#0444h
00B6 F6FC04E0      541           MOV     0E004h,R12
                   542   ; adc0.c    369 
                   543   ; adc0.c    370   ///  -----------------------------------------------------------------------
                   544   ; adc0.c    371   ///  Configuration of Conversion Queue Mode Register:Sequential Source 0
                   545   ; adc0.c    372   ///  -----------------------------------------------------------------------
                   546   ; adc0.c    373   ///  - the gating line is permanently Enabled
                   547   ; adc0.c    374   ///  - the external trigger is disabled
                   548   ; adc0.c    375 
                   549   ; adc0.c    376   ADC0_QMR0      =  0x0001;      // load queue mode register
                   550           ?LINE   376
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:22  Page:  11
adc0

 LOC CODE        LINE   SOURCELINE

00BA E01C          551           MOV     R12,#01h
00BC F6FCE0E0      552           MOV     0E0E0h,R12
                   553   ; adc0.c    377 
                   554   ; adc0.c    378   ///  -----------------------------------------------------------------------
                   555   ; adc0.c    379   ///  Configuration of Conversion Queue Mode Register:Sequential Source 2
                   556   ; adc0.c    380   ///  -----------------------------------------------------------------------
                   557   ; adc0.c    381   ///  - the gating line is permanently Disabled
                   558   ; adc0.c    382   ///  - the external trigger is disabled
                   559   ; adc0.c    383   ///  - the trigger mode 0 is selected
                   560   ; adc0.c    384 
                   561   ; adc0.c    385   ADC0_QMR2      =  0x0000;      // load queue mode register
                   562           ?LINE   385
00C0 E00C          563           MOV     R12,#00h
00C2 F6FCF0E0      564           MOV     0E0F0h,R12
                   565   ; adc0.c    386 
                   566   ; adc0.c    387   ///  -----------------------------------------------------------------------
                   567   ; adc0.c    388   ///  Configuration of Conversion Request Mode Registers:Parallel Source 
                   568   ; adc0.c    389   ///  -----------------------------------------------------------------------
                   569   ; adc0.c    390   ///  - the gating line is permanently Disabled
                   570   ; adc0.c    391   ///  - the external trigger is disabled
                   571   ; adc0.c    392   ///  - the source interrupt is disabled
                   572   ; adc0.c    393   ///  - the autoscan functionality is disabled
                   573   ; adc0.c    394 
                   574   ; adc0.c    395   ADC0_CRMR1     =  0x0000;      // load conversion request mode register 1
                   575           ?LINE   395
00C6 E00C          576           MOV     R12,#00h
00C8 F6FCECE0      577           MOV     0E0ECh,R12
                   578   ; adc0.c    396 
                   579   ; adc0.c    397   ///  -----------------------------------------------------------------------
                   580   ; adc0.c    398   ///  Configuration of Synchronisation Registers:
                   581   ; adc0.c    399   ///  -----------------------------------------------------------------------
                   582   ; adc0.c    400   ///  - ADC0 is master 
                   583   ; adc0.c    401   ADC0_SYNCTR   |=  0x0010;      // Synchronisation register
                   584           ?LINE   401
00CC E6FC1AE0      585           MOV     R12,#0E01Ah
00D0 A8DC          586           MOV     R13,[R12]
00D2 4FFD          587           BSET    R13.4
00D4 B8DC          588           MOV     [R12],R13
                   589   ; adc0.c    402 
                   590   ; adc0.c    403   P5_DIDIS       =  0x0040;      // Port 5 Digital input disable register
                   591           ?LINE   403
00D6 E6FC4000      592           MOV     R12,#040h
00DA F6FC8AFE      593           MOV     0FE8Ah,R12
                   594   ; adc0.c    404 
                   595   ; adc0.c    405   ADC0_GLOBCTR  |=  0x0300;      // turn on Analog part
                   596           ?LINE   405
00DE E6FC10E0      597           MOV     R12,#0E010h
00E2 A8DC          598           MOV     R13,[R12]
00E4 76FD0003      599           OR      R13,#0300h
00E8 B8DC          600           MOV     [R12],R13
                   601   ; adc0.c    406 
                   602   ; adc0.c    407 
                   603   ; adc0.c    408   // USER CODE BEGIN (ADC0_Init,3)
                   604   ; adc0.c    409 
                   605   ; adc0.c    410   // USER CODE END
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:22  Page:  12
adc0

 LOC CODE        LINE   SOURCELINE

                   606   ; adc0.c    411 
                   607   ; adc0.c    412 } //  End of function ADC0_vInit
                   608           ?LINE   412
00EA DB00          609           RETS
                   610   _ADC0_vInit     ENDP
               R   611           ?SYMB   '',$,17,412
                   612   ; adc0.c    413 
                   613   ; adc0.c    414 
                   614   ; adc0.c    415 //****************************************************************************
                   615   ; adc0.c    416 // @Function      void ADC0_vStartSeq0ReqChNum(ubyte ubExtTrg, ubyte 
                   616   ; adc0.c    417 //                ubEnIntr, ubyte ubRFill, ubyte ubChannelNum) 
                   617   ; adc0.c    418 //
                   618   ; adc0.c    419 //----------------------------------------------------------------------------
                   619   ; adc0.c    420 // @Description   This function starts the conversion of the requested 
                   620   ; adc0.c    421 //                channel.
                   621   ; adc0.c    422 //                NOTE -
                   622   ; adc0.c    423 //                Before passing ubEnIntr argument as 1,make sure that Seq 0 
                   623   ; adc0.c    424 //                source interrupt is enabled.
                   624   ; adc0.c    425 //                External Trigger -> 0,Indicates software trigger 
                   625   ; adc0.c    426 //                (Conversion starts once this function is executed)
                   626   ; adc0.c    427 //
                   627   ; adc0.c    428 //----------------------------------------------------------------------------
                   628   ; adc0.c    429 // @Returnvalue   None
                   629   ; adc0.c    430 //
                   630   ; adc0.c    431 //----------------------------------------------------------------------------
                   631   ; adc0.c    432 // @Parameters    ubExtTrg: 
                   632   ; adc0.c    433 //                External Trigger : defines external trigger.
                   633   ; adc0.c    434 // @Parameters    ubEnIntr: 
                   634   ; adc0.c    435 //                Enable Source Interrupt : defines source interrupt
                   635   ; adc0.c    436 // @Parameters    ubRFill: 
                   636   ; adc0.c    437 //                Refill : defines the refill
                   637   ; adc0.c    438 // @Parameters    ubChannelNum: 
                   638   ; adc0.c    439 //                Channel number : Name of the Request Channel Number (0 - 
                   639   ; adc0.c    440 //                15)- see macros defined in the header file
                   640   ; adc0.c    441 //
                   641   ; adc0.c    442 //----------------------------------------------------------------------------
                   642   ; adc0.c    443 // @Date          28.09.2021
                   643   ; adc0.c    444 //
                   644   ; adc0.c    445 //****************************************************************************
                   645   ; adc0.c    446 
                   646   ; adc0.c    447 void ADC0_vStartSeq0ReqChNum(ubyte ubExtTrg, ubyte ubEnIntr, ubyte ubRFill, uby
                         te ubChannelNum)
                   647   ; adc0.c    448 {
                   648           ?LINE   448
                   649           PUBLIC  _ADC0_vStartSeq0ReqChNum
               R   650           ?SYMB   'ADC0_vStartSeq0ReqChNum',_ADC0_vStartSeq0ReqChNum,37,1
                   651           ?SYMB   '',448,8,34
                   652   _ADC0_vStartSeq0ReqChNum        PROC    FAR
                   653           ?SYMB   '',00H,95,0
00EC 88F0          654           MOV     [-R0],R15
               R   655           ?SYMB   '',$,96,2
00EE 88C0          656           MOV     [-R0],R12
               R   657           ?SYMB   '',$,96,4
00F0 88D0          658           MOV     [-R0],R13
               R   659           ?SYMB   '',$,96,6
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:22  Page:  13
adc0

 LOC CODE        LINE   SOURCELINE

00F2 88E0          660           MOV     [-R0],R14
               R   661           ?SYMB   '',$,96,8
00F4 2802          662           SUB     R0,#02h
               R   663           ?SYMB   '',$,96,10
                   664   ; Locals:
                   665   ;     uwVal = offset 0
                   666   ;     ubRFill = offset 2
                   667   ;     ubEnIntr = offset 4
                   668   ;     ubExtTrg = offset 6
                   669   ;     ubChannelNum = offset 8
                   670   ; 
                   671   ; Statics:
                   672   ; 
                   673   ; CSEs:
                   674   ; 
                   675           ?SYMB   'ubExtTrg',4,99,259
               R   676           ?SYMB   '-4',$,101,4
                   677           ?SYMB   'ubEnIntr',3,99,259
               R   678           ?SYMB   '-6',$,101,3
                   679           ?SYMB   'ubRFill',2,99,259
               R   680           ?SYMB   '-8',$,101,2
                   681           ?SYMB   'ubChannelNum',5,99,259
               R   682           ?SYMB   '-2',$,101,5
                   683   ; adc0.c    449 
                   684   ; adc0.c    450     uword uwVal = 0;
                   685           ?SYMB   'uwVal',1,98,261
               R   686           ?SYMB   '-a',$,101,1
                   687           ?LINE   450
00F6 E00C          688           MOV     R12,#00h
00F8 B8C0          689           MOV     [R0],R12
                   690   ; adc0.c    451     if (ubExtTrg == 1)
                   691           ?LINE   451
00FA F4200600      692           MOVB    RL1,[R0+#06H]
00FE 4921          693           CMPB    RL1,#01h
0100 3D03          694           JMPR    cc_NE,_6
                   695   ; adc0.c    452     {
                   696   ; adc0.c    453         uwVal = 0x0080;
                   697           ?LINE   453
0102 E6FC8000      698           MOV     R12,#080h
0106 B8C0          699           MOV     [R0],R12
                   700   ; adc0.c    454     }
                   701           ?LINE   454
0108               702   _6:
                   703   ; adc0.c    455     if (ubEnIntr == 1)
                   704           ?LINE   455
0108 F4200400      705           MOVB    RL1,[R0+#04H]
010C 4921          706           CMPB    RL1,#01h
010E 3D04          707           JMPR    cc_NE,_7
                   708   ; adc0.c    456     {
                   709   ; adc0.c    457         uwVal = uwVal + 0x0040;
                   710           ?LINE   457
0110 A8C0          711           MOV     R12,[R0]
0112 06FC4000      712           ADD     R12,#040h
0116 B8C0          713           MOV     [R0],R12
                   714   ; adc0.c    458     }
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:22  Page:  14
adc0

 LOC CODE        LINE   SOURCELINE

                   715           ?LINE   458
0118               716   _7:
                   717   ; adc0.c    459     if (ubRFill == 1)
                   718           ?LINE   459
0118 F4200200      719           MOVB    RL1,[R0+#02H]
011C 4921          720           CMPB    RL1,#01h
011E 3D04          721           JMPR    cc_NE,_8
                   722   ; adc0.c    460     {
                   723   ; adc0.c    461         uwVal = uwVal + 0x0020;
                   724           ?LINE   461
0120 A8C0          725           MOV     R12,[R0]
0122 06FC2000      726           ADD     R12,#020h
0126 B8C0          727           MOV     [R0],R12
                   728   ; adc0.c    462     }
                   729           ?LINE   462
0128               730   _8:
                   731   ; adc0.c    463     uwVal = uwVal + (ubChannelNum & 0x001f);
                   732           ?LINE   463
0128 F4200800      733           MOVB    RL1,[R0+#08H]
012C 66F11F00      734           AND     R1,#01Fh
0130 A8C0          735           MOV     R12,[R0]
0132 00C1          736           ADD     R12,R1
0134 B8C0          737           MOV     [R0],R12
                   738   ; adc0.c    464 
                   739   ; adc0.c    465    ADC0_QINR0 = uwVal; // requested channel 
                   740           ?LINE   465
0136 A8C0          741           MOV     R12,[R0]
0138 F6FCE6E0      742           MOV     0E0E6h,R12
                   743   ; adc0.c    466 
                   744   ; adc0.c    467 } //  End of function ADC0_vStartSeq0ReqChNum
               R   745           ?SYMB   '',$,102,1
               R   746           ?SYMB   '',$,102,5
               R   747           ?SYMB   '',$,102,2
               R   748           ?SYMB   '',$,102,3
               R   749           ?SYMB   '',$,102,4
                   750           ?LINE   467
013C 06F00A00      751           ADD     R0,#0Ah
               R   752           ?SYMB   '',$,96,0
0140 DB00          753           RETS
                   754   _ADC0_vStartSeq0ReqChNum        ENDP
               R   755           ?SYMB   '',$,17,467
                   756   ; adc0.c    468 
                   757   ; adc0.c    469 
                   758   ; adc0.c    470 //****************************************************************************
                   759   ; adc0.c    471 // @Function      void ADC0_viSRN0(void) 
                   760   ; adc0.c    472 //
                   761   ; adc0.c    473 //----------------------------------------------------------------------------
                   762   ; adc0.c    474 // @Description   This is the interrupt service routine for the Service 
                   763   ; adc0.c    475 //                Request Node 0 of the ADC0 module.
                   764   ; adc0.c    476 //
                   765   ; adc0.c    477 //----------------------------------------------------------------------------
                   766   ; adc0.c    478 // @Returnvalue   None
                   767   ; adc0.c    479 //
                   768   ; adc0.c    480 //----------------------------------------------------------------------------
                   769   ; adc0.c    481 // @Parameters    None
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:22  Page:  15
adc0

 LOC CODE        LINE   SOURCELINE

                   770   ; adc0.c    482 //
                   771   ; adc0.c    483 //----------------------------------------------------------------------------
                   772   ; adc0.c    484 // @Date          28.09.2021
                   773   ; adc0.c    485 //
                   774   ; adc0.c    486 //****************************************************************************
                   775   ; adc0.c    487 
                   776   ; adc0.c    488 // USER CODE BEGIN (ADC0_viSRN0,0)
                   777   ; adc0.c    489 
                   778   ; adc0.c    490 // USER CODE END
                   779   ; adc0.c    491 
                   780   ; adc0.c    492 _interrupt(ADC0_SRN0INT)  void ADC0_viSRN0(void)
                   781   ; adc0.c    493 {
               R   782           ?SYMB   'ADC0_viSRN0',_ADC0_viSRN0,37,1
                   783           ?SYMB   '',493,8,16
                   784   _ADC0_viSRN0    PROC TASK ADC0_TASK INTNO ADC0_INUM = 028h
                   785           ?LINE   493
                   786           ?SYMB   '',00H,95,0
0142 F6F00000  R   787           MOV     ADC0_RB,R0
0146 C6080000  R   788           SCXT    CP,#ADC0_RB
014A C6871000      789           SCXT    MDC,#010h
014E EC00          790           PUSH    DPP0
0150 E6000000  R   791           MOV     DPP0,#PAG ?BASE_DPP0
0154 CC00          792           NOP
0156 EC02          793           PUSH    DPP2
0158 E6020000  R   794           MOV     DPP2,#PAG ?BASE_DPP2
015C CC00          795           NOP
015E EC06          796           PUSH    MDH
0160 EC07          797           PUSH    MDL
0162 ECEF          798           PUSH    MSW
0164 EC2E          799           PUSH    MAL
0166 EC2F          800           PUSH    MAH
0168 ECEE          801           PUSH    MCW
016A C6ED0000      802           SCXT    MRW,#00h
016E EC84          803           PUSH    IDX0
0170 EC85          804           PUSH    IDX1
0172 D180          805           EXTR    #01h
0174 EC00     1    806           PUSH    QX0
0176 D180          807           EXTR    #01h
0178 EC01     1    808           PUSH    QX1
017A D180          809           EXTR    #01h
017C EC02     1    810           PUSH    QR0
017E D180          811           EXTR    #01h
0180 EC03     1    812           PUSH    QR1
                   813   ; Locals:
                   814   ; 
                   815   ; Statics:
                   816   ; 
                   817   ; CSEs:
                   818   ; 
                   819   ; adc0.c    494 
                   820   ; adc0.c    495     if((ADC0_EVINFR & 0x0100) == 0x0100)    //Result0 event interrupt 
                   821           ?LINE   495
0182 F2FCA0E0      822           MOV     R12,0E0A0h
0186 9AFC0480      823           JNB     R12.8,_10
                   824   ; adc0.c    496     {
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:22  Page:  16
adc0

 LOC CODE        LINE   SOURCELINE

                   825   ; adc0.c    497         ADC0_EVINCR = 0x0100;     // Clear Result0 event interrupt
                   826           ?LINE   497
018A E6FC0001      827           MOV     R12,#0100h
018E F6FCA2E0      828           MOV     0E0A2h,R12
                   829   ; adc0.c    498 
                   830   ; adc0.c    499       // USER CODE BEGIN (ADC0_viSRN0,20)
                   831   ; adc0.c    500 
                   832   ; adc0.c    501       // USER CODE END
                   833   ; adc0.c    502 
                   834   ; adc0.c    503     }
                   835           ?LINE   503
0192               836   _10:
                   837   ; adc0.c    504 
                   838   ; adc0.c    505 
                   839   ; adc0.c    506 } //  End of function ADC0_viSRN0
                   840           ?LINE   506
0192 D180          841           EXTR    #01h
0194 FC03     1    842           POP     QR1
0196 D180          843           EXTR    #01h
0198 FC02     1    844           POP     QR0
019A D180          845           EXTR    #01h
019C FC01     1    846           POP     QX1
019E D180          847           EXTR    #01h
01A0 FC00     1    848           POP     QX0
01A2 FC85          849           POP     IDX1
01A4 FC84          850           POP     IDX0
01A6 FCED          851           POP     MRW
01A8 FCEE          852           POP     MCW
01AA FC2F          853           POP     MAH
01AC FC2E          854           POP     MAL
01AE FCEF          855           POP     MSW
01B0 FC07          856           POP     MDL
01B2 FC06          857           POP     MDH
01B4 FC02          858           POP     DPP2
01B6 FC00          859           POP     DPP0
01B8 FC87          860           POP     MDC
01BA FC08          861           POP     CP
                   862           ?LINE   506
01BC FB88          863           RETI
                   864   _ADC0_viSRN0    ENDP
               R   865           ?SYMB   '',$,17,506
                   866   ; adc0.c    507 
                   867   ; adc0.c    508 
                   868   ; adc0.c    509 
                   869   ; adc0.c    510 // USER CODE BEGIN (ADC0_General,10)
                   870   ; adc0.c    511 
                   871   ; adc0.c    512 // USER CODE END
                   872   ; adc0.c    513 
                   873   ADC0_1_PR       ENDS
                   874   
                   875   C166_US SECTION LDAT WORD GLBUSRSTACK 'CUSTACK'
0000               876           DS      10
                   877   C166_US ENDS
                   878   
                   879   ADC0_RB REGDEF  R0-R15
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:22  Page:  17
adc0

 LOC CODE        LINE   SOURCELINE

                   880           END

total errors: 0, warnings: 0

