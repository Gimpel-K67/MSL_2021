TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:35  Page:   1
adc0

 LOC CODE        LINE   SOURCELINE

                     1   ; TASKING C166/ST10 C compiler v8.7r1 Build 775
                     2   ; options: -e -Id:\programme\tasking\c166 v8.7r1\include -x2 -Bhoeufmknladij -OB
                     3   ;          -OE -zswitch_tabmem_default -zautobitastruct-4 -zautobita-0 -FSC -A1
                     4   ;          -zvolatile_union -O0 -g -newerr -s -i0 -Ms
                     5   $DEBUG
                     6   $NOLOCALS
                     7   $EXTEND2
                     8   $NOMOD166
                     9   $STDNAMES(regsuper10bo.def)
                    10   $EXTMAC
                    11   $CASE
                    12   $NOEXPANDREGBANK
                    13   $MODEL(SMALL)
                    14           NAME    ADC0_C
                    15           ?SYMB   'adc0.c',32,80,16
                    16           ?SYMB   '',1,82,0
                    17           ?SYMB   '80166',0,84,0
                    18           ?SYMB   '',0,81,0
                    19           ?SYMB   'void',00H,45,1
                    20           ?SYMB   'char',080000H,45,2
                    21           ?SYMB   'unsigned char',080000H,45,3
                    22           ?SYMB   'short',0100000H,45,4
                    23           ?SYMB   'unsigned short',0100000H,45,5
                    24           ?SYMB   'long',0200000H,45,6
                    25           ?SYMB   'unsigned long',0200000H,45,7
                    26           ?SYMB   'float',0200000H,45,10
                    27           ?SYMB   'double',0400000H,45,11
                    28           ?SYMB   'int',0100000H,45,16
                    29           ?SYMB   'unsigned int',0100000H,45,18
                    30           ?SYMB   'bit',010000H,7,256
                    31           ?SYMB   'adc0.c',0,29,1
                    32           ?SYMB   '',0,86,1
                    33   ; adc0.c      1 //****************************************************************************
                    34   ; adc0.c      2 // @Module        Analog / Digital Converter  (ADC0)
                    35   ; adc0.c      3 // @Filename      ADC0.C
                    36   ; adc0.c      4 // @Project       DAvE_config.dav
                    37   ; adc0.c      5 //----------------------------------------------------------------------------
                    38   ; adc0.c      6 // @Controller    Infineon XE167F-96F66
                    39   ; adc0.c      7 //
                    40   ; adc0.c      8 // @Compiler      Tasking Classic
                    41   ; adc0.c      9 //
                    42   ; adc0.c     10 // @Codegenerator 2.2
                    43   ; adc0.c     11 //
                    44   ; adc0.c     12 // @Description   This file contains functions that use the ADC0 module.
                    45   ; adc0.c     13 //
                    46   ; adc0.c     14 //----------------------------------------------------------------------------
                    47   ; adc0.c     15 // @Date          27.09.2021 18:18:20
                    48   ; adc0.c     16 //
                    49   ; adc0.c     17 //****************************************************************************
                    50   ; adc0.c     18 
                    51   ; adc0.c     19 // USER CODE BEGIN (ADC0_General,1)
                    52   ; adc0.c     20 
                    53   ; adc0.c     21 // USER CODE END
                    54   ; adc0.c     22 
                    55   ; adc0.c     23 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:35  Page:   2
adc0

 LOC CODE        LINE   SOURCELINE

                    56   ; adc0.c     24 
                    57   ; adc0.c     25 //****************************************************************************
                    58   ; adc0.c     26 // @Project Includes
                    59   ; adc0.c     27 //****************************************************************************
                    60   ; adc0.c     28 
                    61   ; adc0.c     29 #include "MAIN.H"
                    62           ?SYMB   'MAIN.H',0,29,2
                    63           ?SYMB   '',0,86,2
                    64           ?SYMB   'XE16xREGS.H',0,29,3
                    65           ?SYMB   '',0,86,3
                    66           ?SYMB   '',0,86,2
                    67           ?SYMB   'SCS.H',0,29,3
                    68           ?SYMB   '',0,86,3
                    69           ?SYMB   'T$2',0,14,257
                    70           ?SYMB   'SCS_EXTCLK_F_SYS',0,33,257
                    71           ?SYMB   'SCS_EXTCLK_F_OUT',1,33,257
                    72           ?SYMB   'SCS_EXTCLK_F_PLL',2,33,257
                    73           ?SYMB   'SCS_EXTCLK_F_OSC',3,33,257
                    74           ?SYMB   'SCS_EXTCLK_F_WU',4,33,257
                    75           ?SYMB   'SCS_EXTCLK_F_TCK',5,33,257
                    76           ?SYMB   'SCS_EXTCLK_F_OSC_FL',6,33,257
                    77           ?SYMB   'SCS_EXTCLK_F_RTC',8,33,257
                    78           ?SYMB   '',16,16,0
                    79           ?SYMB   'SCS_EXTCLK_Type',257,13,258
                    80           ?SYMB   '',0,86,2
                    81           ?SYMB   'IO.H',0,29,3
                    82           ?SYMB   '',0,86,3
                    83           ?SYMB   '',0,86,2
                    84           ?SYMB   'GPT1.H',0,29,3
                    85           ?SYMB   '',0,86,3
                    86           ?SYMB   '',0,86,2
                    87           ?SYMB   'GPT2.H',0,29,3
                    88           ?SYMB   '',0,86,3
                    89           ?SYMB   '',0,86,2
                    90           ?SYMB   'CC2.H',0,29,3
                    91           ?SYMB   '',0,86,3
                    92           ?SYMB   '',0,86,2
                    93           ?SYMB   'CCU62.H',0,29,3
                    94           ?SYMB   '',0,86,3
                    95           ?SYMB   '',0,86,2
                    96           ?SYMB   'CCU63.H',0,29,3
                    97           ?SYMB   '',0,86,3
                    98           ?SYMB   '',0,86,2
                    99           ?SYMB   'ADC0.H',0,29,3
                   100           ?SYMB   '',0,86,3
                   101           ?SYMB   'ubyte',3,13,259
                   102           ?SYMB   '',0,86,2
                   103           ?SYMB   '',0,86,1
                   104   ; adc0.c     30 
                   105   ; adc0.c     31 // USER CODE BEGIN (ADC0_General,2)
                   106   ; adc0.c     32 
                   107   ; adc0.c     33 // USER CODE END
                   108   ; adc0.c     34 
                   109   ; adc0.c     35 
                   110   ; adc0.c     36 //****************************************************************************
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:35  Page:   3
adc0

 LOC CODE        LINE   SOURCELINE

                   111   ; adc0.c     37 // @Macros
                   112   ; adc0.c     38 //****************************************************************************
                   113   ; adc0.c     39 
                   114   ; adc0.c     40 // USER CODE BEGIN (ADC0_General,3)
                   115   ; adc0.c     41 
                   116   ; adc0.c     42 // USER CODE END
                   117   ; adc0.c     43 
                   118   ; adc0.c     44 
                   119   ; adc0.c     45 //****************************************************************************
                   120   ; adc0.c     46 // @Defines
                   121   ; adc0.c     47 //****************************************************************************
                   122   ; adc0.c     48 
                   123   ; adc0.c     49 // USER CODE BEGIN (ADC0_General,4)
                   124   ; adc0.c     50 
                   125   ; adc0.c     51 // USER CODE END
                   126   ; adc0.c     52 
                   127   ; adc0.c     53 
                   128   ; adc0.c     54 //****************************************************************************
                   129   ; adc0.c     55 // @Typedefs
                   130   ; adc0.c     56 //****************************************************************************
                   131   ; adc0.c     57 
                   132   ; adc0.c     58 // USER CODE BEGIN (ADC0_General,5)
                   133   ; adc0.c     59 
                   134   ; adc0.c     60 // USER CODE END
                   135   ; adc0.c     61 
                   136   ; adc0.c     62 
                   137   ; adc0.c     63 //****************************************************************************
                   138   ; adc0.c     64 // @Imported Global Variables
                   139   ; adc0.c     65 //****************************************************************************
                   140   ; adc0.c     66 
                   141   ; adc0.c     67 // USER CODE BEGIN (ADC0_General,6)
                   142   ; adc0.c     68 
                   143   ; adc0.c     69 // USER CODE END
                   144   ; adc0.c     70 
                   145   ; adc0.c     71 
                   146   ; adc0.c     72 //****************************************************************************
                   147   ; adc0.c     73 // @Global Variables
                   148   ; adc0.c     74 //****************************************************************************
                   149   ; adc0.c     75 
                   150   ; adc0.c     76 // USER CODE BEGIN (ADC0_General,7)
                   151   ; adc0.c     77 
                   152   ; adc0.c     78 // USER CODE END
                   153   ; adc0.c     79 
                   154   ; adc0.c     80 
                   155   ; adc0.c     81 //****************************************************************************
                   156   ; adc0.c     82 // @External Prototypes
                   157   ; adc0.c     83 //****************************************************************************
                   158   ; adc0.c     84 
                   159   ; adc0.c     85 // USER CODE BEGIN (ADC0_General,8)
                   160   ; adc0.c     86 
                   161   ; adc0.c     87 // USER CODE END
                   162   ; adc0.c     88 
                   163   ; adc0.c     89 
                   164   ; adc0.c     90 //****************************************************************************
                   165   ; adc0.c     91 // @Prototypes Of Local Functions
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:35  Page:   4
adc0

 LOC CODE        LINE   SOURCELINE

                   166   ; adc0.c     92 //****************************************************************************
                   167   ; adc0.c     93 
                   168   ; adc0.c     94 // USER CODE BEGIN (ADC0_General,9)
                   169   ; adc0.c     95 
                   170   ; adc0.c     96 // USER CODE END
                   171   ; adc0.c     97 
                   172   ; adc0.c     98 
                   173   ; adc0.c     99 //****************************************************************************
                   174   ; adc0.c    100 // @Function      void ADC0_vInit(void) 
                   175   ; adc0.c    101 //
                   176   ; adc0.c    102 //----------------------------------------------------------------------------
                   177   ; adc0.c    103 // @Description   This is the initialization function of the ADC function 
                   178   ; adc0.c    104 //                library. It is assumed that the SFRs used by this library 
                   179   ; adc0.c    105 //                are in reset state. 
                   180   ; adc0.c    106 //                
                   181   ; adc0.c    107 //                Following SFR fields will be initialized:
                   182   ; adc0.c    108 //                GLOBCTR  - Global Control
                   183   ; adc0.c    109 //                RSPR0    - Priority and Arbitration Register
                   184   ; adc0.c    110 //                ASENR    - Arbitration slot enable register
                   185   ; adc0.c    111 //                CHCTRx   - Channel Control Register x
                   186   ; adc0.c    112 //                RCRx     - Result Control Register x
                   187   ; adc0.c    113 //                KSCFG    - Module configuration Register
                   188   ; adc0.c    114 //                INPCR    - Input class Registers
                   189   ; adc0.c    115 //                CHINPRx  - Channel Interrupt register
                   190   ; adc0.c    116 //                EVINPRx  - Event Interrupt register
                   191   ; adc0.c    117 //                SYNCTR   - Synchronisation control register
                   192   ; adc0.c    118 //                LCBRx    - Limit check boundary register
                   193   ; adc0.c    119 //                PISEL    - Port input selection
                   194   ; adc0.c    120 //                QMR0     - Sequential 0 mode register
                   195   ; adc0.c    121 //                CRMR1    - Parallel mode register
                   196   ; adc0.c    122 //                QMR2     - Sequential 2 mode register
                   197   ; adc0.c    123 //
                   198   ; adc0.c    124 //----------------------------------------------------------------------------
                   199   ; adc0.c    125 // @Returnvalue   None
                   200   ; adc0.c    126 //
                   201   ; adc0.c    127 //----------------------------------------------------------------------------
                   202   ; adc0.c    128 // @Parameters    None
                   203   ; adc0.c    129 //
                   204   ; adc0.c    130 //----------------------------------------------------------------------------
                   205   ; adc0.c    131 // @Date          27.09.2021
                   206   ; adc0.c    132 //
                   207   ; adc0.c    133 //****************************************************************************
                   208   ; adc0.c    134 
                   209   ; adc0.c    135 // USER CODE BEGIN (ADC0_Init,1)
                   210   ; adc0.c    136 
                   211   ; adc0.c    137 // USER CODE END
                   212   ; adc0.c    138 
                   213   ; adc0.c    139 void ADC0_vInit(void)
                   214   ; adc0.c    140 {
                   215   ADC0_1_PR       SECTION CODE WORD PUBLIC 'CPROGRAM'
                   216           ?LINE   140
                   217           PUBLIC  _ADC0_vInit
               R   218           ?SYMB   'ADC0_vInit',_ADC0_vInit,37,1
                   219           ?SYMB   '',140,8,34
                   220           ?SYMB   'uword',18,13,261
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:35  Page:   5
adc0

 LOC CODE        LINE   SOURCELINE

                   221   _ADC0_vInit     PROC    FAR
                   222           ?SYMB   '',00H,95,0
                   223   ; Locals:
                   224   ; 
                   225   ; Statics:
                   226   ; 
                   227   ; CSEs:
                   228   ; 
                   229   ; adc0.c    141   // USER CODE BEGIN (ADC0_Init,2)
                   230   ; adc0.c    142 
                   231   ; adc0.c    143   // USER CODE END
                   232   ; adc0.c    144 
                   233   ; adc0.c    145   ///  -----------------------------------------------------------------------
                   234   ; adc0.c    146   ///  Configuration of ADC0 kernel configuration register:
                   235   ; adc0.c    147   ///  -----------------------------------------------------------------------
                   236   ; adc0.c    148   ADC0_KSCFG     =  0x0003;      // load ADC0 kernel configuration register
                   237           ?LINE   148
0000 E03C          238           MOV     R12,#03h
0002 F6FC0CE0      239           MOV     0E00Ch,R12
                   240   ; adc0.c    149 
                   241   ; adc0.c    150   ///  - the ADC module clock is enabled
                   242   ; adc0.c    151   ///  - the ADC module clock = 65,00 MHz
                   243   ; adc0.c    152   ///   
                   244   ; adc0.c    153 
                   245   ; adc0.c    154   _nop();  // one cycle delay 
                   246           ?LINE   154
0006 CC00          247           NOP
                   248   ; adc0.c    155 
                   249   ; adc0.c    156   _nop();  // one cycle delay 
                   250           ?LINE   156
0008 CC00          251           NOP
                   252   ; adc0.c    157 
                   253   ; adc0.c    158   ///  -----------------------------------------------------------------------
                   254   ; adc0.c    159   ///  Configure global control register:
                   255   ; adc0.c    160   ///  -----------------------------------------------------------------------
                   256   ; adc0.c    161   ///  --- Conversion Timing -----------------
                   257   ; adc0.c    162   ///  - conversion time (CTC)    = 01,31 us
                   258   ; adc0.c    163 
                   259   ; adc0.c    164   ///  _Analog clock is 1/5th of module clock and digital clock is 1/1 times 
                   260   ; adc0.c    165   ///  of module clock
                   261   ; adc0.c    166 
                   262   ; adc0.c    167   ///  - the permanent arbitration mode is selected
                   263   ; adc0.c    168   ADC0_GLOBCTR   =  0x0004;      // load global control register
                   264           ?LINE   168
000A E04C          265           MOV     R12,#04h
000C F6FC10E0      266           MOV     0E010h,R12
                   267   ; adc0.c    169 
                   268   ; adc0.c    170   ///  -----------------------------------------------------------------------
                   269   ; adc0.c    171   ///  Configuration of Arbitration Slot enable register and also the Source 
                   270   ; adc0.c    172   ///  Priority register:
                   271   ; adc0.c    173   ///  -----------------------------------------------------------------------
                   272   ; adc0.c    174   ///  - Arbitration Slot 0 is enabled
                   273   ; adc0.c    175 
                   274   ; adc0.c    176   ///  - Arbitration Slot 1 is disabled
                   275   ; adc0.c    177 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:35  Page:   6
adc0

 LOC CODE        LINE   SOURCELINE

                   276   ; adc0.c    178   ///  - Arbitration Slot 2 is disabled
                   277   ; adc0.c    179 
                   278   ; adc0.c    180   ///  - the priority of request source 0 is low
                   279   ; adc0.c    181   ///  - the wait-for-start mode is selected for source 0
                   280   ; adc0.c    182   ///  - the priority of request source 1 is low
                   281   ; adc0.c    183   ///  - the wait-for-start mode is selected for source 1
                   282   ; adc0.c    184   ///  - the priority of request source 2 is low
                   283   ; adc0.c    185   ///  - the wait-for-start mode is selected for source 2
                   284   ; adc0.c    186   ADC0_ASENR     =  0x0001;      // load Arbitration Slot enable register
                   285           ?LINE   186
0010 E01C          286           MOV     R12,#01h
0012 F6FC18E0      287           MOV     0E018h,R12
                   288   ; adc0.c    187 
                   289   ; adc0.c    188   ADC0_RSPR0     =  0x0000;      // load Priority and Arbitration register
                   290           ?LINE   188
0016 E00C          291           MOV     R12,#00h
0018 F6FC14E0      292           MOV     0E014h,R12
                   293   ; adc0.c    189 
                   294   ; adc0.c    190   ///  -----------------------------------------------------------------------
                   295   ; adc0.c    191   ///  Configuration of Channel Control Registers:
                   296   ; adc0.c    192   ///  -----------------------------------------------------------------------
                   297   ; adc0.c    193   ///  Configuration of Channel 6
                   298   ; adc0.c    194   ///  - the result register0 is selected
                   299   ; adc0.c    195   ///  - the limit check 0 is selected
                   300   ; adc0.c    196 
                   301   ; adc0.c    197   ///  - the reference voltage selected is Standard Voltage (Varef)
                   302   ; adc0.c    198 
                   303   ; adc0.c    199   ///  - the input class selected is Input Class 0
                   304   ; adc0.c    200 
                   305   ; adc0.c    201   ///  - LCBR0 is selected as upper boundary
                   306   ; adc0.c    202 
                   307   ; adc0.c    203   ///  - LCBR1 is selected as lower boundary
                   308   ; adc0.c    204 
                   309   ; adc0.c    205   ADC0_CHCTR6    =  0x0004;      // load channel control register
                   310           ?LINE   205
001C E04C          311           MOV     R12,#04h
001E F6FC2CE0      312           MOV     0E02Ch,R12
                   313   ; adc0.c    206 
                   314   ; adc0.c    207   ///  -----------------------------------------------------------------------
                   315   ; adc0.c    208   ///  Configuration of Sample Time and Resolution:
                   316   ; adc0.c    209   ///  -----------------------------------------------------------------------
                   317   ; adc0.c    210 
                   318   ; adc0.c    211   ///  10 bit resolution selected
                   319   ; adc0.c    212 
                   320   ; adc0.c    213   ADC0_INPCR0    =  0x0000;      // load input class0 register
                   321           ?LINE   213
0022 E00C          322           MOV     R12,#00h
0024 F6FCC0E0      323           MOV     0E0C0h,R12
                   324   ; adc0.c    214 
                   325   ; adc0.c    215   ///  10 bit resolution selected
                   326   ; adc0.c    216 
                   327   ; adc0.c    217   ADC0_INPCR1    =  0x0000;      // load input class1 register
                   328           ?LINE   217
0028 E00C          329           MOV     R12,#00h
002A F6FCC2E0      330           MOV     0E0C2h,R12
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:35  Page:   7
adc0

 LOC CODE        LINE   SOURCELINE

                   331   ; adc0.c    218 
                   332   ; adc0.c    219   ///  -----------------------------------------------------------------------
                   333   ; adc0.c    220   ///  Configuration of Result Control Registers:
                   334   ; adc0.c    221   ///  -----------------------------------------------------------------------
                   335   ; adc0.c    222   ///  Configuration of Result Control Register 0
                   336   ; adc0.c    223   ///  - the data reduction filter is enabled
                   337   ; adc0.c    224   ///  - the event interrupt is enabled
                   338   ; adc0.c    225   ///  - the wait-for-read mode is enabled
                   339   ; adc0.c    226 
                   340   ; adc0.c    227   ///  - the FIFO functionality is disabled
                   341   ; adc0.c    228 
                   342   ; adc0.c    229   ADC0_RCR0      =  0x0053;      // load result control register 0
                   343           ?LINE   229
002E E6FC5300      344           MOV     R12,#053h
0032 F6FCB0E0      345           MOV     0E0B0h,R12
                   346   ; adc0.c    230 
                   347   ; adc0.c    231   ///  Configuration of Result Control Register 1
                   348   ; adc0.c    232   ///  - the data reduction filter is disabled
                   349   ; adc0.c    233   ///  - the event interrupt is disabled
                   350   ; adc0.c    234   ///  - the wait-for-read mode is disabled
                   351   ; adc0.c    235 
                   352   ; adc0.c    236   ///  - the FIFO functionality is disabled
                   353   ; adc0.c    237 
                   354   ; adc0.c    238   ADC0_RCR1      =  0x0000;      // load result control register 1
                   355           ?LINE   238
0036 E00C          356           MOV     R12,#00h
0038 F6FCB2E0      357           MOV     0E0B2h,R12
                   358   ; adc0.c    239 
                   359   ; adc0.c    240   ///  Configuration of Result Control Register 2
                   360   ; adc0.c    241   ///  - the data reduction filter is disabled
                   361   ; adc0.c    242   ///  - the event interrupt is disabled
                   362   ; adc0.c    243   ///  - the wait-for-read mode is disabled
                   363   ; adc0.c    244 
                   364   ; adc0.c    245   ///  - the FIFO functionality is disabled
                   365   ; adc0.c    246 
                   366   ; adc0.c    247   ADC0_RCR2      =  0x0000;      // load result control register 2
                   367           ?LINE   247
003C E00C          368           MOV     R12,#00h
003E F6FCB4E0      369           MOV     0E0B4h,R12
                   370   ; adc0.c    248 
                   371   ; adc0.c    249   ///  Configuration of Result Control Register 3
                   372   ; adc0.c    250   ///  - the data reduction filter is disabled
                   373   ; adc0.c    251   ///  - the event interrupt is disabled
                   374   ; adc0.c    252   ///  - the wait-for-read mode is disabled
                   375   ; adc0.c    253 
                   376   ; adc0.c    254   ///  - the FIFO functionality is disabled
                   377   ; adc0.c    255 
                   378   ; adc0.c    256   ADC0_RCR3      =  0x0000;      // load result control register 3
                   379           ?LINE   256
0042 E00C          380           MOV     R12,#00h
0044 F6FCB6E0      381           MOV     0E0B6h,R12
                   382   ; adc0.c    257 
                   383   ; adc0.c    258   ///  Configuration of Result Control Register 4
                   384   ; adc0.c    259   ///  - the data reduction filter is disabled
                   385   ; adc0.c    260   ///  - the event interrupt is disabled
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:35  Page:   8
adc0

 LOC CODE        LINE   SOURCELINE

                   386   ; adc0.c    261   ///  - the wait-for-read mode is disabled
                   387   ; adc0.c    262 
                   388   ; adc0.c    263   ///  - the FIFO functionality is disabled
                   389   ; adc0.c    264 
                   390   ; adc0.c    265   ADC0_RCR4      =  0x0000;      // load result control register 4
                   391           ?LINE   265
0048 E00C          392           MOV     R12,#00h
004A F6FCB8E0      393           MOV     0E0B8h,R12
                   394   ; adc0.c    266 
                   395   ; adc0.c    267   ///  Configuration of Result Control Register 5
                   396   ; adc0.c    268   ///  - the data reduction filter is disabled
                   397   ; adc0.c    269   ///  - the event interrupt is disabled
                   398   ; adc0.c    270   ///  - the wait-for-read mode is disabled
                   399   ; adc0.c    271 
                   400   ; adc0.c    272   ///  - the FIFO functionality is disabled
                   401   ; adc0.c    273 
                   402   ; adc0.c    274   ADC0_RCR5      =  0x0000;      // load result control register 5
                   403           ?LINE   274
004E E00C          404           MOV     R12,#00h
0050 F6FCBAE0      405           MOV     0E0BAh,R12
                   406   ; adc0.c    275 
                   407   ; adc0.c    276   ///  Configuration of Result Control Register 6
                   408   ; adc0.c    277   ///  - the data reduction filter is disabled
                   409   ; adc0.c    278   ///  - the event interrupt is disabled
                   410   ; adc0.c    279   ///  - the wait-for-read mode is disabled
                   411   ; adc0.c    280 
                   412   ; adc0.c    281   ///  - the FIFO functionality is disabled
                   413   ; adc0.c    282 
                   414   ; adc0.c    283   ADC0_RCR6      =  0x0000;      // load result control register 6
                   415           ?LINE   283
0054 E00C          416           MOV     R12,#00h
0056 F6FCBCE0      417           MOV     0E0BCh,R12
                   418   ; adc0.c    284 
                   419   ; adc0.c    285   ///  Configuration of Result Control Register 7
                   420   ; adc0.c    286   ///  - the data reduction filter is disabled
                   421   ; adc0.c    287   ///  - the event interrupt is disabled
                   422   ; adc0.c    288   ///  - the wait-for-read mode is disabled
                   423   ; adc0.c    289 
                   424   ; adc0.c    290   ///  - the FIFO functionality is disabled
                   425   ; adc0.c    291 
                   426   ; adc0.c    292   ADC0_RCR7      =  0x0000;      // load result control register 7
                   427           ?LINE   292
005A E00C          428           MOV     R12,#00h
005C F6FCBEE0      429           MOV     0E0BEh,R12
                   430   ; adc0.c    293 
                   431   ; adc0.c    294   ///  -----------------------------------------------------------------------
                   432   ; adc0.c    295   ///  Configuration of Channel Interrupt Node Pointer Register:
                   433   ; adc0.c    296   ///  -----------------------------------------------------------------------
                   434   ; adc0.c    297   ADC0_CHINPR0   =  0x0000;      // load channel interrupt node pointer 
                   435           ?LINE   297
0060 E00C          436           MOV     R12,#00h
0062 F6FC98E0      437           MOV     0E098h,R12
                   438   ; adc0.c    298                                  // register
                   439   ; adc0.c    299 
                   440   ; adc0.c    300   ///  - the SR0 line become activated if channel 6 interrupt is generated
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:35  Page:   9
adc0

 LOC CODE        LINE   SOURCELINE

                   441   ; adc0.c    301 
                   442   ; adc0.c    302   ADC0_CHINPR4   =  0x0000;      // load channel interrupt node pointer 
                   443           ?LINE   302
0066 E00C          444           MOV     R12,#00h
0068 F6FC9AE0      445           MOV     0E09Ah,R12
                   446   ; adc0.c    303                                  // register
                   447   ; adc0.c    304 
                   448   ; adc0.c    305   ADC0_CHINPR8   =  0x0000;      // load channel interrupt node pointer 
                   449           ?LINE   305
006C E00C          450           MOV     R12,#00h
006E F6FC9CE0      451           MOV     0E09Ch,R12
                   452   ; adc0.c    306                                  // register
                   453   ; adc0.c    307 
                   454   ; adc0.c    308   ADC0_CHINPR12  =  0x0000;      // load channel interrupt node pointer 
                   455           ?LINE   308
0072 E00C          456           MOV     R12,#00h
0074 F6FC9EE0      457           MOV     0E09Eh,R12
                   458   ; adc0.c    309                                  // register
                   459   ; adc0.c    310 
                   460   ; adc0.c    311   ///  -----------------------------------------------------------------------
                   461   ; adc0.c    312   ///  Configuration of Event Interrupt Node Pointer Register for Source 
                   462   ; adc0.c    313   ///  Interrupts:
                   463   ; adc0.c    314   ///  -----------------------------------------------------------------------
                   464   ; adc0.c    315   ///  - the SR 0 line become activated if the event 0 interrupt is generated
                   465   ; adc0.c    316 
                   466   ; adc0.c    317   ADC0_EVINPR0   =  0x0000;      // load event interrupt set flag register 
                   467           ?LINE   317
0078 E00C          468           MOV     R12,#00h
007A F6FCA8E0      469           MOV     0E0A8h,R12
                   470   ; adc0.c    318 
                   471   ; adc0.c    319   ///  -----------------------------------------------------------------------
                   472   ; adc0.c    320   ///  Configuration of Event Interrupt Node Pointer Register for Result 
                   473   ; adc0.c    321   ///  Interrupts:
                   474   ; adc0.c    322   ///  -----------------------------------------------------------------------
                   475   ; adc0.c    323   ///  - the SR 0 line become activated if the event 8 interrupt is generated
                   476   ; adc0.c    324 
                   477   ; adc0.c    325   ADC0_EVINPR8   =  0x0000;      // load event interrupt set flag register 
                   478           ?LINE   325
007E E00C          479           MOV     R12,#00h
0080 F6FCACE0      480           MOV     0E0ACh,R12
                   481   ; adc0.c    326 
                   482   ; adc0.c    327 
                   483   ; adc0.c    328   ADC0_EVINPR12  =  0x0000;      // load event interrupt set flag register 
                   484           ?LINE   328
0084 E00C          485           MOV     R12,#00h
0086 F6FCAEE0      486           MOV     0E0AEh,R12
                   487   ; adc0.c    329 
                   488   ; adc0.c    330   ///  -----------------------------------------------------------------------
                   489   ; adc0.c    331   ///  Configuration of Service Request Nodes 0 - 3 :
                   490   ; adc0.c    332   ///  -----------------------------------------------------------------------
                   491   ; adc0.c    333   ///  SRN0 service request node configuration:
                   492   ; adc0.c    334   ///  - SRN0 interrupt priority level (ILVL) = 9
                   493   ; adc0.c    335   ///  - SRN0 interrupt group level (GLVL) = 0
                   494   ; adc0.c    336   ///  - SRN0 group priority extension (GPX) = 0
                   495   ; adc0.c    337 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:35  Page:  10
adc0

 LOC CODE        LINE   SOURCELINE

                   496   ; adc0.c    338   ADC_0IC        =  0x0064;     
                   497           ?LINE   338
008A E6FC6400      498           MOV     R12,#064h
008E F6FC70FF      499           MOV     0FF70h,R12
                   500   ; adc0.c    339 
                   501   ; adc0.c    340 
                   502   ; adc0.c    341   ///  -----------------------------------------------------------------------
                   503   ; adc0.c    342   ///  Configuration of Limit Check Boundary:
                   504   ; adc0.c    343   ///  -----------------------------------------------------------------------
                   505   ; adc0.c    344 
                   506   ; adc0.c    345   ADC0_LCBR0     =  0x0198;      // load limit check boundary register 0
                   507           ?LINE   345
0092 E6FC9801      508           MOV     R12,#0198h
0096 F6FC84E0      509           MOV     0E084h,R12
                   510   ; adc0.c    346 
                   511   ; adc0.c    347   ADC0_LCBR1     =  0x0E64;      // load limit check boundary register 1
                   512           ?LINE   347
009A E6FC640E      513           MOV     R12,#0E64h
009E F6FC86E0      514           MOV     0E086h,R12
                   515   ; adc0.c    348 
                   516   ; adc0.c    349   ADC0_LCBR2     =  0x0554;      // load limit check boundary register 2
                   517           ?LINE   349
00A2 E6FC5405      518           MOV     R12,#0554h
00A6 F6FC88E0      519           MOV     0E088h,R12
                   520   ; adc0.c    350 
                   521   ; adc0.c    351   ADC0_LCBR3     =  0x0AA8;      // load limit check boundary register 3
                   522           ?LINE   351
00AA E6FCA80A      523           MOV     R12,#0AA8h
00AE F6FC8AE0      524           MOV     0E08Ah,R12
                   525   ; adc0.c    352 
                   526   ; adc0.c    353   ///  -----------------------------------------------------------------------
                   527   ; adc0.c    354   ///  Configuration of Gating source and External Trigger Control:
                   528   ; adc0.c    355   ///  -----------------------------------------------------------------------
                   529   ; adc0.c    356   ///  - No Gating source selected for Arbitration Source 0
                   530   ; adc0.c    357 
                   531   ; adc0.c    358   ///  - the trigger input ETR00 is selected for Source 0
                   532   ; adc0.c    359 
                   533   ; adc0.c    360   ///  - No Gating source selected for Arbitration Source 1
                   534   ; adc0.c    361 
                   535   ; adc0.c    362   ///  - the trigger input ETR00 is selected for Source 1
                   536   ; adc0.c    363 
                   537   ; adc0.c    364   ///  - No Gating source selected for Arbitration Source 2
                   538   ; adc0.c    365 
                   539   ; adc0.c    366   ///  - the trigger input ETR00 is selected for Source 1
                   540   ; adc0.c    367 
                   541   ; adc0.c    368   ADC0_PISEL     =  0x0444;      // load external trigger control register
                   542           ?LINE   368
00B2 E6FC4404      543           MOV     R12,#0444h
00B6 F6FC04E0      544           MOV     0E004h,R12
                   545   ; adc0.c    369 
                   546   ; adc0.c    370   ///  -----------------------------------------------------------------------
                   547   ; adc0.c    371   ///  Configuration of Conversion Queue Mode Register:Sequential Source 0
                   548   ; adc0.c    372   ///  -----------------------------------------------------------------------
                   549   ; adc0.c    373   ///  - the gating line is permanently Enabled
                   550   ; adc0.c    374   ///  - the external trigger is disabled
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:35  Page:  11
adc0

 LOC CODE        LINE   SOURCELINE

                   551   ; adc0.c    375 
                   552   ; adc0.c    376   ADC0_QMR0      =  0x0001;      // load queue mode register
                   553           ?LINE   376
00BA E01C          554           MOV     R12,#01h
00BC F6FCE0E0      555           MOV     0E0E0h,R12
                   556   ; adc0.c    377 
                   557   ; adc0.c    378   ///  -----------------------------------------------------------------------
                   558   ; adc0.c    379   ///  Configuration of Conversion Queue Mode Register:Sequential Source 2
                   559   ; adc0.c    380   ///  -----------------------------------------------------------------------
                   560   ; adc0.c    381   ///  - the gating line is permanently Disabled
                   561   ; adc0.c    382   ///  - the external trigger is disabled
                   562   ; adc0.c    383   ///  - the trigger mode 0 is selected
                   563   ; adc0.c    384 
                   564   ; adc0.c    385   ADC0_QMR2      =  0x0000;      // load queue mode register
                   565           ?LINE   385
00C0 E00C          566           MOV     R12,#00h
00C2 F6FCF0E0      567           MOV     0E0F0h,R12
                   568   ; adc0.c    386 
                   569   ; adc0.c    387   ///  -----------------------------------------------------------------------
                   570   ; adc0.c    388   ///  Configuration of Conversion Request Mode Registers:Parallel Source 
                   571   ; adc0.c    389   ///  -----------------------------------------------------------------------
                   572   ; adc0.c    390   ///  - the gating line is permanently Disabled
                   573   ; adc0.c    391   ///  - the external trigger is disabled
                   574   ; adc0.c    392   ///  - the source interrupt is disabled
                   575   ; adc0.c    393   ///  - the autoscan functionality is disabled
                   576   ; adc0.c    394 
                   577   ; adc0.c    395   ADC0_CRMR1     =  0x0000;      // load conversion request mode register 1
                   578           ?LINE   395
00C6 E00C          579           MOV     R12,#00h
00C8 F6FCECE0      580           MOV     0E0ECh,R12
                   581   ; adc0.c    396 
                   582   ; adc0.c    397   ///  -----------------------------------------------------------------------
                   583   ; adc0.c    398   ///  Configuration of Synchronisation Registers:
                   584   ; adc0.c    399   ///  -----------------------------------------------------------------------
                   585   ; adc0.c    400   ///  - ADC0 is master 
                   586   ; adc0.c    401   ADC0_SYNCTR   |=  0x0010;      // Synchronisation register
                   587           ?LINE   401
00CC E6FC1AE0      588           MOV     R12,#0E01Ah
00D0 A8DC          589           MOV     R13,[R12]
00D2 4FFD          590           BSET    R13.4
00D4 B8DC          591           MOV     [R12],R13
                   592   ; adc0.c    402 
                   593   ; adc0.c    403   P5_DIDIS       =  0x0040;      // Port 5 Digital input disable register
                   594           ?LINE   403
00D6 E6FC4000      595           MOV     R12,#040h
00DA F6FC8AFE      596           MOV     0FE8Ah,R12
                   597   ; adc0.c    404 
                   598   ; adc0.c    405   ADC0_GLOBCTR  |=  0x0300;      // turn on Analog part
                   599           ?LINE   405
00DE E6FC10E0      600           MOV     R12,#0E010h
00E2 A8DC          601           MOV     R13,[R12]
00E4 76FD0003      602           OR      R13,#0300h
00E8 B8DC          603           MOV     [R12],R13
                   604   ; adc0.c    406 
                   605   ; adc0.c    407 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:35  Page:  12
adc0

 LOC CODE        LINE   SOURCELINE

                   606   ; adc0.c    408   // USER CODE BEGIN (ADC0_Init,3)
                   607   ; adc0.c    409 
                   608   ; adc0.c    410   // USER CODE END
                   609   ; adc0.c    411 
                   610   ; adc0.c    412 } //  End of function ADC0_vInit
                   611           ?LINE   412
00EA DB00          612           RETS
                   613   _ADC0_vInit     ENDP
               R   614           ?SYMB   '',$,17,412
                   615   ; adc0.c    413 
                   616   ; adc0.c    414 
                   617   ; adc0.c    415 //****************************************************************************
                   618   ; adc0.c    416 // @Function      void ADC0_vStartSeq0ReqChNum(ubyte ubExtTrg, ubyte 
                   619   ; adc0.c    417 //                ubEnIntr, ubyte ubRFill, ubyte ubChannelNum) 
                   620   ; adc0.c    418 //
                   621   ; adc0.c    419 //----------------------------------------------------------------------------
                   622   ; adc0.c    420 // @Description   This function starts the conversion of the requested 
                   623   ; adc0.c    421 //                channel.
                   624   ; adc0.c    422 //                NOTE -
                   625   ; adc0.c    423 //                Before passing ubEnIntr argument as 1,make sure that Seq 0 
                   626   ; adc0.c    424 //                source interrupt is enabled.
                   627   ; adc0.c    425 //                External Trigger -> 0,Indicates software trigger 
                   628   ; adc0.c    426 //                (Conversion starts once this function is executed)
                   629   ; adc0.c    427 //
                   630   ; adc0.c    428 //----------------------------------------------------------------------------
                   631   ; adc0.c    429 // @Returnvalue   None
                   632   ; adc0.c    430 //
                   633   ; adc0.c    431 //----------------------------------------------------------------------------
                   634   ; adc0.c    432 // @Parameters    ubExtTrg: 
                   635   ; adc0.c    433 //                External Trigger : defines external trigger.
                   636   ; adc0.c    434 // @Parameters    ubEnIntr: 
                   637   ; adc0.c    435 //                Enable Source Interrupt : defines source interrupt
                   638   ; adc0.c    436 // @Parameters    ubRFill: 
                   639   ; adc0.c    437 //                Refill : defines the refill
                   640   ; adc0.c    438 // @Parameters    ubChannelNum: 
                   641   ; adc0.c    439 //                Channel number : Name of the Request Channel Number (0 - 
                   642   ; adc0.c    440 //                15)- see macros defined in the header file
                   643   ; adc0.c    441 //
                   644   ; adc0.c    442 //----------------------------------------------------------------------------
                   645   ; adc0.c    443 // @Date          27.09.2021
                   646   ; adc0.c    444 //
                   647   ; adc0.c    445 //****************************************************************************
                   648   ; adc0.c    446 
                   649   ; adc0.c    447 void ADC0_vStartSeq0ReqChNum(ubyte ubExtTrg, ubyte ubEnIntr, ubyte ubRFill, uby
                         te ubChannelNum)
                   650   ; adc0.c    448 {
                   651           ?LINE   448
                   652           PUBLIC  _ADC0_vStartSeq0ReqChNum
               R   653           ?SYMB   'ADC0_vStartSeq0ReqChNum',_ADC0_vStartSeq0ReqChNum,37,1
                   654           ?SYMB   '',448,8,34
                   655   _ADC0_vStartSeq0ReqChNum        PROC    FAR
                   656           ?SYMB   '',00H,95,0
00EC 88F0          657           MOV     [-R0],R15
               R   658           ?SYMB   '',$,96,2
00EE 88C0          659           MOV     [-R0],R12
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:35  Page:  13
adc0

 LOC CODE        LINE   SOURCELINE

               R   660           ?SYMB   '',$,96,4
00F0 88D0          661           MOV     [-R0],R13
               R   662           ?SYMB   '',$,96,6
00F2 88E0          663           MOV     [-R0],R14
               R   664           ?SYMB   '',$,96,8
00F4 2802          665           SUB     R0,#02h
               R   666           ?SYMB   '',$,96,10
                   667   ; Locals:
                   668   ;     uwVal = offset 0
                   669   ;     ubRFill = offset 2
                   670   ;     ubEnIntr = offset 4
                   671   ;     ubExtTrg = offset 6
                   672   ;     ubChannelNum = offset 8
                   673   ; 
                   674   ; Statics:
                   675   ; 
                   676   ; CSEs:
                   677   ; 
                   678           ?SYMB   'ubExtTrg',4,99,259
               R   679           ?SYMB   '-4',$,101,4
                   680           ?SYMB   'ubEnIntr',3,99,259
               R   681           ?SYMB   '-6',$,101,3
                   682           ?SYMB   'ubRFill',2,99,259
               R   683           ?SYMB   '-8',$,101,2
                   684           ?SYMB   'ubChannelNum',5,99,259
               R   685           ?SYMB   '-2',$,101,5
                   686   ; adc0.c    449 
                   687   ; adc0.c    450     uword uwVal = 0;
                   688           ?SYMB   'uwVal',1,98,261
               R   689           ?SYMB   '-a',$,101,1
                   690           ?LINE   450
00F6 E00C          691           MOV     R12,#00h
00F8 B8C0          692           MOV     [R0],R12
                   693   ; adc0.c    451     if (ubExtTrg == 1)
                   694           ?LINE   451
00FA F4200600      695           MOVB    RL1,[R0+#06H]
00FE 4921          696           CMPB    RL1,#01h
0100 3D03          697           JMPR    cc_NE,_6
                   698   ; adc0.c    452     {
                   699   ; adc0.c    453         uwVal = 0x0080;
                   700           ?LINE   453
0102 E6FC8000      701           MOV     R12,#080h
0106 B8C0          702           MOV     [R0],R12
                   703   ; adc0.c    454     }
                   704           ?LINE   454
0108               705   _6:
                   706   ; adc0.c    455     if (ubEnIntr == 1)
                   707           ?LINE   455
0108 F4200400      708           MOVB    RL1,[R0+#04H]
010C 4921          709           CMPB    RL1,#01h
010E 3D04          710           JMPR    cc_NE,_7
                   711   ; adc0.c    456     {
                   712   ; adc0.c    457         uwVal = uwVal + 0x0040;
                   713           ?LINE   457
0110 A8C0          714           MOV     R12,[R0]
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:35  Page:  14
adc0

 LOC CODE        LINE   SOURCELINE

0112 06FC4000      715           ADD     R12,#040h
0116 B8C0          716           MOV     [R0],R12
                   717   ; adc0.c    458     }
                   718           ?LINE   458
0118               719   _7:
                   720   ; adc0.c    459     if (ubRFill == 1)
                   721           ?LINE   459
0118 F4200200      722           MOVB    RL1,[R0+#02H]
011C 4921          723           CMPB    RL1,#01h
011E 3D04          724           JMPR    cc_NE,_8
                   725   ; adc0.c    460     {
                   726   ; adc0.c    461         uwVal = uwVal + 0x0020;
                   727           ?LINE   461
0120 A8C0          728           MOV     R12,[R0]
0122 06FC2000      729           ADD     R12,#020h
0126 B8C0          730           MOV     [R0],R12
                   731   ; adc0.c    462     }
                   732           ?LINE   462
0128               733   _8:
                   734   ; adc0.c    463     uwVal = uwVal + (ubChannelNum & 0x001f);
                   735           ?LINE   463
0128 F4200800      736           MOVB    RL1,[R0+#08H]
012C 66F11F00      737           AND     R1,#01Fh
0130 A8C0          738           MOV     R12,[R0]
0132 00C1          739           ADD     R12,R1
0134 B8C0          740           MOV     [R0],R12
                   741   ; adc0.c    464 
                   742   ; adc0.c    465    ADC0_QINR0 = uwVal; // requested channel 
                   743           ?LINE   465
0136 A8C0          744           MOV     R12,[R0]
0138 F6FCE6E0      745           MOV     0E0E6h,R12
                   746   ; adc0.c    466 
                   747   ; adc0.c    467 } //  End of function ADC0_vStartSeq0ReqChNum
               R   748           ?SYMB   '',$,102,1
               R   749           ?SYMB   '',$,102,5
               R   750           ?SYMB   '',$,102,2
               R   751           ?SYMB   '',$,102,3
               R   752           ?SYMB   '',$,102,4
                   753           ?LINE   467
013C 06F00A00      754           ADD     R0,#0Ah
               R   755           ?SYMB   '',$,96,0
0140 DB00          756           RETS
                   757   _ADC0_vStartSeq0ReqChNum        ENDP
               R   758           ?SYMB   '',$,17,467
                   759   ; adc0.c    468 
                   760   ; adc0.c    469 
                   761   ; adc0.c    470 //****************************************************************************
                   762   ; adc0.c    471 // @Function      void ADC0_viSRN0(void) 
                   763   ; adc0.c    472 //
                   764   ; adc0.c    473 //----------------------------------------------------------------------------
                   765   ; adc0.c    474 // @Description   This is the interrupt service routine for the Service 
                   766   ; adc0.c    475 //                Request Node 0 of the ADC0 module.
                   767   ; adc0.c    476 //
                   768   ; adc0.c    477 //----------------------------------------------------------------------------
                   769   ; adc0.c    478 // @Returnvalue   None
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:35  Page:  15
adc0

 LOC CODE        LINE   SOURCELINE

                   770   ; adc0.c    479 //
                   771   ; adc0.c    480 //----------------------------------------------------------------------------
                   772   ; adc0.c    481 // @Parameters    None
                   773   ; adc0.c    482 //
                   774   ; adc0.c    483 //----------------------------------------------------------------------------
                   775   ; adc0.c    484 // @Date          27.09.2021
                   776   ; adc0.c    485 //
                   777   ; adc0.c    486 //****************************************************************************
                   778   ; adc0.c    487 
                   779   ; adc0.c    488 // USER CODE BEGIN (ADC0_viSRN0,0)
                   780   ; adc0.c    489 
                   781   ; adc0.c    490 // USER CODE END
                   782   ; adc0.c    491 
                   783   ; adc0.c    492 _interrupt(ADC0_SRN0INT)  void ADC0_viSRN0(void)
                   784   ; adc0.c    493 {
               R   785           ?SYMB   'ADC0_viSRN0',_ADC0_viSRN0,37,1
                   786           ?SYMB   '',493,8,16
                   787   _ADC0_viSRN0    PROC TASK ADC0_TASK INTNO ADC0_INUM = 028h
                   788           ?LINE   493
                   789           ?SYMB   '',00H,95,0
0142 F6F00000  R   790           MOV     ADC0_RB,R0
0146 C6080000  R   791           SCXT    CP,#ADC0_RB
014A C6871000      792           SCXT    MDC,#010h
014E EC00          793           PUSH    DPP0
0150 E6000000  R   794           MOV     DPP0,#PAG ?BASE_DPP0
0154 CC00          795           NOP
0156 EC02          796           PUSH    DPP2
0158 E6020000  R   797           MOV     DPP2,#PAG ?BASE_DPP2
015C CC00          798           NOP
015E EC06          799           PUSH    MDH
0160 EC07          800           PUSH    MDL
0162 ECEF          801           PUSH    MSW
0164 EC2E          802           PUSH    MAL
0166 EC2F          803           PUSH    MAH
0168 ECEE          804           PUSH    MCW
016A C6ED0000      805           SCXT    MRW,#00h
016E EC84          806           PUSH    IDX0
0170 EC85          807           PUSH    IDX1
0172 D180          808           EXTR    #01h
0174 EC00     1    809           PUSH    QX0
0176 D180          810           EXTR    #01h
0178 EC01     1    811           PUSH    QX1
017A D180          812           EXTR    #01h
017C EC02     1    813           PUSH    QR0
017E D180          814           EXTR    #01h
0180 EC03     1    815           PUSH    QR1
                   816   ; Locals:
                   817   ; 
                   818   ; Statics:
                   819   ; 
                   820   ; CSEs:
                   821   ; 
                   822   ; adc0.c    494 
                   823   ; adc0.c    495     if((ADC0_EVINFR & 0x0100) == 0x0100)    //Result0 event interrupt 
                   824           ?LINE   495
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:35  Page:  16
adc0

 LOC CODE        LINE   SOURCELINE

0182 F2FCA0E0      825           MOV     R12,0E0A0h
0186 9AFC0480      826           JNB     R12.8,_10
                   827   ; adc0.c    496     {
                   828   ; adc0.c    497         ADC0_EVINCR = 0x0100;     // Clear Result0 event interrupt
                   829           ?LINE   497
018A E6FC0001      830           MOV     R12,#0100h
018E F6FCA2E0      831           MOV     0E0A2h,R12
                   832   ; adc0.c    498 
                   833   ; adc0.c    499       // USER CODE BEGIN (ADC0_viSRN0,20)
                   834   ; adc0.c    500 
                   835   ; adc0.c    501       // USER CODE END
                   836   ; adc0.c    502 
                   837   ; adc0.c    503     }
                   838           ?LINE   503
0192               839   _10:
                   840   ; adc0.c    504 
                   841   ; adc0.c    505 
                   842   ; adc0.c    506 } //  End of function ADC0_viSRN0
                   843           ?LINE   506
0192 D180          844           EXTR    #01h
0194 FC03     1    845           POP     QR1
0196 D180          846           EXTR    #01h
0198 FC02     1    847           POP     QR0
019A D180          848           EXTR    #01h
019C FC01     1    849           POP     QX1
019E D180          850           EXTR    #01h
01A0 FC00     1    851           POP     QX0
01A2 FC85          852           POP     IDX1
01A4 FC84          853           POP     IDX0
01A6 FCED          854           POP     MRW
01A8 FCEE          855           POP     MCW
01AA FC2F          856           POP     MAH
01AC FC2E          857           POP     MAL
01AE FCEF          858           POP     MSW
01B0 FC07          859           POP     MDL
01B2 FC06          860           POP     MDH
01B4 FC02          861           POP     DPP2
01B6 FC00          862           POP     DPP0
01B8 FC87          863           POP     MDC
01BA FC08          864           POP     CP
                   865           ?LINE   506
01BC FB88          866           RETI
                   867   _ADC0_viSRN0    ENDP
               R   868           ?SYMB   '',$,17,506
                   869   ; adc0.c    507 
                   870   ; adc0.c    508 
                   871   ; adc0.c    509 
                   872   ; adc0.c    510 // USER CODE BEGIN (ADC0_General,10)
                   873   ; adc0.c    511 
                   874   ; adc0.c    512 // USER CODE END
                   875   ; adc0.c    513 
                   876   ADC0_1_PR       ENDS
                   877   
                   878   C166_US SECTION LDAT WORD GLBUSRSTACK 'CUSTACK'
0000               879           DS      10
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:35  Page:  17
adc0

 LOC CODE        LINE   SOURCELINE

                   880   C166_US ENDS
                   881   
                   882   ADC0_RB REGDEF  R0-R15
                   883           END

total errors: 0, warnings: 0

