; TASKING C166/ST10 C compiler v8.7r1 Build 775
; options: -e -Id:\programme\tasking\c166 v8.7r1\include -x2 -Bhoeufmknladij -OB
;          -OE -zswitch_tabmem_default -zautobitastruct-4 -zautobita-0 -FSC -A1
;          -zvolatile_union -O0 -g -newerr -s -i0 -Ms
$DEBUG
$NOLOCALS
$EXTEND2
$NOMOD166
$STDNAMES(regsuper10bo.def)
$EXTMAC
$CASE
$NOEXPANDREGBANK
$MODEL(SMALL)
	NAME	MAIN_C
	?SYMB	'main.c',32,80,16
	?SYMB	'',1,82,0
	?SYMB	'80166',0,84,0
	?SYMB	'',0,81,0
	?SYMB	'void',00H,45,1
	?SYMB	'char',080000H,45,2
	?SYMB	'unsigned char',080000H,45,3
	?SYMB	'short',0100000H,45,4
	?SYMB	'unsigned short',0100000H,45,5
	?SYMB	'long',0200000H,45,6
	?SYMB	'unsigned long',0200000H,45,7
	?SYMB	'float',0200000H,45,10
	?SYMB	'double',0400000H,45,11
	?SYMB	'int',0100000H,45,16
	?SYMB	'unsigned int',0100000H,45,18
	?SYMB	'bit',010000H,7,256
	?SYMB	'main.c',0,29,1
	?SYMB	'',0,86,1
; main.c      1	//****************************************************************************
; main.c      2	// @Module        Project Settings
; main.c      3	// @Filename      MAIN.C
; main.c      4	// @Project       DAvE_config.dav
; main.c      5	//----------------------------------------------------------------------------
; main.c      6	// @Controller    Infineon XE167F-96F66
; main.c      7	//
; main.c      8	// @Compiler      Tasking Classic
; main.c      9	//
; main.c     10	// @Codegenerator 2.2
; main.c     11	//
; main.c     12	// @Description   This file contains the project initialization function.
; main.c     13	//
; main.c     14	//----------------------------------------------------------------------------
; main.c     15	// @Date          24.09.2021 15:34:14
; main.c     16	//
; main.c     17	//****************************************************************************
; main.c     18	
; main.c     19	// USER CODE BEGIN (MAIN_General,1)
; main.c     20	
; main.c     21	// USER CODE END
; main.c     22	
; main.c     23	
; main.c     24	
; main.c     25	//****************************************************************************
; main.c     26	// @Project Includes
; main.c     27	//****************************************************************************
; main.c     28	
; main.c     29	#include "MAIN.H"
	?SYMB	'MAIN.H',0,29,2
	?SYMB	'',0,86,2
	?SYMB	'XE16xREGS.H',0,29,3
	?SYMB	'',0,86,3
	?SYMB	'',0,86,2
	?SYMB	'SCS.H',0,29,3
	?SYMB	'',0,86,3
	?SYMB	'T$2',0,14,257
	?SYMB	'SCS_EXTCLK_F_SYS',0,33,257
	?SYMB	'SCS_EXTCLK_F_OUT',1,33,257
	?SYMB	'SCS_EXTCLK_F_PLL',2,33,257
	?SYMB	'SCS_EXTCLK_F_OSC',3,33,257
	?SYMB	'SCS_EXTCLK_F_WU',4,33,257
	?SYMB	'SCS_EXTCLK_F_TCK',5,33,257
	?SYMB	'SCS_EXTCLK_F_OSC_FL',6,33,257
	?SYMB	'SCS_EXTCLK_F_RTC',8,33,257
	?SYMB	'',16,16,0
	?SYMB	'SCS_EXTCLK_Type',257,13,258
	?SYMB	'',0,86,2
	?SYMB	'IO.H',0,29,3
	?SYMB	'',0,86,3
	?SYMB	'',0,86,2
	?SYMB	'GPT1.H',0,29,3
	?SYMB	'',0,86,3
	?SYMB	'',0,86,2
	?SYMB	'GPT2.H',0,29,3
	?SYMB	'',0,86,3
	?SYMB	'',0,86,2
	?SYMB	'CC2.H',0,29,3
	?SYMB	'',0,86,3
	?SYMB	'',0,86,2
	?SYMB	'CCU62.H',0,29,3
	?SYMB	'',0,86,3
	?SYMB	'',0,86,2
	?SYMB	'CCU63.H',0,29,3
	?SYMB	'',0,86,3
	?SYMB	'',0,86,2
	?SYMB	'',0,86,1
; main.c     30	
; main.c     31	// USER CODE BEGIN (MAIN_General,2)
; main.c     32	#include <math.h>
	?SYMB	'd:\programme\tasking\c166 v8.7r1\include\math.h',0,29,2
	?SYMB	'',0,86,2
	?SYMB	'',0,86,1
; main.c     33	// USER CODE END
; main.c     34	
; main.c     35	
; main.c     36	//****************************************************************************
; main.c     37	// @Macros
; main.c     38	//****************************************************************************
; main.c     39	
; main.c     40	// USER CODE BEGIN (MAIN_General,3)
; main.c     41	
; main.c     42	// USER CODE END
; main.c     43	
; main.c     44	
; main.c     45	//****************************************************************************
; main.c     46	// @Defines
; main.c     47	//****************************************************************************
; main.c     48	
; main.c     49	// USER CODE BEGIN (MAIN_General,4)
; main.c     50	
; main.c     51	// USER CODE END
; main.c     52	
; main.c     53	
; main.c     54	//****************************************************************************
; main.c     55	// @Typedefs
; main.c     56	//****************************************************************************
; main.c     57	
; main.c     58	// USER CODE BEGIN (MAIN_General,5)
; main.c     59	
; main.c     60	// USER CODE END
; main.c     61	
; main.c     62	
; main.c     63	//****************************************************************************
; main.c     64	// @Imported Global Variables
; main.c     65	//****************************************************************************
; main.c     66	
; main.c     67	// USER CODE BEGIN (MAIN_General,6)
; main.c     68	
; main.c     69	// USER CODE END
; main.c     70	
; main.c     71	
; main.c     72	//****************************************************************************
; main.c     73	// @Global Variables
; main.c     74	//****************************************************************************
; main.c     75	
; main.c     76	// USER CODE BEGIN (MAIN_General,7)
; main.c     77		const unsigned int ARRAY_SIZE = 600;
MAIN_1_NC	SECTION	LDAT WORD PUBLIC 'CNEARROM'
_ARRAY_SIZE	LABEL	WORD
	DW	0258h
	PUBLIC	_ARRAY_SIZE
	?SYMB	'ARRAY_SIZE',_ARRAY_SIZE,22,18
; main.c     78		const unsigned int OFFSET_L2 = ARRAY_SIZE/3;
_OFFSET_L2	LABEL	WORD
	DW	0C8h
	PUBLIC	_OFFSET_L2
	?SYMB	'OFFSET_L2',_OFFSET_L2,22,18
; main.c     79		const unsigned int OFFSET_L3 = (2*ARRAY_SIZE)/3;
_OFFSET_L3	LABEL	WORD
	DW	0190h
	PUBLIC	_OFFSET_L3
	?SYMB	'OFFSET_L3',_OFFSET_L3,22,18
; main.c     80		unsigned int table[ARRAY_SIZE];
; main.c     81		unsigned int index;
; main.c     82		float pi = 3.14159265359;
MAIN_1_NC	ENDS

MAIN_IR_NB	SECTION	PDAT WORD PUBLIC 'CINITROM'
MAIN_IR_NB_ENTRY	LABEL	BYTE
	DW	04049h,0FDBh
MAIN_IR_NB	ENDS

MAIN_ID_NB	SECTION	LDAT WORD PUBLIC 'CINITIRAM'
MAIN_ID_NB_ENTRY	LABEL	BYTE
_pi	LABEL	WORD
	DS	4
	PUBLIC	_pi
	?SYMB	'pi',_pi,22,10
; main.c     83	// USER CODE END
; main.c     84	
; main.c     85	
; main.c     86	//****************************************************************************
; main.c     87	// @External Prototypes
; main.c     88	//****************************************************************************
; main.c     89	
; main.c     90	// USER CODE BEGIN (MAIN_General,8)
; main.c     91	
; main.c     92	// USER CODE END
; main.c     93	
; main.c     94	
; main.c     95	//****************************************************************************
; main.c     96	// @Prototypes Of Local Functions
; main.c     97	//****************************************************************************
; main.c     98	
; main.c     99	// USER CODE BEGIN (MAIN_General,9)
; main.c    100	void generateTable();
; main.c    101	// USER CODE END
; main.c    102	
; main.c    103	
; main.c    104	//****************************************************************************
; main.c    105	// @Function      void MAIN_vInit(void) 
; main.c    106	//
; main.c    107	//----------------------------------------------------------------------------
; main.c    108	// @Description   This function initializes the microcontroller.
; main.c    109	//
; main.c    110	//----------------------------------------------------------------------------
; main.c    111	// @Returnvalue   None
; main.c    112	//
; main.c    113	//----------------------------------------------------------------------------
; main.c    114	// @Parameters    None
; main.c    115	//
; main.c    116	//----------------------------------------------------------------------------
; main.c    117	// @Date          24.09.2021
; main.c    118	//
; main.c    119	//****************************************************************************
; main.c    120	
; main.c    121	// USER CODE BEGIN (Init,1)
; main.c    122	
; main.c    123	// USER CODE END
; main.c    124	
; main.c    125	void MAIN_vInit(void)
; main.c    126	{
MAIN_ID_NB	ENDS

MAIN_4_PR	SECTION	CODE WORD PUBLIC 'CPROGRAM'
	?LINE	126
	PUBLIC	_MAIN_vInit
	?SYMB	'MAIN_vInit',_MAIN_vInit,37,1
	?SYMB	'',126,8,34
	?SYMB	'',010000H,7,260
	?SYMB	'',010001H,7,261
	?SYMB	'',010002H,7,262
	?SYMB	'',010003H,7,263
	?SYMB	'',010004H,7,264
	?SYMB	'',010005H,7,265
	?SYMB	'',010006H,7,266
	?SYMB	'',010007H,7,267
	?SYMB	'',010000H,7,268
	?SYMB	'',010001H,7,269
	?SYMB	'',010002H,7,270
	?SYMB	'',010003H,7,271
	?SYMB	'',010004H,7,272
	?SYMB	'',010005H,7,273
	?SYMB	'',010006H,7,274
	?SYMB	'',010007H,7,275
	?SYMB	'T$1',0,40,276
	?SYMB	'bit0',0,23,260
	?SYMB	'bit1',1,23,261
	?SYMB	'bit2',2,23,262
	?SYMB	'bit3',3,23,263
	?SYMB	'bit4',4,23,264
	?SYMB	'bit5',5,23,265
	?SYMB	'bit6',6,23,266
	?SYMB	'bit7',7,23,267
	?SYMB	'bit8',8,23,268
	?SYMB	'bit9',9,23,269
	?SYMB	'bit10',10,23,270
	?SYMB	'bit11',11,23,271
	?SYMB	'bit12',12,23,272
	?SYMB	'bit13',13,23,273
	?SYMB	'bit14',14,23,274
	?SYMB	'bit15',15,23,275
	?SYMB	'',16,18,0
	?SYMB	'T_Reg16',276,13,277
_MAIN_vInit	PROC	FAR
	?SYMB	'',00H,95,0
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c    127	  // USER CODE BEGIN (Init,2)
; main.c    128	
; main.c    129	  // USER CODE END
; main.c    130	
; main.c    131	  //   globally disable interrupts
; main.c    132	  PSW_IEN        =  0;          
	?LINE	132
	MOV	R12,#0FF10h
	MOV	R13,[R12]
	AND	R13,#0F7FFh
	MOV	[R12],R13
; main.c    133	
; main.c    134	
; main.c    135	  ///  -----------------------------------------------------------------------
; main.c    136	  ///  Configuration of the System Clock:
; main.c    137	  ///  -----------------------------------------------------------------------
; main.c    138	  ///  - VCO clock used, input clock is connected
; main.c    139	  ///  - input frequency is 10,00 MHz
; main.c    140	  ///  - configured system frequency is 66,00 MHz
; main.c    141	
; main.c    142	  MAIN_vUnlockProtecReg();     // unlock write security
	?LINE	142
	CALLS	SEG _MAIN_vUnlockProtecReg,_MAIN_vUnlockProtecReg
; main.c    143	
; main.c    144	  MAIN_vChangeFreq();          // load PLL control register
	?LINE	144
	CALLS	SEG _MAIN_vChangeFreq,_MAIN_vChangeFreq
; main.c    145	
; main.c    146	  //   -----------------------------------------------------------------------
; main.c    147	  //   Initialization of the Peripherals:
; main.c    148	  //   -----------------------------------------------------------------------
; main.c    149	
; main.c    150	  //   initializes the Parallel Ports
; main.c    151	  IO_vInit();
	?LINE	151
	CALLS	SEG _IO_vInit,_IO_vInit
; main.c    152	
; main.c    153	  //   initializes the General Purpose Timer Unit (GPT1)
; main.c    154	  GPT1_vInit();
	?LINE	154
	CALLS	SEG _GPT1_vInit,_GPT1_vInit
; main.c    155	
; main.c    156	  //   initializes the General Purpose Timer Unit (GPT2)
; main.c    157	  GPT2_vInit();
	?LINE	157
	CALLS	SEG _GPT2_vInit,_GPT2_vInit
; main.c    158	
; main.c    159	  //   initializes the Capture / Compare Unit 2 (CAPCOM2)
; main.c    160	  CC2_vInit();
	?LINE	160
	CALLS	SEG _CC2_vInit,_CC2_vInit
; main.c    161	
; main.c    162	  //   initializes the Capture / Compare Unit 62 (CCU62)
; main.c    163	  CCU62_vInit();
	?LINE	163
	CALLS	SEG _CCU62_vInit,_CCU62_vInit
; main.c    164	
; main.c    165	  //   initializes the Capture / Compare Unit 63 (CCU63)
; main.c    166	  CCU63_vInit();
	?LINE	166
	CALLS	SEG _CCU63_vInit,_CCU63_vInit
; main.c    167	
; main.c    168	
; main.c    169	  //   -----------------------------------------------------------------------
; main.c    170	  //   Initialization of the Bank Select registers:
; main.c    171	  //   -----------------------------------------------------------------------
; main.c    172	
; main.c    173	
; main.c    174	  // USER CODE BEGIN (Init,3)
; main.c    175	
; main.c    176	  // USER CODE END
; main.c    177	
; main.c    178	  MAIN_vLockProtecReg();       // lock write security
	?LINE	178
	CALLS	SEG _MAIN_vLockProtecReg,_MAIN_vLockProtecReg
; main.c    179	
; main.c    180	  //   globally enable interrupts
; main.c    181	  PSW_IEN        =  1;          
	?LINE	181
	MOV	R12,#0FF10h
	MOV	R13,[R12]
	BFLDH	R13,#08h,#08h
	MOV	[R12],R13
; main.c    182	
; main.c    183	} //  End of function MAIN_vInit
	?LINE	183
	RETS
_MAIN_vInit	ENDP
	?SYMB	'',$,17,183
; main.c    184	
; main.c    185	
; main.c    186	//****************************************************************************
; main.c    187	// @Function      void MAIN_vUnlockProtecReg(void) 
; main.c    188	//
; main.c    189	//----------------------------------------------------------------------------
; main.c    190	// @Description   This function makes it possible to write one protected 
; main.c    191	//                register.
; main.c    192	//
; main.c    193	//----------------------------------------------------------------------------
; main.c    194	// @Returnvalue   None
; main.c    195	//
; main.c    196	//----------------------------------------------------------------------------
; main.c    197	// @Parameters    None
; main.c    198	//
; main.c    199	//----------------------------------------------------------------------------
; main.c    200	// @Date          24.09.2021
; main.c    201	//
; main.c    202	//****************************************************************************
; main.c    203	
; main.c    204	// USER CODE BEGIN (UnlockProtecReg,1)
; main.c    205	
; main.c    206	// USER CODE END
; main.c    207	
; main.c    208	void MAIN_vUnlockProtecReg(void)
; main.c    209	{
	?LINE	209
	PUBLIC	_MAIN_vUnlockProtecReg
	?SYMB	'MAIN_vUnlockProtecReg',_MAIN_vUnlockProtecReg,37,1
	?SYMB	'',209,8,34
	?SYMB	'uword',18,13,279
_MAIN_vUnlockProtecReg	PROC	FAR
	?SYMB	'',00H,95,0
	SUB	R0,#02h
	?SYMB	'',$,96,2
; Locals:
;     uwPASSWORD = offset 0
; 
; Statics:
; 
; CSEs:
; 
; main.c    210	  uword uwPASSWORD;
	?SYMB	'uwPASSWORD',1,98,279
	?SYMB	'-2',$,101,1
; main.c    211	
; main.c    212	    SCU_SLC = 0xAAAA;                   // command 0
	?LINE	212
	MOV	R12,#0AAAAh
	MOV	0F0C0h,R12
; main.c    213	    SCU_SLC = 0x5554;                   // command 1
	?LINE	213
	MOV	R12,#05554h
	MOV	0F0C0h,R12
; main.c    214	
; main.c    215	    uwPASSWORD = SCU_SLS & 0x00FF;
	?LINE	215
	MOV	R12,0F0C2h
	AND	R12,#0FFh
	MOV	[R0],R12
; main.c    216	    uwPASSWORD = (~uwPASSWORD) & 0x00FF;
	?LINE	216
	MOV	R12,[R0]
	CPL	R12
	AND	R12,#0FFh
	MOV	[R0],R12
; main.c    217	
; main.c    218	    SCU_SLC = 0x9600 | uwPASSWORD;      // command 2
	?LINE	218
	MOV	R12,[R0]
	OR	R12,#09600h
	MOV	0F0C0h,R12
; main.c    219	    SCU_SLC = 0x0000;                   // command 3
	?LINE	219
	MOV	R12,#00h
	MOV	0F0C0h,R12
; main.c    220	
; main.c    221	} //  End of function MAIN_vUnlockProtecReg
	?SYMB	'',$,102,1
	?LINE	221
	ADD	R0,#02h
	?SYMB	'',$,96,0
	RETS
_MAIN_vUnlockProtecReg	ENDP
	?SYMB	'',$,17,221
; main.c    222	
; main.c    223	
; main.c    224	//****************************************************************************
; main.c    225	// @Function      void MAIN_vLockProtecReg(void) 
; main.c    226	//
; main.c    227	//----------------------------------------------------------------------------
; main.c    228	// @Description   This function makes it possible to lock one protected 
; main.c    229	//                register.
; main.c    230	//
; main.c    231	//----------------------------------------------------------------------------
; main.c    232	// @Returnvalue   None
; main.c    233	//
; main.c    234	//----------------------------------------------------------------------------
; main.c    235	// @Parameters    None
; main.c    236	//
; main.c    237	//----------------------------------------------------------------------------
; main.c    238	// @Date          24.09.2021
; main.c    239	//
; main.c    240	//****************************************************************************
; main.c    241	
; main.c    242	// USER CODE BEGIN (LockProtecReg,1)
; main.c    243	
; main.c    244	// USER CODE END
; main.c    245	
; main.c    246	void MAIN_vLockProtecReg(void)
; main.c    247	{
	?LINE	247
	PUBLIC	_MAIN_vLockProtecReg
	?SYMB	'MAIN_vLockProtecReg',_MAIN_vLockProtecReg,37,1
	?SYMB	'',247,8,34
_MAIN_vLockProtecReg	PROC	FAR
	?SYMB	'',00H,95,0
	SUB	R0,#02h
	?SYMB	'',$,96,2
; Locals:
;     uwPASSWORD = offset 0
; 
; Statics:
; 
; CSEs:
; 
; main.c    248	  uword uwPASSWORD;
	?SYMB	'uwPASSWORD',1,98,279
	?SYMB	'-2',$,101,1
; main.c    249	
; main.c    250	    SCU_SLC = 0xAAAA;                   // command 0
	?LINE	250
	MOV	R12,#0AAAAh
	MOV	0F0C0h,R12
; main.c    251	    SCU_SLC = 0x5554;                   // command 1
	?LINE	251
	MOV	R12,#05554h
	MOV	0F0C0h,R12
; main.c    252	
; main.c    253	    uwPASSWORD = SCU_SLS & 0x00FF;
	?LINE	253
	MOV	R12,0F0C2h
	AND	R12,#0FFh
	MOV	[R0],R12
; main.c    254	    uwPASSWORD = (~uwPASSWORD) & 0x00FF;
	?LINE	254
	MOV	R12,[R0]
	CPL	R12
	AND	R12,#0FFh
	MOV	[R0],R12
; main.c    255	
; main.c    256	    SCU_SLC = 0x9600 | uwPASSWORD;      // command 2
	?LINE	256
	MOV	R12,[R0]
	OR	R12,#09600h
	MOV	0F0C0h,R12
; main.c    257	    SCU_SLC = 0x1800;                   // command 3; new PASSWOR is 0x00
	?LINE	257
	MOV	R12,#01800h
	MOV	0F0C0h,R12
; main.c    258	
; main.c    259	    uwPASSWORD = SCU_SLS & 0x00FF;
	?LINE	259
	MOV	R12,0F0C2h
	AND	R12,#0FFh
	MOV	[R0],R12
; main.c    260	    uwPASSWORD = (~uwPASSWORD) & 0x00FF;
	?LINE	260
	MOV	R12,[R0]
	CPL	R12
	AND	R12,#0FFh
	MOV	[R0],R12
; main.c    261	    SCU_SLC = 0x8E00 | uwPASSWORD;      // command 4
	?LINE	261
	MOV	R12,[R0]
	OR	R12,#08E00h
	MOV	0F0C0h,R12
; main.c    262	
; main.c    263	} //  End of function MAIN_vLockProtecReg
	?SYMB	'',$,102,1
	?LINE	263
	ADD	R0,#02h
	?SYMB	'',$,96,0
	RETS
_MAIN_vLockProtecReg	ENDP
	?SYMB	'',$,17,263
; main.c    264	
; main.c    265	
; main.c    266	//****************************************************************************
; main.c    267	// @Function      void MAIN_vChangeFreq(void) 
; main.c    268	//
; main.c    269	//----------------------------------------------------------------------------
; main.c    270	// @Description   This function is used to select the external crystal and
; main.c    271	//                configure the system frequency to 80Mhz/66Mhz.
; main.c    272	//
; main.c    273	//----------------------------------------------------------------------------
; main.c    274	// @Returnvalue   None
; main.c    275	//
; main.c    276	//----------------------------------------------------------------------------
; main.c    277	// @Parameters    None
; main.c    278	//
; main.c    279	//----------------------------------------------------------------------------
; main.c    280	// @Date          24.09.2021
; main.c    281	//
; main.c    282	//****************************************************************************
; main.c    283	
; main.c    284	// USER CODE BEGIN (ChangeFreq,1)
; main.c    285	
; main.c    286	// USER CODE END
; main.c    287	
; main.c    288	void MAIN_vChangeFreq(void)
; main.c    289	{
	?LINE	289
	PUBLIC	_MAIN_vChangeFreq
	?SYMB	'MAIN_vChangeFreq',_MAIN_vChangeFreq,37,1
	?SYMB	'',289,8,34
_MAIN_vChangeFreq	PROC	FAR
	?SYMB	'',00H,95,0
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c    290	  SCS_SwitchToHighPrecBandgap();
	?LINE	290
	CALLS	SEG _SCS_SwitchToHighPrecBandgap,_SCS_SwitchToHighPrecBandgap
; main.c    291	
; main.c    292	  //For application and internal application resets, the complete PLL configuration could be avoided
; main.c    293	  //The entry from application resets and internal application reset is covered in the following differentiation
; main.c    294	  //in int/ext clock in lock/unlocked state.
; main.c    295	
; main.c    296	  if  ((SCU_PLLSTAT & 0x0004) == 0x0004)             // fR derived from Internal clock
	?LINE	296
	MOV	R12,0F0BCh
	JNB	R12.2,_7
; main.c    297	        {
; main.c    298	            //Normal startup state during boot and the clock
; main.c    299	            //has to be in the next step configured on the external crystal
; main.c    300	            //use XTAL/VCO, count XTAL clock
; main.c    301	
; main.c    302	            SCS_StartXtalOsc(1);                     // Starts the crystal oscillator
	?LINE	302
	MOV	R12,#01h
	CALLS	SEG _SCS_StartXtalOsc,_SCS_StartXtalOsc
; main.c    303	            SCS_SwitchSystemClock(1);                // System clock is increased to target speed (80/66 MHz)
	?LINE	303
	MOV	R12,#01h
	CALLS	SEG _SCS_SwitchSystemClock,_SCS_SwitchSystemClock
; main.c    304	
; main.c    305	        }
	?LINE	305
	RETS
_7:
; main.c    306	
; main.c    307	  else                                               // fR derived from external crystal clock
; main.c    308	        {
; main.c    309	            if ((SCU_PLLSTAT & 0x1009) == 0x1009)    // fR derived from external crystal clock + VCO is locked
	?LINE	309
	MOV	R12,0F0BCh
	AND	R12,#01009h
	CMP	R12,#01009h
	JMPR	cc_NE,_8
; main.c    310	            {
; main.c    311	               //usually after an application reset where clock need not be configured again.
; main.c    312	               //check K2/P/N values and decide whether these values have to be adapted based on application needs.
; main.c    313	               NOP();
	?LINE	313
	NOP
; main.c    314	               //usually the PLL losss of Lock TRAP schould be enabled here.
; main.c    315	            }
	?LINE	315
	JMPR	cc_UC,_9
_8:
; main.c    316	            else                                     //fR derived from external crystal clock + VCO is not locked
; main.c    317	
; main.c    318	            {
; main.c    319	               //estimate the K1 value and the current frequency
; main.c    320	               //reduce K2/P/N values in steps so that the frequency
; main.c    321	               //jumps is limited to 20MHz or factor of 5 whichever is minimum
; main.c    322	               NOP();
	?LINE	322
	NOP
; main.c    323	            }
	?LINE	323
_9:
; main.c    324	
; main.c    325	
; main.c    326	        }
	?LINE	326
_10:
; main.c    327	
; main.c    328	} //  End of function MAIN_vChangeFreq
	?LINE	328
	RETS
_MAIN_vChangeFreq	ENDP
	?SYMB	'',$,17,328
; main.c    329	
; main.c    330	
; main.c    331	//****************************************************************************
; main.c    332	// @Function      void main(void) 
; main.c    333	//
; main.c    334	//----------------------------------------------------------------------------
; main.c    335	// @Description   This is the main function.
; main.c    336	//
; main.c    337	//----------------------------------------------------------------------------
; main.c    338	// @Returnvalue   None
; main.c    339	//
; main.c    340	//----------------------------------------------------------------------------
; main.c    341	// @Parameters    None
; main.c    342	//
; main.c    343	//----------------------------------------------------------------------------
; main.c    344	// @Date          24.09.2021
; main.c    345	//
; main.c    346	//****************************************************************************
; main.c    347	
; main.c    348	// USER CODE BEGIN (Main,1)
; main.c    349	
; main.c    350	// USER CODE END
; main.c    351	
; main.c    352	void main(void)
; main.c    353	{
	?LINE	353
	PUBLIC	_main
	?SYMB	'main',_main,37,1
	?SYMB	'',353,8,34
_main	PROC	FAR
	?SYMB	'',00H,95,0
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c    354	  // USER CODE BEGIN (Main,2)
; main.c    355	
; main.c    356	  // USER CODE END
; main.c    357	
; main.c    358	  MAIN_vInit();
	?LINE	358
	CALLS	SEG _MAIN_vInit,_MAIN_vInit
; main.c    359	
; main.c    360	  // USER CODE BEGIN (Main,3)
; main.c    361	 	generateTable();
	?LINE	361
	CALLS	SEG _generateTable,_generateTable
; main.c    362		CCU63_vStartTmr(CCU63_TIMER_12);
	?LINE	362
	MOV	R12,#0EBA6h
	MOV	R13,[R12]
	BSET	R13.1
	MOV	[R12],R13
; main.c    363		CCU62_vStartTmr(CCU62_TIMER_12);
	?LINE	363
	MOV	R12,#0EB26h
	MOV	R13,[R12]
	BSET	R13.1
	MOV	[R12],R13
; main.c    364		IO_vSetPin(LED_DBG);
	?LINE	364
	MOV	R12,#01h
	MOV	0E9E0h,R12
; main.c    365		CCU62_vSetTmrPeriod(CCU62_TIMER_12, 0xFDE7);
	?LINE	365
	MOV	R12,#0FDE7h
	MOV	0EB12h,R12
; main.c    366		CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
	?LINE	366
	MOV	R12,#0EB26h
	MOV	R13,[R12]
	BSET	R13.6
	MOV	[R12],R13
; main.c    367	  // USER CODE END
; main.c    368	
; main.c    369	  while(1)
	?LINE	369
	JMPR	cc_UC,_13
_13:
_14:
	JMPR	cc_UC,_14
; main.c    370	  {
; main.c    371	
; main.c    372	   // USER CODE BEGIN (Main,4)
; main.c    373	
; main.c    374	   // USER CODE END
; main.c    375	
; main.c    376	  }
; main.c    377	
; main.c    378	} //  End of function main
	?LINE	378
	RETS
_main	ENDP
	?SYMB	'',$,17,378
; main.c    379	
; main.c    380	
; main.c    381	
; main.c    382	// USER CODE BEGIN (MAIN_General,10)
; main.c    383	void generateTable(){
	?LINE	383
	PUBLIC	_generateTable
	?SYMB	'generateTable',_generateTable,37,1
	?SYMB	'',383,8,34
_generateTable	PROC	FAR
	?SYMB	'',00H,95,0
	SUB	R0,#0Ah
	?SYMB	'',$,96,10
; Locals:
;     i = offset 0
;     stepSize = offset 2
; 
; Statics:
; 
; CSEs:
; 
; main.c    384		double stepSize = (2*pi)/(ARRAY_SIZE);
	?SYMB	'stepSize',2,98,11
	?SYMB	'-8',$,101,2
	?LINE	384
	MOV	R4,_pi
	MOV	R5,(_pi+2)
	MOV	R10,#04000h
	MOV	R11,#00h
	CALLS	SEG __mlf4r,__mlf4r
	MOV	R10,#04416h
	MOV	R11,#00h
	CALLS	SEG __dvf4r,__dvf4r
	CALLS	SEG __cff48r,__cff48r
	?SYMB	'',$,96,18
	MOV	R4,R0
	ADD	R4,#0Ah
	CALLS	SEG __store8n,__store8n
	ADD	R0,#08h
	?SYMB	'',$,96,10
; main.c    385		int i;
	?SYMB	'i',1,98,16
	?SYMB	'-a',$,101,1
; main.c    386		for (i = 0; i < ARRAY_SIZE; i++){ 
	?LINE	386
	MOV	R12,#00h
	MOV	[R0],R12
	JMPR	cc_UC,_22
_21:
; main.c    387			table[i] = (unsigned int)((double)(CCU63_T12PR/2)*(sin(stepSize * i) + 1) + 0.5);
	?LINE	387
	SUB	R0,#08h
	?SYMB	'',$,96,18
	MOV	R4,#0Ah
	ADD	R4,R0
	CALLS	SEG __load8n,__load8n
	?SYMB	'',$,96,26
	MOV	R11,[R0+#010H]
	MOV	R4,R11
	MOV	R12,R10
	CALLS	SEG __cif28r,__cif28r
	?SYMB	'',$,96,34
	MOV	R11,R10
	MOV	R10,R12
	CALLS	SEG __mlf8r,__mlf8r
	ADD	R0,#08h
	?SYMB	'',$,96,26
	CALLS	SEG _sin,_sin
	ADD	R0,#08h
	?SYMB	'',$,96,18
	MOV	R11,R4
	MOV	R4,#_18
	CALLS	SEG __load8n,__load8n
	?SYMB	'',$,96,26
	CALLS	SEG __adf8r,__adf8r
	MOV	R11,R10
	MOV	R10,0EB92h
	SHR	R10,#01h
	MOV	R4,R10
	CALLS	SEG __cuf28r,__cuf28r
	?SYMB	'',$,96,34
	CALLS	SEG __mlf8r,__mlf8r
	MOV	R11,R10
	MOV	R4,#_17
	CALLS	SEG __load8n,__load8n
	?SYMB	'',$,96,42
	CALLS	SEG __adf8r,__adf8r
	CALLS	SEG __cfu82r,__cfu82r
	ADD	R0,#020h
	?SYMB	'',$,96,10
	MOV	R12,[R0]
	SHL	R12,#01h
	MOV	[R12+#_table],R4
	?LINE	386
	MOV	R12,[R0]
	ADD	R12,#01h
	MOV	[R0],R12
_22:
	MOV	R12,[R0]
	CMP	R12,#0258h
	JMPR	cc_ULT,_21
; main.c    388		}
; main.c    389	}
	?SYMB	'',$,102,1
	?SYMB	'',$,102,2
	?LINE	389
	ADD	R0,#0Ah
	?SYMB	'',$,96,0
	RETS
_generateTable	ENDP
	?SYMB	'',$,17,389
; main.c    390	// USER CODE END
; main.c    391	
MAIN_4_PR	ENDS

MAIN_5_NB	SECTION	LDAT WORD PUBLIC 'CNEAR'
MAIN_5_NB_ENTRY	LABEL	BYTE
_table	LABEL	WORD
	DS	1200
	PUBLIC	_table
	?SYMB	'',011d0012H,5,284
	?SYMB	'',16,47,285
	?SYMB	'',0,30,0
	?SYMB	'',599,49,0
	?SYMB	'table',_table,22,284
_index	LABEL	WORD
	DS	2
	PUBLIC	_index
	?SYMB	'index',_index,22,18
MAIN_5_NB	ENDS

MAIN_6_CO	SECTION	LDAT WORD PUBLIC 'CROM'
_18	LABEL	WORD
	DW	03FF0h,00h,00h,00h
_17	LABEL	WORD
	DW	03FE0h,00h,00h,00h
MAIN_6_CO	ENDS

C166_US	SECTION	LDAT WORD GLBUSRSTACK 'CUSTACK'
	DS	46
C166_US	ENDS

C166_INIT	SECTION	PDAT WORD GLOBAL 'CINITROM'
	DW	06h
	DPPTR	MAIN_ID_NB_ENTRY,MAIN_IR_NB_ENTRY
	DW	04h
C166_INIT	ENDS

C166_BSS	SECTION	PDAT WORD GLOBAL 'CINITROM'
	DW	05h,MAIN_5_NB_ENTRY,04B2h
C166_BSS	ENDS

$FLOAT(ANSI)
	EXTERN	_CCU62_vInit:FAR
	EXTERN	_CC2_vInit:FAR
	EXTERN	_CCU63_vInit:FAR
	EXTERN	_sin:FAR
	EXTERN	_SCS_SwitchToHighPrecBandgap:FAR
	EXTERN	_SCS_StartXtalOsc:FAR
	EXTERN	_IO_vInit:FAR
	EXTERN	_GPT2_vInit:FAR
	EXTERN	_GPT1_vInit:FAR
	EXTERN	_SCS_SwitchSystemClock:FAR
	EXTERN	__mlf4r:FAR
	EXTERN	__dvf4r:FAR
	EXTERN	__cff48r:FAR
	EXTERN	__store8n:FAR
	EXTERN	__load8n:FAR
	EXTERN	__cif28r:FAR
	EXTERN	__mlf8r:FAR
	EXTERN	__adf8r:FAR
	EXTERN	__cuf28r:FAR
	EXTERN	__cfu82r:FAR
	EXTERN	__CSTART:FAR
	REGDEF	R0-R15
	END
