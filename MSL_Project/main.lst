TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:   1
main

 LOC CODE        LINE   SOURCELINE

                     1   ; TASKING C166/ST10 C compiler v8.7r1 Build 775
                     2   ; options: -e -Id:\programme\tasking\c166 v8.7r1\include -x2 -Bhoeufmknladij -OB
                     3   ;          -OE -zswitch_tabmem_default -zautobitastruct-4 -zautobita-0 -FSC -A1
                     4   ;          -zvolatile_union -O0 -g -newerr -s -i0 -Ms
                     5   $DEBUG
                     6   $NOLOCALS
                     7   $EXTEND2
                     8   $NOMOD166
                     9   $STDNAMES(regsuper10bo.def)
                    10   $EXTMAC
                    11   $CASE
                    12   $NOEXPANDREGBANK
                    13   $MODEL(SMALL)
                    14           NAME    MAIN_C
                    15           ?SYMB   'main.c',32,80,16
                    16           ?SYMB   '',1,82,0
                    17           ?SYMB   '80166',0,84,0
                    18           ?SYMB   '',0,81,0
                    19           ?SYMB   'void',00H,45,1
                    20           ?SYMB   'char',080000H,45,2
                    21           ?SYMB   'unsigned char',080000H,45,3
                    22           ?SYMB   'short',0100000H,45,4
                    23           ?SYMB   'unsigned short',0100000H,45,5
                    24           ?SYMB   'long',0200000H,45,6
                    25           ?SYMB   'unsigned long',0200000H,45,7
                    26           ?SYMB   'float',0200000H,45,10
                    27           ?SYMB   'double',0400000H,45,11
                    28           ?SYMB   'int',0100000H,45,16
                    29           ?SYMB   'unsigned int',0100000H,45,18
                    30           ?SYMB   'bit',010000H,7,256
                    31           ?SYMB   'main.c',0,29,1
                    32           ?SYMB   '',0,86,1
                    33   ; main.c      1 //****************************************************************************
                    34   ; main.c      2 // @Module        Project Settings
                    35   ; main.c      3 // @Filename      MAIN.C
                    36   ; main.c      4 // @Project       DAvE_config.dav
                    37   ; main.c      5 //----------------------------------------------------------------------------
                    38   ; main.c      6 // @Controller    Infineon XE167F-96F66
                    39   ; main.c      7 //
                    40   ; main.c      8 // @Compiler      Tasking Classic
                    41   ; main.c      9 //
                    42   ; main.c     10 // @Codegenerator 2.2
                    43   ; main.c     11 //
                    44   ; main.c     12 // @Description   This file contains the project initialization function.
                    45   ; main.c     13 //
                    46   ; main.c     14 //----------------------------------------------------------------------------
                    47   ; main.c     15 // @Date          29.09.2021 09:41:08
                    48   ; main.c     16 //
                    49   ; main.c     17 //****************************************************************************
                    50   ; main.c     18 
                    51   ; main.c     19 // USER CODE BEGIN (MAIN_General,1)
                    52   ; main.c     20 
                    53   ; main.c     21 // USER CODE END
                    54   ; main.c     22 
                    55   ; main.c     23 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:   2
main

 LOC CODE        LINE   SOURCELINE

                    56   ; main.c     24 
                    57   ; main.c     25 //****************************************************************************
                    58   ; main.c     26 // @Project Includes
                    59   ; main.c     27 //****************************************************************************
                    60   ; main.c     28 
                    61   ; main.c     29 #include "MAIN.H"
                    62           ?SYMB   'MAIN.H',0,29,2
                    63           ?SYMB   '',0,86,2
                    64           ?SYMB   'XE16xREGS.H',0,29,3
                    65           ?SYMB   '',0,86,3
                    66           ?SYMB   '',0,86,2
                    67           ?SYMB   'SCS.H',0,29,3
                    68           ?SYMB   '',0,86,3
                    69           ?SYMB   'T$2',0,14,257
                    70           ?SYMB   'SCS_EXTCLK_F_SYS',0,33,257
                    71           ?SYMB   'SCS_EXTCLK_F_OUT',1,33,257
                    72           ?SYMB   'SCS_EXTCLK_F_PLL',2,33,257
                    73           ?SYMB   'SCS_EXTCLK_F_OSC',3,33,257
                    74           ?SYMB   'SCS_EXTCLK_F_WU',4,33,257
                    75           ?SYMB   'SCS_EXTCLK_F_TCK',5,33,257
                    76           ?SYMB   'SCS_EXTCLK_F_OSC_FL',6,33,257
                    77           ?SYMB   'SCS_EXTCLK_F_RTC',8,33,257
                    78           ?SYMB   '',16,16,0
                    79           ?SYMB   'SCS_EXTCLK_Type',257,13,258
                    80           ?SYMB   '',0,86,2
                    81           ?SYMB   'IO.H',0,29,3
                    82           ?SYMB   '',0,86,3
                    83           ?SYMB   '',0,86,2
                    84           ?SYMB   'GPT1.H',0,29,3
                    85           ?SYMB   '',0,86,3
                    86           ?SYMB   '',0,86,2
                    87           ?SYMB   'GPT2.H',0,29,3
                    88           ?SYMB   '',0,86,3
                    89           ?SYMB   '',0,86,2
                    90           ?SYMB   'CCU62.H',0,29,3
                    91           ?SYMB   '',0,86,3
                    92           ?SYMB   '',0,86,2
                    93           ?SYMB   'CCU63.H',0,29,3
                    94           ?SYMB   '',0,86,3
                    95           ?SYMB   '',0,86,2
                    96           ?SYMB   'ADC0.H',0,29,3
                    97           ?SYMB   '',0,86,3
                    98           ?SYMB   'ubyte',3,13,259
                    99           ?SYMB   '',0,86,2
                   100           ?SYMB   '',0,86,1
                   101   ; main.c     30 
                   102   ; main.c     31 // USER CODE BEGIN (MAIN_General,2)
                   103   ; main.c     32 #include <math.h>
                   104           ?SYMB   'd:\programme\tasking\c166 v8.7r1\include\math.h',0,29,2
                   105           ?SYMB   '',0,86,2
                   106           ?SYMB   '',0,86,1
                   107   ; main.c     33 // USER CODE END
                   108   ; main.c     34 
                   109   ; main.c     35 
                   110   ; main.c     36 //****************************************************************************
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:   3
main

 LOC CODE        LINE   SOURCELINE

                   111   ; main.c     37 // @Macros
                   112   ; main.c     38 //****************************************************************************
                   113   ; main.c     39 
                   114   ; main.c     40 // USER CODE BEGIN (MAIN_General,3)
                   115   ; main.c     41 
                   116   ; main.c     42 // USER CODE END
                   117   ; main.c     43 
                   118   ; main.c     44 
                   119   ; main.c     45 //****************************************************************************
                   120   ; main.c     46 // @Defines
                   121   ; main.c     47 //****************************************************************************
                   122   ; main.c     48 
                   123   ; main.c     49 // USER CODE BEGIN (MAIN_General,4)
                   124   ; main.c     50         // clockwise=rechtslauf, counterclockwise=linkslauf
                   125   ; main.c     51         #define clockwise (0)
                   126   ; main.c     52         #define counterclockwise (1)
                   127   ; main.c     53 // USER CODE END
                   128   ; main.c     54 
                   129   ; main.c     55 
                   130   ; main.c     56 //****************************************************************************
                   131   ; main.c     57 // @Typedefs
                   132   ; main.c     58 //****************************************************************************
                   133   ; main.c     59 
                   134   ; main.c     60 // USER CODE BEGIN (MAIN_General,5)
                   135   ; main.c     61 
                   136   ; main.c     62 // USER CODE END
                   137   ; main.c     63 
                   138   ; main.c     64 
                   139   ; main.c     65 //****************************************************************************
                   140   ; main.c     66 // @Imported Global Variables
                   141   ; main.c     67 //****************************************************************************
                   142   ; main.c     68 
                   143   ; main.c     69 // USER CODE BEGIN (MAIN_General,6)
                   144   ; main.c     70 
                   145   ; main.c     71 // USER CODE END
                   146   ; main.c     72 
                   147   ; main.c     73 
                   148   ; main.c     74 //****************************************************************************
                   149   ; main.c     75 // @Global Variables
                   150   ; main.c     76 //****************************************************************************
                   151   ; main.c     77 
                   152   ; main.c     78 // USER CODE BEGIN (MAIN_General,7)
                   153   ; main.c     79         unsigned int frequency = 0;
                   154   MAIN_IR_NB      SECTION PDAT WORD PUBLIC 'CINITROM'
0000               155   MAIN_IR_NB_ENTRY        LABEL   BYTE
0000 0000          156           DW      00h
                   157   MAIN_IR_NB      ENDS
                   158   
                   159   MAIN_ID_NB      SECTION LDAT WORD PUBLIC 'CINITIRAM'
0000               160   MAIN_ID_NB_ENTRY        LABEL   BYTE
0000               161   _frequency      LABEL   WORD
0000               162           DS      2
                   163           PUBLIC  _frequency
               R   164           ?SYMB   'frequency',_frequency,22,18
                   165   ; main.c     80         const unsigned int ARRAY_SIZE = 1200;
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:   4
main

 LOC CODE        LINE   SOURCELINE

                   166   MAIN_ID_NB      ENDS
                   167   
                   168   MAIN_3_NC       SECTION LDAT WORD PUBLIC 'CNEARROM'
0000               169   _ARRAY_SIZE     LABEL   WORD
0000 B004          170           DW      04B0h
                   171           PUBLIC  _ARRAY_SIZE
               R   172           ?SYMB   'ARRAY_SIZE',_ARRAY_SIZE,22,18
                   173   ; main.c     81         unsigned int OFFSET_L1;
                   174   ; main.c     82         unsigned int OFFSET_L2;
                   175   ; main.c     83         unsigned int OFFSET_L3;
                   176   ; main.c     84         unsigned int table[ARRAY_SIZE];
                   177   ; main.c     85         unsigned int index;
                   178   ; main.c     86         float pi = 3.14159265359;
                   179   MAIN_3_NC       ENDS
                   180   
                   181   MAIN_IR_NB      SECTION PDAT
0002 4940DB0F      182           DW      04049h,0FDBh
                   183   MAIN_IR_NB      ENDS
                   184   
                   185   MAIN_ID_NB      SECTION LDAT
0002               186   _pi     LABEL   WORD
0002               187           DS      4
                   188           PUBLIC  _pi
               R   189           ?SYMB   'pi',_pi,22,10
                   190   ; main.c     87         volatile unsigned int rampIndex;
                   191   ; main.c     88         volatile float velocity;
                   192   ; main.c     89         volatile float rpm;
                   193   ; main.c     90         //unsigned int ccu62_pr = 1/(frequency * ARRAY_SIZE*0.000000015);
                   194   ; main.c     91 
                   195   ; main.c     92 // USER CODE END
                   196   ; main.c     93 
                   197   ; main.c     94 
                   198   ; main.c     95 //****************************************************************************
                   199   ; main.c     96 // @External Prototypes
                   200   ; main.c     97 //****************************************************************************
                   201   ; main.c     98 
                   202   ; main.c     99 // USER CODE BEGIN (MAIN_General,8)
                   203   ; main.c    100 
                   204   ; main.c    101 // USER CODE END
                   205   ; main.c    102 
                   206   ; main.c    103 
                   207   ; main.c    104 //****************************************************************************
                   208   ; main.c    105 // @Prototypes Of Local Functions
                   209   ; main.c    106 //****************************************************************************
                   210   ; main.c    107 
                   211   ; main.c    108 // USER CODE BEGIN (MAIN_General,9)
                   212   ; main.c    109 void generateTable();
                   213   ; main.c    110 unsigned int calculateMotorFrequency (int frequency);
                   214   ; main.c    111 void setPhaseChange(int dir);
                   215   ; main.c    112 // USER CODE END
                   216   ; main.c    113 
                   217   ; main.c    114 
                   218   ; main.c    115 //****************************************************************************
                   219   ; main.c    116 // @Function      void MAIN_vInit(void) 
                   220   ; main.c    117 //
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:   5
main

 LOC CODE        LINE   SOURCELINE

                   221   ; main.c    118 //----------------------------------------------------------------------------
                   222   ; main.c    119 // @Description   This function initializes the microcontroller.
                   223   ; main.c    120 //
                   224   ; main.c    121 //----------------------------------------------------------------------------
                   225   ; main.c    122 // @Returnvalue   None
                   226   ; main.c    123 //
                   227   ; main.c    124 //----------------------------------------------------------------------------
                   228   ; main.c    125 // @Parameters    None
                   229   ; main.c    126 //
                   230   ; main.c    127 //----------------------------------------------------------------------------
                   231   ; main.c    128 // @Date          29.09.2021
                   232   ; main.c    129 //
                   233   ; main.c    130 //****************************************************************************
                   234   ; main.c    131 
                   235   ; main.c    132 // USER CODE BEGIN (Init,1)
                   236   ; main.c    133 
                   237   ; main.c    134 // USER CODE END
                   238   ; main.c    135 
                   239   ; main.c    136 void MAIN_vInit(void)
                   240   ; main.c    137 {
                   241   MAIN_ID_NB      ENDS
                   242   
                   243   MAIN_4_PR       SECTION CODE WORD PUBLIC 'CPROGRAM'
                   244           ?LINE   137
                   245           PUBLIC  _MAIN_vInit
               R   246           ?SYMB   'MAIN_vInit',_MAIN_vInit,37,1
                   247           ?SYMB   '',137,8,34
                   248           ?SYMB   '',010000H,7,261
                   249           ?SYMB   '',010001H,7,262
                   250           ?SYMB   '',010002H,7,263
                   251           ?SYMB   '',010003H,7,264
                   252           ?SYMB   '',010004H,7,265
                   253           ?SYMB   '',010005H,7,266
                   254           ?SYMB   '',010006H,7,267
                   255           ?SYMB   '',010007H,7,268
                   256           ?SYMB   '',010000H,7,269
                   257           ?SYMB   '',010001H,7,270
                   258           ?SYMB   '',010002H,7,271
                   259           ?SYMB   '',010003H,7,272
                   260           ?SYMB   '',010004H,7,273
                   261           ?SYMB   '',010005H,7,274
                   262           ?SYMB   '',010006H,7,275
                   263           ?SYMB   '',010007H,7,276
                   264           ?SYMB   'T$1',0,40,277
                   265           ?SYMB   'bit0',0,23,261
                   266           ?SYMB   'bit1',1,23,262
                   267           ?SYMB   'bit2',2,23,263
                   268           ?SYMB   'bit3',3,23,264
                   269           ?SYMB   'bit4',4,23,265
                   270           ?SYMB   'bit5',5,23,266
                   271           ?SYMB   'bit6',6,23,267
                   272           ?SYMB   'bit7',7,23,268
                   273           ?SYMB   'bit8',8,23,269
                   274           ?SYMB   'bit9',9,23,270
                   275           ?SYMB   'bit10',10,23,271
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:   6
main

 LOC CODE        LINE   SOURCELINE

                   276           ?SYMB   'bit11',11,23,272
                   277           ?SYMB   'bit12',12,23,273
                   278           ?SYMB   'bit13',13,23,274
                   279           ?SYMB   'bit14',14,23,275
                   280           ?SYMB   'bit15',15,23,276
                   281           ?SYMB   '',16,18,0
                   282           ?SYMB   'T_Reg16',277,13,278
                   283   _MAIN_vInit     PROC    FAR
                   284           ?SYMB   '',00H,95,0
                   285   ; Locals:
                   286   ; 
                   287   ; Statics:
                   288   ; 
                   289   ; CSEs:
                   290   ; 
                   291   ; main.c    138   // USER CODE BEGIN (Init,2)
                   292   ; main.c    139 
                   293   ; main.c    140   // USER CODE END
                   294   ; main.c    141 
                   295   ; main.c    142   //   globally disable interrupts
                   296   ; main.c    143   PSW_IEN        =  0;          
                   297           ?LINE   143
0000 E6FC10FF      298           MOV     R12,#0FF10h
0004 A8DC          299           MOV     R13,[R12]
0006 66FDFFF7      300           AND     R13,#0F7FFh
000A B8DC          301           MOV     [R12],R13
                   302   ; main.c    144 
                   303   ; main.c    145 
                   304   ; main.c    146   ///  -----------------------------------------------------------------------
                   305   ; main.c    147   ///  Configuration of the System Clock:
                   306   ; main.c    148   ///  -----------------------------------------------------------------------
                   307   ; main.c    149   ///  - VCO clock used, input clock is connected
                   308   ; main.c    150   ///  - input frequency is 10,00 MHz
                   309   ; main.c    151   ///  - configured system frequency is 66,00 MHz
                   310   ; main.c    152 
                   311   ; main.c    153   MAIN_vUnlockProtecReg();     // unlock write security
                   312           ?LINE   153
000C DA003E00  R   313           CALLS   SEG _MAIN_vUnlockProtecReg,_MAIN_vUnlockProtecReg
                   314   ; main.c    154 
                   315   ; main.c    155   MAIN_vChangeFreq();          // load PLL control register
                   316           ?LINE   155
0010 DA00D200  R   317           CALLS   SEG _MAIN_vChangeFreq,_MAIN_vChangeFreq
                   318   ; main.c    156 
                   319   ; main.c    157   //   -----------------------------------------------------------------------
                   320   ; main.c    158   //   Initialization of the Peripherals:
                   321   ; main.c    159   //   -----------------------------------------------------------------------
                   322   ; main.c    160 
                   323   ; main.c    161   //   initializes the Parallel Ports
                   324   ; main.c    162   IO_vInit();
                   325           ?LINE   162
0014 DA000000  R   326           CALLS   SEG _IO_vInit,_IO_vInit
                   327   ; main.c    163 
                   328   ; main.c    164   //   initializes the General Purpose Timer Unit (GPT1)
                   329   ; main.c    165   GPT1_vInit();
                   330           ?LINE   165
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:   7
main

 LOC CODE        LINE   SOURCELINE

0018 DA000000  R   331           CALLS   SEG _GPT1_vInit,_GPT1_vInit
                   332   ; main.c    166 
                   333   ; main.c    167   //   initializes the General Purpose Timer Unit (GPT2)
                   334   ; main.c    168   GPT2_vInit();
                   335           ?LINE   168
001C DA000000  R   336           CALLS   SEG _GPT2_vInit,_GPT2_vInit
                   337   ; main.c    169 
                   338   ; main.c    170   //   initializes the Capture / Compare Unit 62 (CCU62)
                   339   ; main.c    171   CCU62_vInit();
                   340           ?LINE   171
0020 DA000000  R   341           CALLS   SEG _CCU62_vInit,_CCU62_vInit
                   342   ; main.c    172 
                   343   ; main.c    173   //   initializes the Capture / Compare Unit 63 (CCU63)
                   344   ; main.c    174   CCU63_vInit();
                   345           ?LINE   174
0024 DA000000  R   346           CALLS   SEG _CCU63_vInit,_CCU63_vInit
                   347   ; main.c    175 
                   348   ; main.c    176   //   initializes the Analog / Digital Converter  (ADC0)
                   349   ; main.c    177   ADC0_vInit();
                   350           ?LINE   177
0028 DA000000  R   351           CALLS   SEG _ADC0_vInit,_ADC0_vInit
                   352   ; main.c    178 
                   353   ; main.c    179 
                   354   ; main.c    180   //   -----------------------------------------------------------------------
                   355   ; main.c    181   //   Initialization of the Bank Select registers:
                   356   ; main.c    182   //   -----------------------------------------------------------------------
                   357   ; main.c    183 
                   358   ; main.c    184 
                   359   ; main.c    185   // USER CODE BEGIN (Init,3)
                   360   ; main.c    186 
                   361   ; main.c    187   // USER CODE END
                   362   ; main.c    188 
                   363   ; main.c    189   MAIN_vLockProtecReg();       // lock write security
                   364           ?LINE   189
002C DA007800  R   365           CALLS   SEG _MAIN_vLockProtecReg,_MAIN_vLockProtecReg
                   366   ; main.c    190 
                   367   ; main.c    191   //   globally enable interrupts
                   368   ; main.c    192   PSW_IEN        =  1;          
                   369           ?LINE   192
0030 E6FC10FF      370           MOV     R12,#0FF10h
0034 A8DC          371           MOV     R13,[R12]
0036 1AFD0808      372           BFLDH   R13,#08h,#08h
003A B8DC          373           MOV     [R12],R13
                   374   ; main.c    193 
                   375   ; main.c    194 } //  End of function MAIN_vInit
                   376           ?LINE   194
003C DB00          377           RETS
                   378   _MAIN_vInit     ENDP
               R   379           ?SYMB   '',$,17,194
                   380   ; main.c    195 
                   381   ; main.c    196 
                   382   ; main.c    197 //****************************************************************************
                   383   ; main.c    198 // @Function      void MAIN_vUnlockProtecReg(void) 
                   384   ; main.c    199 //
                   385   ; main.c    200 //----------------------------------------------------------------------------
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:   8
main

 LOC CODE        LINE   SOURCELINE

                   386   ; main.c    201 // @Description   This function makes it possible to write one protected 
                   387   ; main.c    202 //                register.
                   388   ; main.c    203 //
                   389   ; main.c    204 //----------------------------------------------------------------------------
                   390   ; main.c    205 // @Returnvalue   None
                   391   ; main.c    206 //
                   392   ; main.c    207 //----------------------------------------------------------------------------
                   393   ; main.c    208 // @Parameters    None
                   394   ; main.c    209 //
                   395   ; main.c    210 //----------------------------------------------------------------------------
                   396   ; main.c    211 // @Date          29.09.2021
                   397   ; main.c    212 //
                   398   ; main.c    213 //****************************************************************************
                   399   ; main.c    214 
                   400   ; main.c    215 // USER CODE BEGIN (UnlockProtecReg,1)
                   401   ; main.c    216 
                   402   ; main.c    217 // USER CODE END
                   403   ; main.c    218 
                   404   ; main.c    219 void MAIN_vUnlockProtecReg(void)
                   405   ; main.c    220 {
                   406           ?LINE   220
                   407           PUBLIC  _MAIN_vUnlockProtecReg
               R   408           ?SYMB   'MAIN_vUnlockProtecReg',_MAIN_vUnlockProtecReg,37,1
                   409           ?SYMB   '',220,8,34
                   410           ?SYMB   'uword',18,13,280
                   411   _MAIN_vUnlockProtecReg  PROC    FAR
                   412           ?SYMB   '',00H,95,0
003E 2802          413           SUB     R0,#02h
               R   414           ?SYMB   '',$,96,2
                   415   ; Locals:
                   416   ;     uwPASSWORD = offset 0
                   417   ; 
                   418   ; Statics:
                   419   ; 
                   420   ; CSEs:
                   421   ; 
                   422   ; main.c    221   uword uwPASSWORD;
                   423           ?SYMB   'uwPASSWORD',1,98,280
               R   424           ?SYMB   '-2',$,101,1
                   425   ; main.c    222 
                   426   ; main.c    223     SCU_SLC = 0xAAAA;                   // command 0
                   427           ?LINE   223
0040 E6FCAAAA      428           MOV     R12,#0AAAAh
0044 F6FCC0F0      429           MOV     0F0C0h,R12
                   430   ; main.c    224     SCU_SLC = 0x5554;                   // command 1
                   431           ?LINE   224
0048 E6FC5455      432           MOV     R12,#05554h
004C F6FCC0F0      433           MOV     0F0C0h,R12
                   434   ; main.c    225 
                   435   ; main.c    226     uwPASSWORD = SCU_SLS & 0x00FF;
                   436           ?LINE   226
0050 F2FCC2F0      437           MOV     R12,0F0C2h
0054 66FCFF00      438           AND     R12,#0FFh
0058 B8C0          439           MOV     [R0],R12
                   440   ; main.c    227     uwPASSWORD = (~uwPASSWORD) & 0x00FF;
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:   9
main

 LOC CODE        LINE   SOURCELINE

                   441           ?LINE   227
005A A8C0          442           MOV     R12,[R0]
005C 91C0          443           CPL     R12
005E 66FCFF00      444           AND     R12,#0FFh
0062 B8C0          445           MOV     [R0],R12
                   446   ; main.c    228 
                   447   ; main.c    229     SCU_SLC = 0x9600 | uwPASSWORD;      // command 2
                   448           ?LINE   229
0064 A8C0          449           MOV     R12,[R0]
0066 76FC0096      450           OR      R12,#09600h
006A F6FCC0F0      451           MOV     0F0C0h,R12
                   452   ; main.c    230     SCU_SLC = 0x0000;                   // command 3
                   453           ?LINE   230
006E E00C          454           MOV     R12,#00h
0070 F6FCC0F0      455           MOV     0F0C0h,R12
                   456   ; main.c    231 
                   457   ; main.c    232 } //  End of function MAIN_vUnlockProtecReg
               R   458           ?SYMB   '',$,102,1
                   459           ?LINE   232
0074 0802          460           ADD     R0,#02h
               R   461           ?SYMB   '',$,96,0
0076 DB00          462           RETS
                   463   _MAIN_vUnlockProtecReg  ENDP
               R   464           ?SYMB   '',$,17,232
                   465   ; main.c    233 
                   466   ; main.c    234 
                   467   ; main.c    235 //****************************************************************************
                   468   ; main.c    236 // @Function      void MAIN_vLockProtecReg(void) 
                   469   ; main.c    237 //
                   470   ; main.c    238 //----------------------------------------------------------------------------
                   471   ; main.c    239 // @Description   This function makes it possible to lock one protected 
                   472   ; main.c    240 //                register.
                   473   ; main.c    241 //
                   474   ; main.c    242 //----------------------------------------------------------------------------
                   475   ; main.c    243 // @Returnvalue   None
                   476   ; main.c    244 //
                   477   ; main.c    245 //----------------------------------------------------------------------------
                   478   ; main.c    246 // @Parameters    None
                   479   ; main.c    247 //
                   480   ; main.c    248 //----------------------------------------------------------------------------
                   481   ; main.c    249 // @Date          29.09.2021
                   482   ; main.c    250 //
                   483   ; main.c    251 //****************************************************************************
                   484   ; main.c    252 
                   485   ; main.c    253 // USER CODE BEGIN (LockProtecReg,1)
                   486   ; main.c    254 
                   487   ; main.c    255 // USER CODE END
                   488   ; main.c    256 
                   489   ; main.c    257 void MAIN_vLockProtecReg(void)
                   490   ; main.c    258 {
                   491           ?LINE   258
                   492           PUBLIC  _MAIN_vLockProtecReg
               R   493           ?SYMB   'MAIN_vLockProtecReg',_MAIN_vLockProtecReg,37,1
                   494           ?SYMB   '',258,8,34
                   495   _MAIN_vLockProtecReg    PROC    FAR
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:  10
main

 LOC CODE        LINE   SOURCELINE

                   496           ?SYMB   '',00H,95,0
0078 2802          497           SUB     R0,#02h
               R   498           ?SYMB   '',$,96,2
                   499   ; Locals:
                   500   ;     uwPASSWORD = offset 0
                   501   ; 
                   502   ; Statics:
                   503   ; 
                   504   ; CSEs:
                   505   ; 
                   506   ; main.c    259   uword uwPASSWORD;
                   507           ?SYMB   'uwPASSWORD',1,98,280
               R   508           ?SYMB   '-2',$,101,1
                   509   ; main.c    260 
                   510   ; main.c    261     SCU_SLC = 0xAAAA;                   // command 0
                   511           ?LINE   261
007A E6FCAAAA      512           MOV     R12,#0AAAAh
007E F6FCC0F0      513           MOV     0F0C0h,R12
                   514   ; main.c    262     SCU_SLC = 0x5554;                   // command 1
                   515           ?LINE   262
0082 E6FC5455      516           MOV     R12,#05554h
0086 F6FCC0F0      517           MOV     0F0C0h,R12
                   518   ; main.c    263 
                   519   ; main.c    264     uwPASSWORD = SCU_SLS & 0x00FF;
                   520           ?LINE   264
008A F2FCC2F0      521           MOV     R12,0F0C2h
008E 66FCFF00      522           AND     R12,#0FFh
0092 B8C0          523           MOV     [R0],R12
                   524   ; main.c    265     uwPASSWORD = (~uwPASSWORD) & 0x00FF;
                   525           ?LINE   265
0094 A8C0          526           MOV     R12,[R0]
0096 91C0          527           CPL     R12
0098 66FCFF00      528           AND     R12,#0FFh
009C B8C0          529           MOV     [R0],R12
                   530   ; main.c    266 
                   531   ; main.c    267     SCU_SLC = 0x9600 | uwPASSWORD;      // command 2
                   532           ?LINE   267
009E A8C0          533           MOV     R12,[R0]
00A0 76FC0096      534           OR      R12,#09600h
00A4 F6FCC0F0      535           MOV     0F0C0h,R12
                   536   ; main.c    268     SCU_SLC = 0x1800;                   // command 3; new PASSWOR is 0x00
                   537           ?LINE   268
00A8 E6FC0018      538           MOV     R12,#01800h
00AC F6FCC0F0      539           MOV     0F0C0h,R12
                   540   ; main.c    269 
                   541   ; main.c    270     uwPASSWORD = SCU_SLS & 0x00FF;
                   542           ?LINE   270
00B0 F2FCC2F0      543           MOV     R12,0F0C2h
00B4 66FCFF00      544           AND     R12,#0FFh
00B8 B8C0          545           MOV     [R0],R12
                   546   ; main.c    271     uwPASSWORD = (~uwPASSWORD) & 0x00FF;
                   547           ?LINE   271
00BA A8C0          548           MOV     R12,[R0]
00BC 91C0          549           CPL     R12
00BE 66FCFF00      550           AND     R12,#0FFh
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:  11
main

 LOC CODE        LINE   SOURCELINE

00C2 B8C0          551           MOV     [R0],R12
                   552   ; main.c    272     SCU_SLC = 0x8E00 | uwPASSWORD;      // command 4
                   553           ?LINE   272
00C4 A8C0          554           MOV     R12,[R0]
00C6 76FC008E      555           OR      R12,#08E00h
00CA F6FCC0F0      556           MOV     0F0C0h,R12
                   557   ; main.c    273 
                   558   ; main.c    274 } //  End of function MAIN_vLockProtecReg
               R   559           ?SYMB   '',$,102,1
                   560           ?LINE   274
00CE 0802          561           ADD     R0,#02h
               R   562           ?SYMB   '',$,96,0
00D0 DB00          563           RETS
                   564   _MAIN_vLockProtecReg    ENDP
               R   565           ?SYMB   '',$,17,274
                   566   ; main.c    275 
                   567   ; main.c    276 
                   568   ; main.c    277 //****************************************************************************
                   569   ; main.c    278 // @Function      void MAIN_vChangeFreq(void) 
                   570   ; main.c    279 //
                   571   ; main.c    280 //----------------------------------------------------------------------------
                   572   ; main.c    281 // @Description   This function is used to select the external crystal and
                   573   ; main.c    282 //                configure the system frequency to 80Mhz/66Mhz.
                   574   ; main.c    283 //
                   575   ; main.c    284 //----------------------------------------------------------------------------
                   576   ; main.c    285 // @Returnvalue   None
                   577   ; main.c    286 //
                   578   ; main.c    287 //----------------------------------------------------------------------------
                   579   ; main.c    288 // @Parameters    None
                   580   ; main.c    289 //
                   581   ; main.c    290 //----------------------------------------------------------------------------
                   582   ; main.c    291 // @Date          29.09.2021
                   583   ; main.c    292 //
                   584   ; main.c    293 //****************************************************************************
                   585   ; main.c    294 
                   586   ; main.c    295 // USER CODE BEGIN (ChangeFreq,1)
                   587   ; main.c    296 
                   588   ; main.c    297 // USER CODE END
                   589   ; main.c    298 
                   590   ; main.c    299 void MAIN_vChangeFreq(void)
                   591   ; main.c    300 {
                   592           ?LINE   300
                   593           PUBLIC  _MAIN_vChangeFreq
               R   594           ?SYMB   'MAIN_vChangeFreq',_MAIN_vChangeFreq,37,1
                   595           ?SYMB   '',300,8,34
                   596   _MAIN_vChangeFreq       PROC    FAR
                   597           ?SYMB   '',00H,95,0
                   598   ; Locals:
                   599   ; 
                   600   ; Statics:
                   601   ; 
                   602   ; CSEs:
                   603   ; 
                   604   ; main.c    301   SCS_SwitchToHighPrecBandgap();
                   605           ?LINE   301
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:  12
main

 LOC CODE        LINE   SOURCELINE

00D2 DA000000  R   606           CALLS   SEG _SCS_SwitchToHighPrecBandgap,_SCS_SwitchToHighPrecBandgap
                   607   ; main.c    302 
                   608   ; main.c    303   //For application and internal application resets, the complete PLL configura
                         tion could be avoided
                   609   ; main.c    304   //The entry from application resets and internal application reset is covered
                          in the following differentiation
                   610   ; main.c    305   //in int/ext clock in lock/unlocked state.
                   611   ; main.c    306 
                   612   ; main.c    307   if  ((SCU_PLLSTAT & 0x0004) == 0x0004)             // fR derived from Interna
                         l clock
                   613           ?LINE   307
00D6 F2FCBCF0      614           MOV     R12,0F0BCh
00DA 9AFC0720      615           JNB     R12.2,_7
                   616   ; main.c    308         {
                   617   ; main.c    309             //Normal startup state during boot and the clock
                   618   ; main.c    310             //has to be in the next step configured on the external crystal
                   619   ; main.c    311             //use XTAL/VCO, count XTAL clock
                   620   ; main.c    312 
                   621   ; main.c    313             SCS_StartXtalOsc(1);                     // Starts the crystal osci
                         llator
                   622           ?LINE   313
00DE E01C          623           MOV     R12,#01h
00E0 DA000000  R   624           CALLS   SEG _SCS_StartXtalOsc,_SCS_StartXtalOsc
                   625   ; main.c    314             SCS_SwitchSystemClock(1);                // System clock is increas
                         ed to target speed (80/66 MHz)
                   626           ?LINE   314
00E4 E01C          627           MOV     R12,#01h
00E6 DA000000  R   628           CALLS   SEG _SCS_SwitchSystemClock,_SCS_SwitchSystemClock
                   629   ; main.c    315 
                   630   ; main.c    316         }
                   631           ?LINE   316
00EA DB00          632           RETS
00EC               633   _7:
                   634   ; main.c    317 
                   635   ; main.c    318   else                                               // fR derived from externa
                         l crystal clock
                   636   ; main.c    319         {
                   637   ; main.c    320             if ((SCU_PLLSTAT & 0x1009) == 0x1009)    // fR derived from externa
                         l crystal clock + VCO is locked
                   638           ?LINE   320
00EC F2FCBCF0      639           MOV     R12,0F0BCh
00F0 66FC0910      640           AND     R12,#01009h
00F4 46FC0910      641           CMP     R12,#01009h
00F8 3D02          642           JMPR    cc_NE,_8
                   643   ; main.c    321             {
                   644   ; main.c    322                //usually after an application reset where clock need not be con
                         figured again.
                   645   ; main.c    323                //check K2/P/N values and decide whether these values have to be
                          adapted based on application needs.
                   646   ; main.c    324                NOP();
                   647           ?LINE   324
00FA CC00          648           NOP
                   649   ; main.c    325                //usually the PLL losss of Lock TRAP schould be enabled here.
                   650   ; main.c    326             }
                   651           ?LINE   326
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:  13
main

 LOC CODE        LINE   SOURCELINE

00FC 0D01          652           JMPR    cc_UC,_9
00FE               653   _8:
                   654   ; main.c    327             else                                     //fR derived from external
                          crystal clock + VCO is not locked
                   655   ; main.c    328 
                   656   ; main.c    329             {
                   657   ; main.c    330                //estimate the K1 value and the current frequency
                   658   ; main.c    331                //reduce K2/P/N values in steps so that the frequency
                   659   ; main.c    332                //jumps is limited to 20MHz or factor of 5 whichever is minimum
                   660   ; main.c    333                NOP();
                   661           ?LINE   333
00FE CC00          662           NOP
                   663   ; main.c    334             }
                   664           ?LINE   334
0100               665   _9:
                   666   ; main.c    335 
                   667   ; main.c    336 
                   668   ; main.c    337         }
                   669           ?LINE   337
0100               670   _10:
                   671   ; main.c    338 
                   672   ; main.c    339 } //  End of function MAIN_vChangeFreq
                   673           ?LINE   339
0100 DB00          674           RETS
                   675   _MAIN_vChangeFreq       ENDP
               R   676           ?SYMB   '',$,17,339
                   677   ; main.c    340 
                   678   ; main.c    341 
                   679   ; main.c    342 //****************************************************************************
                   680   ; main.c    343 // @Function      void main(void) 
                   681   ; main.c    344 //
                   682   ; main.c    345 //----------------------------------------------------------------------------
                   683   ; main.c    346 // @Description   This is the main function.
                   684   ; main.c    347 //
                   685   ; main.c    348 //----------------------------------------------------------------------------
                   686   ; main.c    349 // @Returnvalue   None
                   687   ; main.c    350 //
                   688   ; main.c    351 //----------------------------------------------------------------------------
                   689   ; main.c    352 // @Parameters    None
                   690   ; main.c    353 //
                   691   ; main.c    354 //----------------------------------------------------------------------------
                   692   ; main.c    355 // @Date          29.09.2021
                   693   ; main.c    356 //
                   694   ; main.c    357 //****************************************************************************
                   695   ; main.c    358 
                   696   ; main.c    359 // USER CODE BEGIN (Main,1)
                   697   ; main.c    360 
                   698   ; main.c    361 // USER CODE END
                   699   ; main.c    362 
                   700   ; main.c    363 void main(void)
                   701   ; main.c    364 {
                   702           ?LINE   364
                   703           PUBLIC  _main
               R   704           ?SYMB   'main',_main,37,1
                   705           ?SYMB   '',364,8,34
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:  14
main

 LOC CODE        LINE   SOURCELINE

                   706   _main   PROC    FAR
                   707           ?SYMB   '',00H,95,0
0102 2804          708           SUB     R0,#04h
               R   709           ?SYMB   '',$,96,4
                   710   ; Locals:
                   711   ;     raw = offset 0
                   712   ; 
                   713   ; Statics:
                   714   ; 
                   715   ; CSEs:
                   716   ; 
                   717   ; main.c    365   // USER CODE BEGIN (Main,2)
                   718   ; main.c    366 
                   719   ; main.c    367   // USER CODE END
                   720   ; main.c    368 
                   721   ; main.c    369   MAIN_vInit();
                   722           ?LINE   369
0104 DA000000  R   723           CALLS   SEG _MAIN_vInit,_MAIN_vInit
                   724   ; main.c    370 
                   725   ; main.c    371   // USER CODE BEGIN (Main,3)
                   726   ; main.c    372         generateTable();
                   727           ?LINE   372
0108 DA007E03  R   728           CALLS   SEG _generateTable,_generateTable
                   729   ; main.c    373         ADC0_vInit();
                   730           ?LINE   373
010C DA000000  R   731           CALLS   SEG _ADC0_vInit,_ADC0_vInit
                   732   ; main.c    374         ADC0_vStartSeq0ReqChNum(0,0,1,6);
                   733           ?LINE   374
0110 E00C          734           MOV     R12,#00h
0112 E00D          735           MOV     R13,#00h
0114 E01E          736           MOV     R14,#01h
0116 E06F          737           MOV     R15,#06h
0118 DA000000  R   738           CALLS   SEG _ADC0_vStartSeq0ReqChNum,_ADC0_vStartSeq0ReqChNum
                   739   ; main.c    375         CCU63_vStartTmr(CCU63_TIMER_12);
                   740           ?LINE   375
011C E6FCA6EB      741           MOV     R12,#0EBA6h
0120 A8DC          742           MOV     R13,[R12]
0122 1FFD          743           BSET    R13.1
0124 B8DC          744           MOV     [R12],R13
                   745   ; main.c    376         CCU62_vStartTmr(CCU62_TIMER_12);
                   746           ?LINE   376
0126 E6FC26EB      747           MOV     R12,#0EB26h
012A A8DC          748           MOV     R13,[R12]
012C 1FFD          749           BSET    R13.1
012E B8DC          750           MOV     [R12],R13
                   751   ; main.c    377         GPT2_vStartTmr(GPT2_TIMER_6);
                   752           ?LINE   377
0130 E6FC48FF      753           MOV     R12,#0FF48h
0134 A8DC          754           MOV     R13,[R12]
0136 0AFD4040      755           BFLDL   R13,#040h,#040h
013A B8DC          756           MOV     [R12],R13
                   757   ; main.c    378     // USER CODE END
                   758   ; main.c    379 
                   759   ; main.c    380   while(1)
                   760           ?LINE   380
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:  15
main

 LOC CODE        LINE   SOURCELINE

013C EA007603  R   761           JMPA+   cc_UC,_48
0140               762   _30:
                   763   ; main.c    381   {
                   764   ; main.c    382 
                   765   ; main.c    383    // USER CODE BEGIN (Main,4)
                   766   ; main.c    384    
                   767   ; main.c    385    // one rampIndex step = 8ms, 250 steps = 2s
                   768   ; main.c    386    if (rampIndex > 1750){
                   769           ?LINE   386
0140 F2FC0000  R   770           MOV     R12,_rampIndex
0144 46FCD606      771           CMP     R12,#06D6h
0148 FD2A          772           JMPR    cc_ULE,_31
                   773   ; main.c    387                 unsigned long raw;
               R   774           ?SYMB   '',$,9,387
                   775           ?SYMB   'raw',1,98,7
               R   776           ?SYMB   '-4',$,101,1
                   777   ; main.c    388                 raw = ADC0_uwGetResultData(RESULT_REG_0);
                   778           ?LINE   388
014A F2FCB0E0      779           MOV     R12,0E0B0h
014E 9AFC07C0      780           JNB     R12.12,_49
0152 0D00          781           JMPR    cc_UC,_50
0154               782   _50:
0154 F2FC50E0      783           MOV     R12,0E050h
0158 66FCFF3F      784           AND     R12,#03FFFh
015C 7C2C          785           SHR     R12,#02h
015E 0D01          786           JMPR    cc_UC,_51
0160               787   _49:
0160 E00C          788           MOV     R12,#00h
0162               789   _51:
0162 E00D          790           MOV     R13,#00h
0164 B8C0          791           MOV     [R0],R12
0166 C4D00200      792           MOV     [R0+#02H],R13
                   793   ; main.c    389                 frequency = ((50*raw)/4096);
                   794           ?LINE   389
016A A840          795           MOV     R4,[R0]
016C D4500200      796           MOV     R5,[R0+#02H]
0170 E6FA3200      797           MOV     R10,#032h
0174 E00B          798           MOV     R11,#00h
0176 DA000000  R   799           CALLS   SEG __mul,__mul
017A F0C5          800           MOV     R12,R5
017C 7CC4          801           SHR     R4,#0Ch
017E 7CC5          802           SHR     R5,#0Ch
0180 5C4C          803           SHL     R12,#04h
0182 704C          804           OR      R4,R12
0184 F6F40000  R   805           MOV     _frequency,R4
                   806   ; main.c    390                 CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequency(fre
                         quency));
                   807           ?LINE   390
0188 F2FC0000  R   808           MOV     R12,_frequency
018C DA002E04  R   809           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
0190 F6F412EB      810           MOV     0EB12h,R4
                   811   ; main.c    391                 CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   812           ?LINE   391
0194 E6FC26EB      813           MOV     R12,#0EB26h
0198 A8DC          814           MOV     R13,[R12]
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:  16
main

 LOC CODE        LINE   SOURCELINE

019A 6FFD          815           BSET    R13.6
019C B8DC          816           MOV     [R12],R13
                   817   ; main.c    392         }
               R   818           ?SYMB   '',$,102,1
               R   819           ?SYMB   '',$,15,392
                   820           ?LINE   392
019E               821   _31:
                   822   ; main.c    393         if (rampIndex == 0){
                   823           ?LINE   393
019E F2FC0000  R   824           MOV     R12,_rampIndex
01A2 3D03          825           JMPR    cc_NZ,_32
                   826   ; main.c    394                 setPhaseChange(clockwise);
                   827           ?LINE   394
01A4 E00C          828           MOV     R12,#00h
01A6 DA007C04  R   829           CALLS   SEG _setPhaseChange,_setPhaseChange
                   830   ; main.c    395         }
                   831           ?LINE   395
01AA               832   _32:
                   833   ; main.c    396         // ramp up
                   834   ; main.c    397         if(rampIndex < 250){
                   835           ?LINE   397
01AA F2FC0000  R   836           MOV     R12,_rampIndex
01AE 46FCFA00      837           CMP     R12,#0FAh
01B2 9D19          838           JMPR    cc_UGE,_33
                   839   ; main.c    398                 frequency = (rampIndex/5);
                   840           ?LINE   398
01B4 F2FC0000  R   841           MOV     R12,_rampIndex
01B8 E05D          842           MOV     R13,#05h
01BA F6FC0EFE      843           MOV     MDL,R12
01BE 5BDD          844           DIVU    R13
01C0 F2FC0EFE      845           MOV     R12,MDL
01C4 F6FC0000  R   846           MOV     _frequency,R12
                   847   ; main.c    399                 CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequency(fre
                         quency));
                   848           ?LINE   399
01C8 F2FC0000  R   849           MOV     R12,_frequency
01CC DA002E04  R   850           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
01D0 F6F412EB      851           MOV     0EB12h,R4
                   852   ; main.c    400                 CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   853           ?LINE   400
01D4 E6FC26EB      854           MOV     R12,#0EB26h
01D8 A8DC          855           MOV     R13,[R12]
01DA 6FFD          856           BSET    R13.6
01DC B8DC          857           MOV     [R12],R13
                   858   ; main.c    401                 IO_vTogglePin(LED_DBG);
                   859           ?LINE   401
01DE E6FC0101      860           MOV     R12,#0101h
01E2 F6FCE0E9      861           MOV     0E9E0h,R12
                   862   ; main.c    402         } 
                   863           ?LINE   402
01E6               864   _33:
                   865   ; main.c    403         // hold 50 Hz clockwise
                   866   ; main.c    404         if(rampIndex < 500 && rampIndex > 250){
                   867           ?LINE   404
01E6 F2FC0000  R   868           MOV     R12,_rampIndex
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:  17
main

 LOC CODE        LINE   SOURCELINE

01EA 46FCF401      869           CMP     R12,#01F4h
01EE 9D14          870           JMPR    cc_UGE,_34
01F0 F2FC0000  R   871           MOV     R12,_rampIndex
01F4 46FCFA00      872           CMP     R12,#0FAh
01F8 FD0F          873           JMPR    cc_ULE,_35
                   874   ; main.c    405                 frequency = 50;
                   875           ?LINE   405
01FA E6FC3200      876           MOV     R12,#032h
01FE F6FC0000  R   877           MOV     _frequency,R12
                   878   ; main.c    406                 CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequency(fre
                         quency));
                   879           ?LINE   406
0202 F2FC0000  R   880           MOV     R12,_frequency
0206 DA002E04  R   881           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
020A F6F412EB      882           MOV     0EB12h,R4
                   883   ; main.c    407                 CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   884           ?LINE   407
020E E6FC26EB      885           MOV     R12,#0EB26h
0212 A8DC          886           MOV     R13,[R12]
0214 6FFD          887           BSET    R13.6
0216 B8DC          888           MOV     [R12],R13
                   889   ; main.c    408         }
                   890           ?LINE   408
0218               891   _34:
0218               892   _35:
                   893   ; main.c    409         // ramp down
                   894   ; main.c    410         if(rampIndex < 750 && rampIndex > 500){
                   895           ?LINE   410
0218 F2FC0000  R   896           MOV     R12,_rampIndex
021C 46FCEE02      897           CMP     R12,#02EEh
0220 9D1C          898           JMPR    cc_UGE,_36
0222 F2FC0000  R   899           MOV     R12,_rampIndex
0226 46FCF401      900           CMP     R12,#01F4h
022A FD17          901           JMPR    cc_ULE,_37
                   902   ; main.c    411                 frequency = (750 - rampIndex)/5;
                   903           ?LINE   411
022C E6FCEE02      904           MOV     R12,#02EEh
0230 22FC0000  R   905           SUB     R12,_rampIndex
0234 E05D          906           MOV     R13,#05h
0236 F6FC0EFE      907           MOV     MDL,R12
023A 5BDD          908           DIVU    R13
023C F2FC0EFE      909           MOV     R12,MDL
0240 F6FC0000  R   910           MOV     _frequency,R12
                   911   ; main.c    412                 CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequency(fre
                         quency));
                   912           ?LINE   412
0244 F2FC0000  R   913           MOV     R12,_frequency
0248 DA002E04  R   914           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
024C F6F412EB      915           MOV     0EB12h,R4
                   916   ; main.c    413                 CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   917           ?LINE   413
0250 E6FC26EB      918           MOV     R12,#0EB26h
0254 A8DC          919           MOV     R13,[R12]
0256 6FFD          920           BSET    R13.6
0258 B8DC          921           MOV     [R12],R13
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:  18
main

 LOC CODE        LINE   SOURCELINE

                   922   ; main.c    414         }
                   923           ?LINE   414
025A               924   _36:
025A               925   _37:
                   926   ; main.c    415         // phase change
                   927   ; main.c    416         if (rampIndex == 750){
                   928           ?LINE   416
025A F2FC0000  R   929           MOV     R12,_rampIndex
025E 46FCEE02      930           CMP     R12,#02EEh
0262 3D03          931           JMPR    cc_NE,_38
                   932   ; main.c    417                 setPhaseChange(counterclockwise);
                   933           ?LINE   417
0264 E01C          934           MOV     R12,#01h
0266 DA007C04  R   935           CALLS   SEG _setPhaseChange,_setPhaseChange
                   936   ; main.c    418         }
                   937           ?LINE   418
026A               938   _38:
                   939   ; main.c    419 
                   940   ; main.c    420         // reverse ramp up
                   941   ; main.c    421         if(rampIndex < 1000 && rampIndex > 750){
                   942           ?LINE   421
026A F2FC0000  R   943           MOV     R12,_rampIndex
026E 46FCE803      944           CMP     R12,#03E8h
0272 9D1C          945           JMPR    cc_UGE,_39
0274 F2FC0000  R   946           MOV     R12,_rampIndex
0278 46FCEE02      947           CMP     R12,#02EEh
027C FD17          948           JMPR    cc_ULE,_40
                   949   ; main.c    422                 frequency = (rampIndex-750)/5;
                   950           ?LINE   422
027E F2FC0000  R   951           MOV     R12,_rampIndex
0282 26FCEE02      952           SUB     R12,#02EEh
0286 E05D          953           MOV     R13,#05h
0288 F6FC0EFE      954           MOV     MDL,R12
028C 5BDD          955           DIVU    R13
028E F2FC0EFE      956           MOV     R12,MDL
0292 F6FC0000  R   957           MOV     _frequency,R12
                   958   ; main.c    423                 CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequency(fre
                         quency));
                   959           ?LINE   423
0296 F2FC0000  R   960           MOV     R12,_frequency
029A DA002E04  R   961           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
029E F6F412EB      962           MOV     0EB12h,R4
                   963   ; main.c    424                 CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   964           ?LINE   424
02A2 E6FC26EB      965           MOV     R12,#0EB26h
02A6 A8DC          966           MOV     R13,[R12]
02A8 6FFD          967           BSET    R13.6
02AA B8DC          968           MOV     [R12],R13
                   969   ; main.c    425         }
                   970           ?LINE   425
02AC               971   _39:
02AC               972   _40:
                   973   ; main.c    426         // hold 50 hz counterclockwise
                   974   ; main.c    427         if(rampIndex < 1250 && rampIndex > 1000){
                   975           ?LINE   427
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:  19
main

 LOC CODE        LINE   SOURCELINE

02AC F2FC0000  R   976           MOV     R12,_rampIndex
02B0 46FCE204      977           CMP     R12,#04E2h
02B4 9D14          978           JMPR    cc_UGE,_41
02B6 F2FC0000  R   979           MOV     R12,_rampIndex
02BA 46FCE803      980           CMP     R12,#03E8h
02BE FD0F          981           JMPR    cc_ULE,_42
                   982   ; main.c    428                 frequency = 50;
                   983           ?LINE   428
02C0 E6FC3200      984           MOV     R12,#032h
02C4 F6FC0000  R   985           MOV     _frequency,R12
                   986   ; main.c    429                 CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequency(fre
                         quency));
                   987           ?LINE   429
02C8 F2FC0000  R   988           MOV     R12,_frequency
02CC DA002E04  R   989           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
02D0 F6F412EB      990           MOV     0EB12h,R4
                   991   ; main.c    430                 CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   992           ?LINE   430
02D4 E6FC26EB      993           MOV     R12,#0EB26h
02D8 A8DC          994           MOV     R13,[R12]
02DA 6FFD          995           BSET    R13.6
02DC B8DC          996           MOV     [R12],R13
                   997   ; main.c    431         }
                   998           ?LINE   431
02DE               999   _41:
02DE              1000   _42:
                  1001   ; main.c    432         // reverse ramp down
                  1002   ; main.c    433         if(rampIndex < 1500 && rampIndex > 1250){
                  1003           ?LINE   433
02DE F2FC0000  R  1004           MOV     R12,_rampIndex
02E2 46FCDC05     1005           CMP     R12,#05DCh
02E6 9D1C         1006           JMPR    cc_UGE,_43
02E8 F2FC0000  R  1007           MOV     R12,_rampIndex
02EC 46FCE204     1008           CMP     R12,#04E2h
02F0 FD17         1009           JMPR    cc_ULE,_44
                  1010   ; main.c    434                 frequency = (1500 - rampIndex)/5;
                  1011           ?LINE   434
02F2 E6FCDC05     1012           MOV     R12,#05DCh
02F6 22FC0000  R  1013           SUB     R12,_rampIndex
02FA E05D         1014           MOV     R13,#05h
02FC F6FC0EFE     1015           MOV     MDL,R12
0300 5BDD         1016           DIVU    R13
0302 F2FC0EFE     1017           MOV     R12,MDL
0306 F6FC0000  R  1018           MOV     _frequency,R12
                  1019   ; main.c    435                 CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequency(fre
                         quency));
                  1020           ?LINE   435
030A F2FC0000  R  1021           MOV     R12,_frequency
030E DA002E04  R  1022           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
0312 F6F412EB     1023           MOV     0EB12h,R4
                  1024   ; main.c    436                 CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                  1025           ?LINE   436
0316 E6FC26EB     1026           MOV     R12,#0EB26h
031A A8DC         1027           MOV     R13,[R12]
031C 6FFD         1028           BSET    R13.6
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:  20
main

 LOC CODE        LINE   SOURCELINE

031E B8DC         1029           MOV     [R12],R13
                  1030   ; main.c    437         }
                  1031           ?LINE   437
0320              1032   _43:
0320              1033   _44:
                  1034   ; main.c    438         // DC break
                  1035   ; main.c    439         if(rampIndex < 1750 && rampIndex > 1500){
                  1036           ?LINE   439
0320 F2FC0000  R  1037           MOV     R12,_rampIndex
0324 46FCD606     1038           CMP     R12,#06D6h
0328 9D14         1039           JMPR    cc_UGE,_45
032A F2FC0000  R  1040           MOV     R12,_rampIndex
032E 46FCDC05     1041           CMP     R12,#05DCh
0332 FD0F         1042           JMPR    cc_ULE,_46
                  1043   ; main.c    440                 frequency = 50;
                  1044           ?LINE   440
0334 E6FC3200     1045           MOV     R12,#032h
0338 F6FC0000  R  1046           MOV     _frequency,R12
                  1047   ; main.c    441                 CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequency(fre
                         quency));
                  1048           ?LINE   441
033C F2FC0000  R  1049           MOV     R12,_frequency
0340 DA002E04  R  1050           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
0344 F6F412EB     1051           MOV     0EB12h,R4
                  1052   ; main.c    442                 CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                  1053           ?LINE   442
0348 E6FC26EB     1054           MOV     R12,#0EB26h
034C A8DC         1055           MOV     R13,[R12]
034E 6FFD         1056           BSET    R13.6
0350 B8DC         1057           MOV     [R12],R13
                  1058   ; main.c    443         }
                  1059           ?LINE   443
0352              1060   _45:
0352              1061   _46:
                  1062   ; main.c    444         // set 0 Hz for transition to poti control
                  1063   ; main.c    445         if(rampIndex == 1750){
                  1064           ?LINE   445
0352 F2FC0000  R  1065           MOV     R12,_rampIndex
0356 46FCD606     1066           CMP     R12,#06D6h
035A 3D0D         1067           JMPR    cc_NE,_47
                  1068   ; main.c    446                 frequency = 0;
                  1069           ?LINE   446
035C F68E0000  R  1070           MOV     _frequency,ZEROS
                  1071   ; main.c    447                 CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequency(fre
                         quency));
                  1072           ?LINE   447
0360 F2FC0000  R  1073           MOV     R12,_frequency
0364 DA002E04  R  1074           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
0368 F6F412EB     1075           MOV     0EB12h,R4
                  1076   ; main.c    448                 CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                  1077           ?LINE   448
036C E6FC26EB     1078           MOV     R12,#0EB26h
0370 A8DC         1079           MOV     R13,[R12]
0372 6FFD         1080           BSET    R13.6
0374 B8DC         1081           MOV     [R12],R13
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:  21
main

 LOC CODE        LINE   SOURCELINE

                  1082   ; main.c    449         }
                  1083           ?LINE   449
0376              1084   _47:
                  1085           ?LINE   380
0376              1086   _48:
0376 EA004001  R  1087           JMPA+   cc_UC,_30
                  1088   ; main.c    450 
                  1089   ; main.c    451    // USER CODE END
                  1090   ; main.c    452 
                  1091   ; main.c    453   }
                  1092   ; main.c    454 
                  1093   ; main.c    455 } //  End of function main
                  1094           ?LINE   455
037A 0804         1095           ADD     R0,#04h
               R  1096           ?SYMB   '',$,96,0
037C DB00         1097           RETS
                  1098   _main   ENDP
               R  1099           ?SYMB   '',$,17,455
                  1100   ; main.c    456 
                  1101   ; main.c    457 
                  1102   ; main.c    458 
                  1103   ; main.c    459 // USER CODE BEGIN (MAIN_General,10)
                  1104   ; main.c    460 void generateTable(){
                  1105           ?LINE   460
                  1106           PUBLIC  _generateTable
               R  1107           ?SYMB   'generateTable',_generateTable,37,1
                  1108           ?SYMB   '',460,8,34
                  1109   _generateTable  PROC    FAR
                  1110           ?SYMB   '',00H,95,0
037E 26F00A00     1111           SUB     R0,#0Ah
               R  1112           ?SYMB   '',$,96,10
                  1113   ; Locals:
                  1114   ;     i = offset 0
                  1115   ;     stepSize = offset 2
                  1116   ; 
                  1117   ; Statics:
                  1118   ; 
                  1119   ; CSEs:
                  1120   ; 
                  1121   ; main.c    461         double stepSize = (2*pi)/(ARRAY_SIZE);
                  1122           ?SYMB   'stepSize',2,98,11
               R  1123           ?SYMB   '-8',$,101,2
                  1124           ?LINE   461
0382 F2F40000  R  1125           MOV     R4,_pi
0386 F2F50000  R  1126           MOV     R5,(_pi+2)
038A E6FA0040     1127           MOV     R10,#04000h
038E E00B         1128           MOV     R11,#00h
0390 DA000000  R  1129           CALLS   SEG __mlf4r,__mlf4r
0394 E6FA9644     1130           MOV     R10,#04496h
0398 E00B         1131           MOV     R11,#00h
039A DA000000  R  1132           CALLS   SEG __dvf4r,__dvf4r
039E DA000000  R  1133           CALLS   SEG __cff48r,__cff48r
               R  1134           ?SYMB   '',$,96,18
03A2 F040         1135           MOV     R4,R0
03A4 06F40A00     1136           ADD     R4,#0Ah
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:  22
main

 LOC CODE        LINE   SOURCELINE

03A8 DA000000  R  1137           CALLS   SEG __store8n,__store8n
03AC 06F00800     1138           ADD     R0,#08h
               R  1139           ?SYMB   '',$,96,10
                  1140   ; main.c    462         int i;
                  1141           ?SYMB   'i',1,98,16
               R  1142           ?SYMB   '-a',$,101,1
                  1143   ; main.c    463         for (i = 0; i < ARRAY_SIZE; i++){ 
                  1144           ?LINE   463
03B0 E00C         1145           MOV     R12,#00h
03B2 B8C0         1146           MOV     [R0],R12
03B4 0D35         1147           JMPR    cc_UC,_57
03B6              1148   _56:
                  1149   ; main.c    464                 table[i] = (unsigned int)((double)((CCU63_T12PR - 140)/2)*sin(s
                         tepSize * i) + (CCU63_T12PR/2));
                  1150           ?LINE   464
03B6 26F00800     1151           SUB     R0,#08h
               R  1152           ?SYMB   '',$,96,18
03BA E0A4         1153           MOV     R4,#0Ah
03BC 0040         1154           ADD     R4,R0
03BE DA000000  R  1155           CALLS   SEG __load8n,__load8n
               R  1156           ?SYMB   '',$,96,26
03C2 D4B01000     1157           MOV     R11,[R0+#010H]
03C6 F04B         1158           MOV     R4,R11
03C8 F0CA         1159           MOV     R12,R10
03CA DA000000  R  1160           CALLS   SEG __cif28r,__cif28r
               R  1161           ?SYMB   '',$,96,34
03CE F0BA         1162           MOV     R11,R10
03D0 F0AC         1163           MOV     R10,R12
03D2 DA000000  R  1164           CALLS   SEG __mlf8r,__mlf8r
03D6 06F00800     1165           ADD     R0,#08h
               R  1166           ?SYMB   '',$,96,26
03DA DA000000  R  1167           CALLS   SEG _sin,_sin
03DE 06F00800     1168           ADD     R0,#08h
               R  1169           ?SYMB   '',$,96,18
03E2 F0B4         1170           MOV     R11,R4
03E4 F2FA92EB     1171           MOV     R10,0EB92h
03E8 26FA8C00     1172           SUB     R10,#08Ch
03EC 7C1A         1173           SHR     R10,#01h
03EE F04A         1174           MOV     R4,R10
03F0 DA000000  R  1175           CALLS   SEG __cuf28r,__cuf28r
               R  1176           ?SYMB   '',$,96,26
03F4 DA000000  R  1177           CALLS   SEG __mlf8r,__mlf8r
03F8 F0BA         1178           MOV     R11,R10
03FA F2FA92EB     1179           MOV     R10,0EB92h
03FE 7C1A         1180           SHR     R10,#01h
0400 F04A         1181           MOV     R4,R10
0402 DA000000  R  1182           CALLS   SEG __cuf28r,__cuf28r
               R  1183           ?SYMB   '',$,96,34
0406 DA000000  R  1184           CALLS   SEG __adf8r,__adf8r
040A DA000000  R  1185           CALLS   SEG __cfu82r,__cfu82r
040E 06F01800     1186           ADD     R0,#018h
               R  1187           ?SYMB   '',$,96,10
0412 A8C0         1188           MOV     R12,[R0]
0414 5C1C         1189           SHL     R12,#01h
0416 C44C0000  R  1190           MOV     [R12+#_table],R4
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:  23
main

 LOC CODE        LINE   SOURCELINE

                  1191           ?LINE   463
041A A8C0         1192           MOV     R12,[R0]
041C 08C1         1193           ADD     R12,#01h
041E B8C0         1194           MOV     [R0],R12
0420              1195   _57:
0420 A8C0         1196           MOV     R12,[R0]
0422 46FCB004     1197           CMP     R12,#04B0h
0426 8DC7         1198           JMPR    cc_ULT,_56
                  1199   ; main.c    465         }
                  1200   ; main.c    466 }
               R  1201           ?SYMB   '',$,102,1
               R  1202           ?SYMB   '',$,102,2
                  1203           ?LINE   466
0428 06F00A00     1204           ADD     R0,#0Ah
               R  1205           ?SYMB   '',$,96,0
042C DB00         1206           RETS
                  1207   _generateTable  ENDP
               R  1208           ?SYMB   '',$,17,466
                  1209   ; main.c    467 
                  1210   ; main.c    468 unsigned int calculateMotorFrequency (int _frequency){
                  1211           ?LINE   468
                  1212           PUBLIC  _calculateMotorFrequency
               R  1213           ?SYMB   'calculateMotorFrequency',_calculateMotorFrequency,37,18
                  1214           ?SYMB   '',468,8,34
                  1215   _calculateMotorFrequency        PROC    FAR
                  1216           ?SYMB   '',00H,95,0
042E 88C0         1217           MOV     [-R0],R12
               R  1218           ?SYMB   '',$,96,2
                  1219   ; Locals:
                  1220   ;     _frequency = offset 0
                  1221   ; 
                  1222   ; Statics:
                  1223   ; 
                  1224   ; CSEs:
                  1225   ; 
                  1226           ?SYMB   '_frequency',1,99,16
               R  1227           ?SYMB   '-2',$,101,1
                  1228   ; main.c    469         if (_frequency < 2){
                  1229           ?LINE   469
0430 A8C0         1230           MOV     R12,[R0]
0432 48C2         1231           CMP     R12,#02h
0434 DD06         1232           JMPR    cc_SGE,_62
                  1233   ; main.c    470                 frequency = 1;
                  1234           ?LINE   470
0436 E01C         1235           MOV     R12,#01h
0438 F6FC0000  R  1236           MOV     _frequency,R12
                  1237   ; main.c    471                 return (0xD903);
                  1238           ?LINE   471
043C E6F403D9     1239           MOV     R4,#0D903h
0440 0D1B         1240           JMPR    cc_UC,_63
                  1241   ; main.c    472         }
                  1242           ?LINE   472
0442              1243   _62:
                  1244   ; main.c    473         else {
                  1245   ; main.c    474                 return (1/(_frequency * ARRAY_SIZE*0.000000015));
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:  24
main

 LOC CODE        LINE   SOURCELINE

                  1246           ?LINE   474
0442 A8C0         1247           MOV     R12,[R0]
0444 E6FDB004     1248           MOV     R13,#04B0h
0448 1BCD         1249           MULU    R12,R13
044A F2FB0EFE     1250           MOV     R11,MDL
044E F04B         1251           MOV     R4,R11
0450 DA000000  R  1252           CALLS   SEG __cuf28r,__cuf28r
               R  1253           ?SYMB   '',$,96,10
0454 F0BA         1254           MOV     R11,R10
0456 E6F40000  R  1255           MOV     R4,#_58
045A DA000000  R  1256           CALLS   SEG __load8n,__load8n
               R  1257           ?SYMB   '',$,96,18
045E DA000000  R  1258           CALLS   SEG __mlf8r,__mlf8r
0462 F0BA         1259           MOV     R11,R10
0464 E6F40000  R  1260           MOV     R4,#_59
0468 DA000000  R  1261           CALLS   SEG __load8n,__load8n
               R  1262           ?SYMB   '',$,96,26
046C DA000000  R  1263           CALLS   SEG __dvf8r,__dvf8r
0470 DA000000  R  1264           CALLS   SEG __cfu82r,__cfu82r
0474 06F01800     1265           ADD     R0,#018h
               R  1266           ?SYMB   '',$,96,2
                  1267   ; main.c    475         }
                  1268   ; main.c    476 }
                  1269           ?LINE   476
0478              1270   _63:
               R  1271           ?SYMB   '',$,102,1
0478 0802         1272           ADD     R0,#02h
               R  1273           ?SYMB   '',$,96,0
047A DB00         1274           RETS
                  1275   _calculateMotorFrequency        ENDP
               R  1276           ?SYMB   '',$,17,476
                  1277   ; main.c    477 
                  1278   ; main.c    478 void setPhaseChange(int dir){
                  1279           ?LINE   478
                  1280           PUBLIC  _setPhaseChange
               R  1281           ?SYMB   'setPhaseChange',_setPhaseChange,37,1
                  1282           ?SYMB   '',478,8,34
                  1283   _setPhaseChange PROC    FAR
                  1284           ?SYMB   '',00H,95,0
047C 88C0         1285           MOV     [-R0],R12
               R  1286           ?SYMB   '',$,96,2
                  1287   ; Locals:
                  1288   ;     dir = offset 0
                  1289   ; 
                  1290   ; Statics:
                  1291   ; 
                  1292   ; CSEs:
                  1293   ; 
                  1294           ?SYMB   'dir',1,99,16
               R  1295           ?SYMB   '-2',$,101,1
                  1296   ; main.c    479         if(dir == clockwise){
                  1297           ?LINE   479
047E A8C0         1298           MOV     R12,[R0]
0480 3D0A         1299           JMPR    cc_NZ,_66
                  1300   ; main.c    480                 OFFSET_L1 = 0;
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:  25
main

 LOC CODE        LINE   SOURCELINE

                  1301           ?LINE   480
0482 F68E0000  R  1302           MOV     _OFFSET_L1,ZEROS
                  1303   ; main.c    481                 OFFSET_L2 = (2*ARRAY_SIZE)/3;
                  1304           ?LINE   481
0486 E6FC2003     1305           MOV     R12,#0320h
048A F6FC0000  R  1306           MOV     _OFFSET_L2,R12
                  1307   ; main.c    482                 OFFSET_L3 = ARRAY_SIZE/3;
                  1308           ?LINE   482
048E E6FC9001     1309           MOV     R12,#0190h
0492 F6FC0000  R  1310           MOV     _OFFSET_L3,R12
                  1311   ; main.c    483         }
                  1312           ?LINE   483
0496              1313   _66:
                  1314   ; main.c    484         if(dir == counterclockwise){
                  1315           ?LINE   484
0496 A8C0         1316           MOV     R12,[R0]
0498 48C1         1317           CMP     R12,#01h
049A 3D0A         1318           JMPR    cc_NE,_67
                  1319   ; main.c    485                 OFFSET_L1 = 0;
                  1320           ?LINE   485
049C F68E0000  R  1321           MOV     _OFFSET_L1,ZEROS
                  1322   ; main.c    486                 OFFSET_L2 = ARRAY_SIZE/3;
                  1323           ?LINE   486
04A0 E6FC9001     1324           MOV     R12,#0190h
04A4 F6FC0000  R  1325           MOV     _OFFSET_L2,R12
                  1326   ; main.c    487                 OFFSET_L3 = (2*ARRAY_SIZE)/3;
                  1327           ?LINE   487
04A8 E6FC2003     1328           MOV     R12,#0320h
04AC F6FC0000  R  1329           MOV     _OFFSET_L3,R12
                  1330   ; main.c    488         }  
                  1331           ?LINE   488
04B0              1332   _67:
                  1333   ; main.c    489 }
               R  1334           ?SYMB   '',$,102,1
                  1335           ?LINE   489
04B0 0802         1336           ADD     R0,#02h
               R  1337           ?SYMB   '',$,96,0
04B2 DB00         1338           RETS
                  1339   _setPhaseChange ENDP
               R  1340           ?SYMB   '',$,17,489
                  1341   ; main.c    490 
                  1342   ; main.c    491 
                  1343   ; main.c    492 // USER CODE END
                  1344   ; main.c    493 
                  1345   MAIN_4_PR       ENDS
                  1346   
                  1347   MAIN_5_NB       SECTION LDAT WORD PUBLIC 'CNEAR'
0000              1348   MAIN_5_NB_ENTRY LABEL   BYTE
0000              1349   _table  LABEL   WORD
0000              1350           DS      2400
                  1351           PUBLIC  _table
                  1352           ?SYMB   '',01200012H,5,287
                  1353           ?SYMB   '',16,47,288
                  1354           ?SYMB   '',0,30,0
                  1355           ?SYMB   '',1199,49,0
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:  26
main

 LOC CODE        LINE   SOURCELINE

               R  1356           ?SYMB   'table',_table,22,287
0960              1357   _rpm    LABEL   WORD
0960              1358           DS      4
                  1359           PUBLIC  _rpm
               R  1360           ?SYMB   'rpm',_rpm,22,10
0964              1361   _velocity       LABEL   WORD
0964              1362           DS      4
                  1363           PUBLIC  _velocity
               R  1364           ?SYMB   'velocity',_velocity,22,10
0968              1365   _rampIndex      LABEL   WORD
0968              1366           DS      2
                  1367           PUBLIC  _rampIndex
               R  1368           ?SYMB   'rampIndex',_rampIndex,22,18
096A              1369   _index  LABEL   WORD
096A              1370           DS      2
                  1371           PUBLIC  _index
               R  1372           ?SYMB   'index',_index,22,18
096C              1373   _OFFSET_L1      LABEL   WORD
096C              1374           DS      2
                  1375           PUBLIC  _OFFSET_L1
               R  1376           ?SYMB   'OFFSET_L1',_OFFSET_L1,22,18
096E              1377   _OFFSET_L3      LABEL   WORD
096E              1378           DS      2
                  1379           PUBLIC  _OFFSET_L3
               R  1380           ?SYMB   'OFFSET_L3',_OFFSET_L3,22,18
0970              1381   _OFFSET_L2      LABEL   WORD
0970              1382           DS      2
                  1383           PUBLIC  _OFFSET_L2
               R  1384           ?SYMB   'OFFSET_L2',_OFFSET_L2,22,18
                  1385   MAIN_5_NB       ENDS
                  1386   
                  1387   MAIN_6_CO       SECTION LDAT WORD PUBLIC 'CROM'
0000              1388   _58     LABEL   WORD
0000 503E2B1B     1389           DW      03E50h,01B2Bh,029A4h,0692Bh
0004 A4292B69    
0008              1390   _59     LABEL   WORD
0008 F03F0000     1391           DW      03FF0h,00h,00h,00h
000C 00000000    
                  1392   MAIN_6_CO       ENDS
                  1393   
                  1394   C166_US SECTION LDAT WORD GLBUSRSTACK 'CUSTACK'
0000              1395           DS      70
                  1396   C166_US ENDS
                  1397   
                  1398   C166_INIT       SECTION PDAT WORD GLOBAL 'CINITROM'
0000 0600         1399           DW      06h
0002 00000000  R  1400           DPPTR   MAIN_ID_NB_ENTRY,MAIN_IR_NB_ENTRY
0006 00000000    
000A 0600         1401           DW      06h
                  1402   C166_INIT       ENDS
                  1403   
                  1404   C166_BSS        SECTION PDAT WORD GLOBAL 'CINITROM'
0000 05000000  R  1405           DW      05h,MAIN_5_NB_ENTRY,0972h
0004 7209        
                  1406   C166_BSS        ENDS
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 29 2021  Time: 09:41:16  Page:  27
main

 LOC CODE        LINE   SOURCELINE

                  1407   
                  1408   $FLOAT(ANSI)
                  1409           EXTERN  _ADC0_vStartSeq0ReqChNum:FAR
                  1410           EXTERN  _CCU62_vInit:FAR
                  1411           EXTERN  _CCU63_vInit:FAR
                  1412           EXTERN  _sin:FAR
                  1413           EXTERN  _SCS_SwitchToHighPrecBandgap:FAR
                  1414           EXTERN  _SCS_StartXtalOsc:FAR
                  1415           EXTERN  _IO_vInit:FAR
                  1416           EXTERN  _GPT2_vInit:FAR
                  1417           EXTERN  _GPT1_vInit:FAR
                  1418           EXTERN  _SCS_SwitchSystemClock:FAR
                  1419           EXTERN  _ADC0_vInit:FAR
                  1420           EXTERN  __mul:FAR
                  1421           EXTERN  __mlf4r:FAR
                  1422           EXTERN  __dvf4r:FAR
                  1423           EXTERN  __cff48r:FAR
                  1424           EXTERN  __store8n:FAR
                  1425           EXTERN  __load8n:FAR
                  1426           EXTERN  __cif28r:FAR
                  1427           EXTERN  __mlf8r:FAR
                  1428           EXTERN  __cuf28r:FAR
                  1429           EXTERN  __adf8r:FAR
                  1430           EXTERN  __cfu82r:FAR
                  1431           EXTERN  __dvf8r:FAR
                  1432           EXTERN  __CSTART:FAR
                  1433           REGDEF  R0-R15
                  1434           END

total errors: 0, warnings: 0

