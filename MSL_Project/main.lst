TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:19  Page:   1
main

 LOC CODE        LINE   SOURCELINE

                     1   ; TASKING C166/ST10 C compiler v8.7r1 Build 775
                     2   ; options: -e -Id:\programme\tasking\c166 v8.7r1\include -x2 -Bhoeufmknladij -OB
                     3   ;          -OE -zswitch_tabmem_default -zautobitastruct-4 -zautobita-0 -FSC -A1
                     4   ;          -zvolatile_union -O0 -g -newerr -s -i0 -Ms
                     5   $DEBUG
                     6   $NOLOCALS
                     7   $EXTEND2
                     8   $NOMOD166
                     9   $STDNAMES(regsuper10bo.def)
                    10   $EXTMAC
                    11   $CASE
                    12   $NOEXPANDREGBANK
                    13   $MODEL(SMALL)
                    14           NAME    MAIN_C
                    15           ?SYMB   'main.c',32,80,16
                    16           ?SYMB   '',1,82,0
                    17           ?SYMB   '80166',0,84,0
                    18           ?SYMB   '',0,81,0
                    19           ?SYMB   'void',00H,45,1
                    20           ?SYMB   'char',080000H,45,2
                    21           ?SYMB   'unsigned char',080000H,45,3
                    22           ?SYMB   'short',0100000H,45,4
                    23           ?SYMB   'unsigned short',0100000H,45,5
                    24           ?SYMB   'long',0200000H,45,6
                    25           ?SYMB   'unsigned long',0200000H,45,7
                    26           ?SYMB   'float',0200000H,45,10
                    27           ?SYMB   'double',0400000H,45,11
                    28           ?SYMB   'int',0100000H,45,16
                    29           ?SYMB   'unsigned int',0100000H,45,18
                    30           ?SYMB   'bit',010000H,7,256
                    31           ?SYMB   'main.c',0,29,1
                    32           ?SYMB   '',0,86,1
                    33   ; main.c      1 //****************************************************************************
                    34   ; main.c      2 // @Module        Project Settings
                    35   ; main.c      3 // @Filename      MAIN.C
                    36   ; main.c      4 // @Project       DAvE_config.dav
                    37   ; main.c      5 //----------------------------------------------------------------------------
                    38   ; main.c      6 // @Controller    Infineon XE167F-96F66
                    39   ; main.c      7 //
                    40   ; main.c      8 // @Compiler      Tasking Classic
                    41   ; main.c      9 //
                    42   ; main.c     10 // @Codegenerator 2.2
                    43   ; main.c     11 //
                    44   ; main.c     12 // @Description   This file contains the project initialization function.
                    45   ; main.c     13 //
                    46   ; main.c     14 //----------------------------------------------------------------------------
                    47   ; main.c     15 // @Date          28.09.2021 15:41:38
                    48   ; main.c     16 //
                    49   ; main.c     17 //****************************************************************************
                    50   ; main.c     18 
                    51   ; main.c     19 // USER CODE BEGIN (MAIN_General,1)
                    52   ; main.c     20 
                    53   ; main.c     21 // USER CODE END
                    54   ; main.c     22 
                    55   ; main.c     23 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:19  Page:   2
main

 LOC CODE        LINE   SOURCELINE

                    56   ; main.c     24 
                    57   ; main.c     25 //****************************************************************************
                    58   ; main.c     26 // @Project Includes
                    59   ; main.c     27 //****************************************************************************
                    60   ; main.c     28 
                    61   ; main.c     29 #include "MAIN.H"
                    62           ?SYMB   'MAIN.H',0,29,2
                    63           ?SYMB   '',0,86,2
                    64           ?SYMB   'XE16xREGS.H',0,29,3
                    65           ?SYMB   '',0,86,3
                    66           ?SYMB   '',0,86,2
                    67           ?SYMB   'SCS.H',0,29,3
                    68           ?SYMB   '',0,86,3
                    69           ?SYMB   'T$2',0,14,257
                    70           ?SYMB   'SCS_EXTCLK_F_SYS',0,33,257
                    71           ?SYMB   'SCS_EXTCLK_F_OUT',1,33,257
                    72           ?SYMB   'SCS_EXTCLK_F_PLL',2,33,257
                    73           ?SYMB   'SCS_EXTCLK_F_OSC',3,33,257
                    74           ?SYMB   'SCS_EXTCLK_F_WU',4,33,257
                    75           ?SYMB   'SCS_EXTCLK_F_TCK',5,33,257
                    76           ?SYMB   'SCS_EXTCLK_F_OSC_FL',6,33,257
                    77           ?SYMB   'SCS_EXTCLK_F_RTC',8,33,257
                    78           ?SYMB   '',16,16,0
                    79           ?SYMB   'SCS_EXTCLK_Type',257,13,258
                    80           ?SYMB   '',0,86,2
                    81           ?SYMB   'IO.H',0,29,3
                    82           ?SYMB   '',0,86,3
                    83           ?SYMB   '',0,86,2
                    84           ?SYMB   'GPT1.H',0,29,3
                    85           ?SYMB   '',0,86,3
                    86           ?SYMB   '',0,86,2
                    87           ?SYMB   'GPT2.H',0,29,3
                    88           ?SYMB   '',0,86,3
                    89           ?SYMB   '',0,86,2
                    90           ?SYMB   'CCU62.H',0,29,3
                    91           ?SYMB   '',0,86,3
                    92           ?SYMB   '',0,86,2
                    93           ?SYMB   'CCU63.H',0,29,3
                    94           ?SYMB   '',0,86,3
                    95           ?SYMB   '',0,86,2
                    96           ?SYMB   'ADC0.H',0,29,3
                    97           ?SYMB   '',0,86,3
                    98           ?SYMB   'ubyte',3,13,259
                    99           ?SYMB   '',0,86,2
                   100           ?SYMB   '',0,86,1
                   101   ; main.c     30 
                   102   ; main.c     31 // USER CODE BEGIN (MAIN_General,2)
                   103   ; main.c     32 #include <math.h>
                   104           ?SYMB   'd:\programme\tasking\c166 v8.7r1\include\math.h',0,29,2
                   105           ?SYMB   '',0,86,2
                   106           ?SYMB   '',0,86,1
                   107   ; main.c     33 // USER CODE END
                   108   ; main.c     34 
                   109   ; main.c     35 
                   110   ; main.c     36 //****************************************************************************
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:19  Page:   3
main

 LOC CODE        LINE   SOURCELINE

                   111   ; main.c     37 // @Macros
                   112   ; main.c     38 //****************************************************************************
                   113   ; main.c     39 
                   114   ; main.c     40 // USER CODE BEGIN (MAIN_General,3)
                   115   ; main.c     41 
                   116   ; main.c     42 // USER CODE END
                   117   ; main.c     43 
                   118   ; main.c     44 
                   119   ; main.c     45 //****************************************************************************
                   120   ; main.c     46 // @Defines
                   121   ; main.c     47 //****************************************************************************
                   122   ; main.c     48 
                   123   ; main.c     49 // USER CODE BEGIN (MAIN_General,4)
                   124   ; main.c     50         // clockwise=rechtslauf, counterclockwise=linkslauf
                   125   ; main.c     51         #define clockwise (0)
                   126   ; main.c     52         #define counterclockwise (1)
                   127   ; main.c     53 // USER CODE END
                   128   ; main.c     54 
                   129   ; main.c     55 
                   130   ; main.c     56 //****************************************************************************
                   131   ; main.c     57 // @Typedefs
                   132   ; main.c     58 //****************************************************************************
                   133   ; main.c     59 
                   134   ; main.c     60 // USER CODE BEGIN (MAIN_General,5)
                   135   ; main.c     61 
                   136   ; main.c     62 // USER CODE END
                   137   ; main.c     63 
                   138   ; main.c     64 
                   139   ; main.c     65 //****************************************************************************
                   140   ; main.c     66 // @Imported Global Variables
                   141   ; main.c     67 //****************************************************************************
                   142   ; main.c     68 
                   143   ; main.c     69 // USER CODE BEGIN (MAIN_General,6)
                   144   ; main.c     70 
                   145   ; main.c     71 // USER CODE END
                   146   ; main.c     72 
                   147   ; main.c     73 
                   148   ; main.c     74 //****************************************************************************
                   149   ; main.c     75 // @Global Variables
                   150   ; main.c     76 //****************************************************************************
                   151   ; main.c     77 
                   152   ; main.c     78 // USER CODE BEGIN (MAIN_General,7)
                   153   ; main.c     79         unsigned int frequency = 0;
                   154   MAIN_IR_NB      SECTION PDAT WORD PUBLIC 'CINITROM'
0000               155   MAIN_IR_NB_ENTRY        LABEL   BYTE
0000 0000          156           DW      00h
                   157   MAIN_IR_NB      ENDS
                   158   
                   159   MAIN_ID_NB      SECTION LDAT WORD PUBLIC 'CINITIRAM'
0000               160   MAIN_ID_NB_ENTRY        LABEL   BYTE
0000               161   _frequency      LABEL   WORD
0000               162           DS      2
                   163           PUBLIC  _frequency
               R   164           ?SYMB   'frequency',_frequency,22,18
                   165   ; main.c     80         const unsigned int ARRAY_SIZE = 1200;
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:19  Page:   4
main

 LOC CODE        LINE   SOURCELINE

                   166   MAIN_ID_NB      ENDS
                   167   
                   168   MAIN_3_NC       SECTION LDAT WORD PUBLIC 'CNEARROM'
0000               169   _ARRAY_SIZE     LABEL   WORD
0000 B004          170           DW      04B0h
                   171           PUBLIC  _ARRAY_SIZE
               R   172           ?SYMB   'ARRAY_SIZE',_ARRAY_SIZE,22,18
                   173   ; main.c     81         unsigned int OFFSET_L1;
                   174   ; main.c     82         unsigned int OFFSET_L2;
                   175   ; main.c     83         unsigned int OFFSET_L3;
                   176   ; main.c     84         unsigned int table[ARRAY_SIZE];
                   177   ; main.c     85         unsigned int index;
                   178   ; main.c     86         float pi = 3.14159265359;
                   179   MAIN_3_NC       ENDS
                   180   
                   181   MAIN_IR_NB      SECTION PDAT
0002 4940DB0F      182           DW      04049h,0FDBh
                   183   MAIN_IR_NB      ENDS
                   184   
                   185   MAIN_ID_NB      SECTION LDAT
0002               186   _pi     LABEL   WORD
0002               187           DS      4
                   188           PUBLIC  _pi
               R   189           ?SYMB   'pi',_pi,22,10
                   190   ; main.c     87         volatile unsigned int rampIndex;
                   191   ; main.c     88         volatile float velocity;
                   192   ; main.c     89         volatile float rpm;
                   193   ; main.c     90         //unsigned int ccu62_pr = 1/(frequency * ARRAY_SIZE*0.000000015);
                   194   ; main.c     91 
                   195   ; main.c     92 // USER CODE END
                   196   ; main.c     93 
                   197   ; main.c     94 
                   198   ; main.c     95 //****************************************************************************
                   199   ; main.c     96 // @External Prototypes
                   200   ; main.c     97 //****************************************************************************
                   201   ; main.c     98 
                   202   ; main.c     99 // USER CODE BEGIN (MAIN_General,8)
                   203   ; main.c    100 
                   204   ; main.c    101 // USER CODE END
                   205   ; main.c    102 
                   206   ; main.c    103 
                   207   ; main.c    104 //****************************************************************************
                   208   ; main.c    105 // @Prototypes Of Local Functions
                   209   ; main.c    106 //****************************************************************************
                   210   ; main.c    107 
                   211   ; main.c    108 // USER CODE BEGIN (MAIN_General,9)
                   212   ; main.c    109 void generateTable();
                   213   ; main.c    110 unsigned int calculateMotorFrequency (int frequency);
                   214   ; main.c    111 void setPhaseChange(int dir);
                   215   ; main.c    112 // USER CODE END
                   216   ; main.c    113 
                   217   ; main.c    114 
                   218   ; main.c    115 //****************************************************************************
                   219   ; main.c    116 // @Function      void MAIN_vInit(void) 
                   220   ; main.c    117 //
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:19  Page:   5
main

 LOC CODE        LINE   SOURCELINE

                   221   ; main.c    118 //----------------------------------------------------------------------------
                   222   ; main.c    119 // @Description   This function initializes the microcontroller.
                   223   ; main.c    120 //
                   224   ; main.c    121 //----------------------------------------------------------------------------
                   225   ; main.c    122 // @Returnvalue   None
                   226   ; main.c    123 //
                   227   ; main.c    124 //----------------------------------------------------------------------------
                   228   ; main.c    125 // @Parameters    None
                   229   ; main.c    126 //
                   230   ; main.c    127 //----------------------------------------------------------------------------
                   231   ; main.c    128 // @Date          28.09.2021
                   232   ; main.c    129 //
                   233   ; main.c    130 //****************************************************************************
                   234   ; main.c    131 
                   235   ; main.c    132 // USER CODE BEGIN (Init,1)
                   236   ; main.c    133 
                   237   ; main.c    134 // USER CODE END
                   238   ; main.c    135 
                   239   ; main.c    136 void MAIN_vInit(void)
                   240   ; main.c    137 {
                   241   MAIN_ID_NB      ENDS
                   242   
                   243   MAIN_4_PR       SECTION CODE WORD PUBLIC 'CPROGRAM'
                   244           ?LINE   137
                   245           PUBLIC  _MAIN_vInit
               R   246           ?SYMB   'MAIN_vInit',_MAIN_vInit,37,1
                   247           ?SYMB   '',137,8,34
                   248           ?SYMB   '',010000H,7,261
                   249           ?SYMB   '',010001H,7,262
                   250           ?SYMB   '',010002H,7,263
                   251           ?SYMB   '',010003H,7,264
                   252           ?SYMB   '',010004H,7,265
                   253           ?SYMB   '',010005H,7,266
                   254           ?SYMB   '',010006H,7,267
                   255           ?SYMB   '',010007H,7,268
                   256           ?SYMB   '',010000H,7,269
                   257           ?SYMB   '',010001H,7,270
                   258           ?SYMB   '',010002H,7,271
                   259           ?SYMB   '',010003H,7,272
                   260           ?SYMB   '',010004H,7,273
                   261           ?SYMB   '',010005H,7,274
                   262           ?SYMB   '',010006H,7,275
                   263           ?SYMB   '',010007H,7,276
                   264           ?SYMB   'T$1',0,40,277
                   265           ?SYMB   'bit0',0,23,261
                   266           ?SYMB   'bit1',1,23,262
                   267           ?SYMB   'bit2',2,23,263
                   268           ?SYMB   'bit3',3,23,264
                   269           ?SYMB   'bit4',4,23,265
                   270           ?SYMB   'bit5',5,23,266
                   271           ?SYMB   'bit6',6,23,267
                   272           ?SYMB   'bit7',7,23,268
                   273           ?SYMB   'bit8',8,23,269
                   274           ?SYMB   'bit9',9,23,270
                   275           ?SYMB   'bit10',10,23,271
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:19  Page:   6
main

 LOC CODE        LINE   SOURCELINE

                   276           ?SYMB   'bit11',11,23,272
                   277           ?SYMB   'bit12',12,23,273
                   278           ?SYMB   'bit13',13,23,274
                   279           ?SYMB   'bit14',14,23,275
                   280           ?SYMB   'bit15',15,23,276
                   281           ?SYMB   '',16,18,0
                   282           ?SYMB   'T_Reg16',277,13,278
                   283   _MAIN_vInit     PROC    FAR
                   284           ?SYMB   '',00H,95,0
                   285   ; Locals:
                   286   ; 
                   287   ; Statics:
                   288   ; 
                   289   ; CSEs:
                   290   ; 
                   291   ; main.c    138   // USER CODE BEGIN (Init,2)
                   292   ; main.c    139 
                   293   ; main.c    140   // USER CODE END
                   294   ; main.c    141 
                   295   ; main.c    142   //   globally disable interrupts
                   296   ; main.c    143   PSW_IEN        =  0;          
                   297           ?LINE   143
0000 E6FC10FF      298           MOV     R12,#0FF10h
0004 A8DC          299           MOV     R13,[R12]
0006 66FDFFF7      300           AND     R13,#0F7FFh
000A B8DC          301           MOV     [R12],R13
                   302   ; main.c    144 
                   303   ; main.c    145 
                   304   ; main.c    146   ///  -----------------------------------------------------------------------
                   305   ; main.c    147   ///  Configuration of the System Clock:
                   306   ; main.c    148   ///  -----------------------------------------------------------------------
                   307   ; main.c    149   ///  - VCO clock used, input clock is connected
                   308   ; main.c    150   ///  - input frequency is 10,00 MHz
                   309   ; main.c    151   ///  - configured system frequency is 66,00 MHz
                   310   ; main.c    152 
                   311   ; main.c    153   MAIN_vUnlockProtecReg();     // unlock write security
                   312           ?LINE   153
000C DA003E00  R   313           CALLS   SEG _MAIN_vUnlockProtecReg,_MAIN_vUnlockProtecReg
                   314   ; main.c    154 
                   315   ; main.c    155   MAIN_vChangeFreq();          // load PLL control register
                   316           ?LINE   155
0010 DA00D200  R   317           CALLS   SEG _MAIN_vChangeFreq,_MAIN_vChangeFreq
                   318   ; main.c    156 
                   319   ; main.c    157   //   -----------------------------------------------------------------------
                   320   ; main.c    158   //   Initialization of the Peripherals:
                   321   ; main.c    159   //   -----------------------------------------------------------------------
                   322   ; main.c    160 
                   323   ; main.c    161   //   initializes the Parallel Ports
                   324   ; main.c    162   IO_vInit();
                   325           ?LINE   162
0014 DA000000  R   326           CALLS   SEG _IO_vInit,_IO_vInit
                   327   ; main.c    163 
                   328   ; main.c    164   //   initializes the General Purpose Timer Unit (GPT1)
                   329   ; main.c    165   GPT1_vInit();
                   330           ?LINE   165
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:19  Page:   7
main

 LOC CODE        LINE   SOURCELINE

0018 DA000000  R   331           CALLS   SEG _GPT1_vInit,_GPT1_vInit
                   332   ; main.c    166 
                   333   ; main.c    167   //   initializes the General Purpose Timer Unit (GPT2)
                   334   ; main.c    168   GPT2_vInit();
                   335           ?LINE   168
001C DA000000  R   336           CALLS   SEG _GPT2_vInit,_GPT2_vInit
                   337   ; main.c    169 
                   338   ; main.c    170   //   initializes the Capture / Compare Unit 62 (CCU62)
                   339   ; main.c    171   CCU62_vInit();
                   340           ?LINE   171
0020 DA000000  R   341           CALLS   SEG _CCU62_vInit,_CCU62_vInit
                   342   ; main.c    172 
                   343   ; main.c    173   //   initializes the Capture / Compare Unit 63 (CCU63)
                   344   ; main.c    174   CCU63_vInit();
                   345           ?LINE   174
0024 DA000000  R   346           CALLS   SEG _CCU63_vInit,_CCU63_vInit
                   347   ; main.c    175 
                   348   ; main.c    176   //   initializes the Analog / Digital Converter  (ADC0)
                   349   ; main.c    177   ADC0_vInit();
                   350           ?LINE   177
0028 DA000000  R   351           CALLS   SEG _ADC0_vInit,_ADC0_vInit
                   352   ; main.c    178 
                   353   ; main.c    179 
                   354   ; main.c    180   //   -----------------------------------------------------------------------
                   355   ; main.c    181   //   Initialization of the Bank Select registers:
                   356   ; main.c    182   //   -----------------------------------------------------------------------
                   357   ; main.c    183 
                   358   ; main.c    184 
                   359   ; main.c    185   // USER CODE BEGIN (Init,3)
                   360   ; main.c    186 
                   361   ; main.c    187   // USER CODE END
                   362   ; main.c    188 
                   363   ; main.c    189   MAIN_vLockProtecReg();       // lock write security
                   364           ?LINE   189
002C DA007800  R   365           CALLS   SEG _MAIN_vLockProtecReg,_MAIN_vLockProtecReg
                   366   ; main.c    190 
                   367   ; main.c    191   //   globally enable interrupts
                   368   ; main.c    192   PSW_IEN        =  1;          
                   369           ?LINE   192
0030 E6FC10FF      370           MOV     R12,#0FF10h
0034 A8DC          371           MOV     R13,[R12]
0036 1AFD0808      372           BFLDH   R13,#08h,#08h
003A B8DC          373           MOV     [R12],R13
                   374   ; main.c    193 
                   375   ; main.c    194 } //  End of function MAIN_vInit
                   376           ?LINE   194
003C DB00          377           RETS
                   378   _MAIN_vInit     ENDP
               R   379           ?SYMB   '',$,17,194
                   380   ; main.c    195 
                   381   ; main.c    196 
                   382   ; main.c    197 //****************************************************************************
                   383   ; main.c    198 // @Function      void MAIN_vUnlockProtecReg(void) 
                   384   ; main.c    199 //
                   385   ; main.c    200 //----------------------------------------------------------------------------
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:19  Page:   8
main

 LOC CODE        LINE   SOURCELINE

                   386   ; main.c    201 // @Description   This function makes it possible to write one protected 
                   387   ; main.c    202 //                register.
                   388   ; main.c    203 //
                   389   ; main.c    204 //----------------------------------------------------------------------------
                   390   ; main.c    205 // @Returnvalue   None
                   391   ; main.c    206 //
                   392   ; main.c    207 //----------------------------------------------------------------------------
                   393   ; main.c    208 // @Parameters    None
                   394   ; main.c    209 //
                   395   ; main.c    210 //----------------------------------------------------------------------------
                   396   ; main.c    211 // @Date          28.09.2021
                   397   ; main.c    212 //
                   398   ; main.c    213 //****************************************************************************
                   399   ; main.c    214 
                   400   ; main.c    215 // USER CODE BEGIN (UnlockProtecReg,1)
                   401   ; main.c    216 
                   402   ; main.c    217 // USER CODE END
                   403   ; main.c    218 
                   404   ; main.c    219 void MAIN_vUnlockProtecReg(void)
                   405   ; main.c    220 {
                   406           ?LINE   220
                   407           PUBLIC  _MAIN_vUnlockProtecReg
               R   408           ?SYMB   'MAIN_vUnlockProtecReg',_MAIN_vUnlockProtecReg,37,1
                   409           ?SYMB   '',220,8,34
                   410           ?SYMB   'uword',18,13,280
                   411   _MAIN_vUnlockProtecReg  PROC    FAR
                   412           ?SYMB   '',00H,95,0
003E 2802          413           SUB     R0,#02h
               R   414           ?SYMB   '',$,96,2
                   415   ; Locals:
                   416   ;     uwPASSWORD = offset 0
                   417   ; 
                   418   ; Statics:
                   419   ; 
                   420   ; CSEs:
                   421   ; 
                   422   ; main.c    221   uword uwPASSWORD;
                   423           ?SYMB   'uwPASSWORD',1,98,280
               R   424           ?SYMB   '-2',$,101,1
                   425   ; main.c    222 
                   426   ; main.c    223     SCU_SLC = 0xAAAA;                   // command 0
                   427           ?LINE   223
0040 E6FCAAAA      428           MOV     R12,#0AAAAh
0044 F6FCC0F0      429           MOV     0F0C0h,R12
                   430   ; main.c    224     SCU_SLC = 0x5554;                   // command 1
                   431           ?LINE   224
0048 E6FC5455      432           MOV     R12,#05554h
004C F6FCC0F0      433           MOV     0F0C0h,R12
                   434   ; main.c    225 
                   435   ; main.c    226     uwPASSWORD = SCU_SLS & 0x00FF;
                   436           ?LINE   226
0050 F2FCC2F0      437           MOV     R12,0F0C2h
0054 66FCFF00      438           AND     R12,#0FFh
0058 B8C0          439           MOV     [R0],R12
                   440   ; main.c    227     uwPASSWORD = (~uwPASSWORD) & 0x00FF;
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:19  Page:   9
main

 LOC CODE        LINE   SOURCELINE

                   441           ?LINE   227
005A A8C0          442           MOV     R12,[R0]
005C 91C0          443           CPL     R12
005E 66FCFF00      444           AND     R12,#0FFh
0062 B8C0          445           MOV     [R0],R12
                   446   ; main.c    228 
                   447   ; main.c    229     SCU_SLC = 0x9600 | uwPASSWORD;      // command 2
                   448           ?LINE   229
0064 A8C0          449           MOV     R12,[R0]
0066 76FC0096      450           OR      R12,#09600h
006A F6FCC0F0      451           MOV     0F0C0h,R12
                   452   ; main.c    230     SCU_SLC = 0x0000;                   // command 3
                   453           ?LINE   230
006E E00C          454           MOV     R12,#00h
0070 F6FCC0F0      455           MOV     0F0C0h,R12
                   456   ; main.c    231 
                   457   ; main.c    232 } //  End of function MAIN_vUnlockProtecReg
               R   458           ?SYMB   '',$,102,1
                   459           ?LINE   232
0074 0802          460           ADD     R0,#02h
               R   461           ?SYMB   '',$,96,0
0076 DB00          462           RETS
                   463   _MAIN_vUnlockProtecReg  ENDP
               R   464           ?SYMB   '',$,17,232
                   465   ; main.c    233 
                   466   ; main.c    234 
                   467   ; main.c    235 //****************************************************************************
                   468   ; main.c    236 // @Function      void MAIN_vLockProtecReg(void) 
                   469   ; main.c    237 //
                   470   ; main.c    238 //----------------------------------------------------------------------------
                   471   ; main.c    239 // @Description   This function makes it possible to lock one protected 
                   472   ; main.c    240 //                register.
                   473   ; main.c    241 //
                   474   ; main.c    242 //----------------------------------------------------------------------------
                   475   ; main.c    243 // @Returnvalue   None
                   476   ; main.c    244 //
                   477   ; main.c    245 //----------------------------------------------------------------------------
                   478   ; main.c    246 // @Parameters    None
                   479   ; main.c    247 //
                   480   ; main.c    248 //----------------------------------------------------------------------------
                   481   ; main.c    249 // @Date          28.09.2021
                   482   ; main.c    250 //
                   483   ; main.c    251 //****************************************************************************
                   484   ; main.c    252 
                   485   ; main.c    253 // USER CODE BEGIN (LockProtecReg,1)
                   486   ; main.c    254 
                   487   ; main.c    255 // USER CODE END
                   488   ; main.c    256 
                   489   ; main.c    257 void MAIN_vLockProtecReg(void)
                   490   ; main.c    258 {
                   491           ?LINE   258
                   492           PUBLIC  _MAIN_vLockProtecReg
               R   493           ?SYMB   'MAIN_vLockProtecReg',_MAIN_vLockProtecReg,37,1
                   494           ?SYMB   '',258,8,34
                   495   _MAIN_vLockProtecReg    PROC    FAR
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:19  Page:  10
main

 LOC CODE        LINE   SOURCELINE

                   496           ?SYMB   '',00H,95,0
0078 2802          497           SUB     R0,#02h
               R   498           ?SYMB   '',$,96,2
                   499   ; Locals:
                   500   ;     uwPASSWORD = offset 0
                   501   ; 
                   502   ; Statics:
                   503   ; 
                   504   ; CSEs:
                   505   ; 
                   506   ; main.c    259   uword uwPASSWORD;
                   507           ?SYMB   'uwPASSWORD',1,98,280
               R   508           ?SYMB   '-2',$,101,1
                   509   ; main.c    260 
                   510   ; main.c    261     SCU_SLC = 0xAAAA;                   // command 0
                   511           ?LINE   261
007A E6FCAAAA      512           MOV     R12,#0AAAAh
007E F6FCC0F0      513           MOV     0F0C0h,R12
                   514   ; main.c    262     SCU_SLC = 0x5554;                   // command 1
                   515           ?LINE   262
0082 E6FC5455      516           MOV     R12,#05554h
0086 F6FCC0F0      517           MOV     0F0C0h,R12
                   518   ; main.c    263 
                   519   ; main.c    264     uwPASSWORD = SCU_SLS & 0x00FF;
                   520           ?LINE   264
008A F2FCC2F0      521           MOV     R12,0F0C2h
008E 66FCFF00      522           AND     R12,#0FFh
0092 B8C0          523           MOV     [R0],R12
                   524   ; main.c    265     uwPASSWORD = (~uwPASSWORD) & 0x00FF;
                   525           ?LINE   265
0094 A8C0          526           MOV     R12,[R0]
0096 91C0          527           CPL     R12
0098 66FCFF00      528           AND     R12,#0FFh
009C B8C0          529           MOV     [R0],R12
                   530   ; main.c    266 
                   531   ; main.c    267     SCU_SLC = 0x9600 | uwPASSWORD;      // command 2
                   532           ?LINE   267
009E A8C0          533           MOV     R12,[R0]
00A0 76FC0096      534           OR      R12,#09600h
00A4 F6FCC0F0      535           MOV     0F0C0h,R12
                   536   ; main.c    268     SCU_SLC = 0x1800;                   // command 3; new PASSWOR is 0x00
                   537           ?LINE   268
00A8 E6FC0018      538           MOV     R12,#01800h
00AC F6FCC0F0      539           MOV     0F0C0h,R12
                   540   ; main.c    269 
                   541   ; main.c    270     uwPASSWORD = SCU_SLS & 0x00FF;
                   542           ?LINE   270
00B0 F2FCC2F0      543           MOV     R12,0F0C2h
00B4 66FCFF00      544           AND     R12,#0FFh
00B8 B8C0          545           MOV     [R0],R12
                   546   ; main.c    271     uwPASSWORD = (~uwPASSWORD) & 0x00FF;
                   547           ?LINE   271
00BA A8C0          548           MOV     R12,[R0]
00BC 91C0          549           CPL     R12
00BE 66FCFF00      550           AND     R12,#0FFh
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:19  Page:  11
main

 LOC CODE        LINE   SOURCELINE

00C2 B8C0          551           MOV     [R0],R12
                   552   ; main.c    272     SCU_SLC = 0x8E00 | uwPASSWORD;      // command 4
                   553           ?LINE   272
00C4 A8C0          554           MOV     R12,[R0]
00C6 76FC008E      555           OR      R12,#08E00h
00CA F6FCC0F0      556           MOV     0F0C0h,R12
                   557   ; main.c    273 
                   558   ; main.c    274 } //  End of function MAIN_vLockProtecReg
               R   559           ?SYMB   '',$,102,1
                   560           ?LINE   274
00CE 0802          561           ADD     R0,#02h
               R   562           ?SYMB   '',$,96,0
00D0 DB00          563           RETS
                   564   _MAIN_vLockProtecReg    ENDP
               R   565           ?SYMB   '',$,17,274
                   566   ; main.c    275 
                   567   ; main.c    276 
                   568   ; main.c    277 //****************************************************************************
                   569   ; main.c    278 // @Function      void MAIN_vChangeFreq(void) 
                   570   ; main.c    279 //
                   571   ; main.c    280 //----------------------------------------------------------------------------
                   572   ; main.c    281 // @Description   This function is used to select the external crystal and
                   573   ; main.c    282 //                configure the system frequency to 80Mhz/66Mhz.
                   574   ; main.c    283 //
                   575   ; main.c    284 //----------------------------------------------------------------------------
                   576   ; main.c    285 // @Returnvalue   None
                   577   ; main.c    286 //
                   578   ; main.c    287 //----------------------------------------------------------------------------
                   579   ; main.c    288 // @Parameters    None
                   580   ; main.c    289 //
                   581   ; main.c    290 //----------------------------------------------------------------------------
                   582   ; main.c    291 // @Date          28.09.2021
                   583   ; main.c    292 //
                   584   ; main.c    293 //****************************************************************************
                   585   ; main.c    294 
                   586   ; main.c    295 // USER CODE BEGIN (ChangeFreq,1)
                   587   ; main.c    296 
                   588   ; main.c    297 // USER CODE END
                   589   ; main.c    298 
                   590   ; main.c    299 void MAIN_vChangeFreq(void)
                   591   ; main.c    300 {
                   592           ?LINE   300
                   593           PUBLIC  _MAIN_vChangeFreq
               R   594           ?SYMB   'MAIN_vChangeFreq',_MAIN_vChangeFreq,37,1
                   595           ?SYMB   '',300,8,34
                   596   _MAIN_vChangeFreq       PROC    FAR
                   597           ?SYMB   '',00H,95,0
                   598   ; Locals:
                   599   ; 
                   600   ; Statics:
                   601   ; 
                   602   ; CSEs:
                   603   ; 
                   604   ; main.c    301   SCS_SwitchToHighPrecBandgap();
                   605           ?LINE   301
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:19  Page:  12
main

 LOC CODE        LINE   SOURCELINE

00D2 DA000000  R   606           CALLS   SEG _SCS_SwitchToHighPrecBandgap,_SCS_SwitchToHighPrecBandgap
                   607   ; main.c    302 
                   608   ; main.c    303   //For application and internal application resets, the complete PLL configura
                         tion could be avoided
                   609   ; main.c    304   //The entry from application resets and internal application reset is covered
                          in the following differentiation
                   610   ; main.c    305   //in int/ext clock in lock/unlocked state.
                   611   ; main.c    306 
                   612   ; main.c    307   if  ((SCU_PLLSTAT & 0x0004) == 0x0004)             // fR derived from Interna
                         l clock
                   613           ?LINE   307
00D6 F2FCBCF0      614           MOV     R12,0F0BCh
00DA 9AFC0720      615           JNB     R12.2,_7
                   616   ; main.c    308         {
                   617   ; main.c    309             //Normal startup state during boot and the clock
                   618   ; main.c    310             //has to be in the next step configured on the external crystal
                   619   ; main.c    311             //use XTAL/VCO, count XTAL clock
                   620   ; main.c    312 
                   621   ; main.c    313             SCS_StartXtalOsc(1);                     // Starts the crystal osci
                         llator
                   622           ?LINE   313
00DE E01C          623           MOV     R12,#01h
00E0 DA000000  R   624           CALLS   SEG _SCS_StartXtalOsc,_SCS_StartXtalOsc
                   625   ; main.c    314             SCS_SwitchSystemClock(1);                // System clock is increas
                         ed to target speed (80/66 MHz)
                   626           ?LINE   314
00E4 E01C          627           MOV     R12,#01h
00E6 DA000000  R   628           CALLS   SEG _SCS_SwitchSystemClock,_SCS_SwitchSystemClock
                   629   ; main.c    315 
                   630   ; main.c    316         }
                   631           ?LINE   316
00EA DB00          632           RETS
00EC               633   _7:
                   634   ; main.c    317 
                   635   ; main.c    318   else                                               // fR derived from externa
                         l crystal clock
                   636   ; main.c    319         {
                   637   ; main.c    320             if ((SCU_PLLSTAT & 0x1009) == 0x1009)    // fR derived from externa
                         l crystal clock + VCO is locked
                   638           ?LINE   320
00EC F2FCBCF0      639           MOV     R12,0F0BCh
00F0 66FC0910      640           AND     R12,#01009h
00F4 46FC0910      641           CMP     R12,#01009h
00F8 3D02          642           JMPR    cc_NE,_8
                   643   ; main.c    321             {
                   644   ; main.c    322                //usually after an application reset where clock need not be con
                         figured again.
                   645   ; main.c    323                //check K2/P/N values and decide whether these values have to be
                          adapted based on application needs.
                   646   ; main.c    324                NOP();
                   647           ?LINE   324
00FA CC00          648           NOP
                   649   ; main.c    325                //usually the PLL losss of Lock TRAP schould be enabled here.
                   650   ; main.c    326             }
                   651           ?LINE   326
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:19  Page:  13
main

 LOC CODE        LINE   SOURCELINE

00FC 0D01          652           JMPR    cc_UC,_9
00FE               653   _8:
                   654   ; main.c    327             else                                     //fR derived from external
                          crystal clock + VCO is not locked
                   655   ; main.c    328 
                   656   ; main.c    329             {
                   657   ; main.c    330                //estimate the K1 value and the current frequency
                   658   ; main.c    331                //reduce K2/P/N values in steps so that the frequency
                   659   ; main.c    332                //jumps is limited to 20MHz or factor of 5 whichever is minimum
                   660   ; main.c    333                NOP();
                   661           ?LINE   333
00FE CC00          662           NOP
                   663   ; main.c    334             }
                   664           ?LINE   334
0100               665   _9:
                   666   ; main.c    335 
                   667   ; main.c    336 
                   668   ; main.c    337         }
                   669           ?LINE   337
0100               670   _10:
                   671   ; main.c    338 
                   672   ; main.c    339 } //  End of function MAIN_vChangeFreq
                   673           ?LINE   339
0100 DB00          674           RETS
                   675   _MAIN_vChangeFreq       ENDP
               R   676           ?SYMB   '',$,17,339
                   677   ; main.c    340 
                   678   ; main.c    341 
                   679   ; main.c    342 //****************************************************************************
                   680   ; main.c    343 // @Function      void main(void) 
                   681   ; main.c    344 //
                   682   ; main.c    345 //----------------------------------------------------------------------------
                   683   ; main.c    346 // @Description   This is the main function.
                   684   ; main.c    347 //
                   685   ; main.c    348 //----------------------------------------------------------------------------
                   686   ; main.c    349 // @Returnvalue   None
                   687   ; main.c    350 //
                   688   ; main.c    351 //----------------------------------------------------------------------------
                   689   ; main.c    352 // @Parameters    None
                   690   ; main.c    353 //
                   691   ; main.c    354 //----------------------------------------------------------------------------
                   692   ; main.c    355 // @Date          28.09.2021
                   693   ; main.c    356 //
                   694   ; main.c    357 //****************************************************************************
                   695   ; main.c    358 
                   696   ; main.c    359 // USER CODE BEGIN (Main,1)
                   697   ; main.c    360 
                   698   ; main.c    361 // USER CODE END
                   699   ; main.c    362 
                   700   ; main.c    363 void main(void)
                   701   ; main.c    364 {
                   702           ?LINE   364
                   703           PUBLIC  _main
               R   704           ?SYMB   'main',_main,37,1
                   705           ?SYMB   '',364,8,34
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:19  Page:  14
main

 LOC CODE        LINE   SOURCELINE

                   706   _main   PROC    FAR
                   707           ?SYMB   '',00H,95,0
0102 2804          708           SUB     R0,#04h
               R   709           ?SYMB   '',$,96,4
                   710   ; Locals:
                   711   ;     raw = offset 0
                   712   ; 
                   713   ; Statics:
                   714   ; 
                   715   ; CSEs:
                   716   ; 
                   717   ; main.c    365   // USER CODE BEGIN (Main,2)
                   718   ; main.c    366 
                   719   ; main.c    367   // USER CODE END
                   720   ; main.c    368 
                   721   ; main.c    369   MAIN_vInit();
                   722           ?LINE   369
0104 DA000000  R   723           CALLS   SEG _MAIN_vInit,_MAIN_vInit
                   724   ; main.c    370 
                   725   ; main.c    371   // USER CODE BEGIN (Main,3)
                   726   ; main.c    372         generateTable();
                   727           ?LINE   372
0108 DA00AC01  R   728           CALLS   SEG _generateTable,_generateTable
                   729   ; main.c    373         ADC0_vInit();
                   730           ?LINE   373
010C DA000000  R   731           CALLS   SEG _ADC0_vInit,_ADC0_vInit
                   732   ; main.c    374         ADC0_vStartSeq0ReqChNum(0,0,1,6);
                   733           ?LINE   374
0110 E00C          734           MOV     R12,#00h
0112 E00D          735           MOV     R13,#00h
0114 E01E          736           MOV     R14,#01h
0116 E06F          737           MOV     R15,#06h
0118 DA000000  R   738           CALLS   SEG _ADC0_vStartSeq0ReqChNum,_ADC0_vStartSeq0ReqChNum
                   739   ; main.c    375         CCU63_vStartTmr(CCU63_TIMER_12);
                   740           ?LINE   375
011C E6FCA6EB      741           MOV     R12,#0EBA6h
0120 A8DC          742           MOV     R13,[R12]
0122 1FFD          743           BSET    R13.1
0124 B8DC          744           MOV     [R12],R13
                   745   ; main.c    376         CCU62_vStartTmr(CCU62_TIMER_12);
                   746           ?LINE   376
0126 E6FC26EB      747           MOV     R12,#0EB26h
012A A8DC          748           MOV     R13,[R12]
012C 1FFD          749           BSET    R13.1
012E B8DC          750           MOV     [R12],R13
                   751   ; main.c    377         GPT2_vStartTmr(GPT2_TIMER_6);
                   752           ?LINE   377
0130 E6FC48FF      753           MOV     R12,#0FF48h
0134 A8DC          754           MOV     R13,[R12]
0136 0AFD4040      755           BFLDL   R13,#040h,#040h
013A B8DC          756           MOV     [R12],R13
                   757   ; main.c    378     // USER CODE END
                   758   ; main.c    379 
                   759   ; main.c    380   while(1)
                   760           ?LINE   380
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:19  Page:  15
main

 LOC CODE        LINE   SOURCELINE

013C 0D34          761           JMPR    cc_UC,_18
013E               762   _15:
                   763   ; main.c    381   {
                   764   ; main.c    382 
                   765   ; main.c    383    // USER CODE BEGIN (Main,4)
                   766   ; main.c    384    
                   767   ; main.c    385    
                   768   ; main.c    386    if (rampIndex > 0){
                   769           ?LINE   386
013E F2FC0000  R   770           MOV     R12,_rampIndex
0142 48C0          771           CMP     R12,#00h
0144 FD2A          772           JMPR    cc_ULE,_16
                   773   ; main.c    387                 unsigned long raw;
               R   774           ?SYMB   '',$,9,387
                   775           ?SYMB   'raw',1,98,7
               R   776           ?SYMB   '-4',$,101,1
                   777   ; main.c    388                 raw = ADC0_uwGetResultData(RESULT_REG_0);
                   778           ?LINE   388
0146 F2FCB0E0      779           MOV     R12,0E0B0h
014A 9AFC07C0      780           JNB     R12.12,_19
014E 0D00          781           JMPR    cc_UC,_20
0150               782   _20:
0150 F2FC50E0      783           MOV     R12,0E050h
0154 66FCFF3F      784           AND     R12,#03FFFh
0158 7C2C          785           SHR     R12,#02h
015A 0D01          786           JMPR    cc_UC,_21
015C               787   _19:
015C E00C          788           MOV     R12,#00h
015E               789   _21:
015E E00D          790           MOV     R13,#00h
0160 B8C0          791           MOV     [R0],R12
0162 C4D00200      792           MOV     [R0+#02H],R13
                   793   ; main.c    389                 frequency = ((50*raw)/4096);
                   794           ?LINE   389
0166 A840          795           MOV     R4,[R0]
0168 D4500200      796           MOV     R5,[R0+#02H]
016C E6FA3200      797           MOV     R10,#032h
0170 E00B          798           MOV     R11,#00h
0172 DA000000  R   799           CALLS   SEG __mul,__mul
0176 F0C5          800           MOV     R12,R5
0178 7CC4          801           SHR     R4,#0Ch
017A 7CC5          802           SHR     R5,#0Ch
017C 5C4C          803           SHL     R12,#04h
017E 704C          804           OR      R4,R12
0180 F6F40000  R   805           MOV     _frequency,R4
                   806   ; main.c    390                 CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequency(fre
                         quency));
                   807           ?LINE   390
0184 F2FC0000  R   808           MOV     R12,_frequency
0188 DA005C02  R   809           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
018C F6F412EB      810           MOV     0EB12h,R4
                   811   ; main.c    391                 CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   812           ?LINE   391
0190 E6FC26EB      813           MOV     R12,#0EB26h
0194 A8DC          814           MOV     R13,[R12]
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:19  Page:  16
main

 LOC CODE        LINE   SOURCELINE

0196 6FFD          815           BSET    R13.6
0198 B8DC          816           MOV     [R12],R13
                   817   ; main.c    392         }
               R   818           ?SYMB   '',$,102,1
               R   819           ?SYMB   '',$,15,392
                   820           ?LINE   392
019A               821   _16:
                   822   ; main.c    393         if (rampIndex == 0){
                   823           ?LINE   393
019A F2FC0000  R   824           MOV     R12,_rampIndex
019E 3D03          825           JMPR    cc_NZ,_17
                   826   ; main.c    394                 setPhaseChange(clockwise);
                   827           ?LINE   394
01A0 E00C          828           MOV     R12,#00h
01A2 DA00AA02  R   829           CALLS   SEG _setPhaseChange,_setPhaseChange
                   830   ; main.c    395         }
                   831           ?LINE   395
01A6               832   _17:
                   833           ?LINE   380
01A6               834   _18:
01A6 0DCB          835           JMPR    cc_UC,_15
                   836   ; main.c    396         /*
                   837   ; main.c    397         if(rampIndex < 50){
                   838   ; main.c    398                 frequency = rampIndex;
                   839   ; main.c    399                 CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequency(fre
                         quency));
                   840   ; main.c    400                 CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   841   ; main.c    401                 IO_vTogglePin(LED_DBG);
                   842   ; main.c    402         } 
                   843   ; main.c    403         
                   844   ; main.c    404         if(rampIndex < 100 && rampIndex > 50){
                   845   ; main.c    405                 frequency = 50;
                   846   ; main.c    406                 CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequency(fre
                         quency));
                   847   ; main.c    407                 CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   848   ; main.c    408         }
                   849   ; main.c    409 
                   850   ; main.c    410         if(rampIndex < 150 && rampIndex > 100){
                   851   ; main.c    411                 frequency = (150 - rampIndex);
                   852   ; main.c    412                 CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequency(fre
                         quency));
                   853   ; main.c    413                 CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   854   ; main.c    414         }
                   855   ; main.c    415         if (rampIndex == 151){
                   856   ; main.c    416                 setPhaseChange(counterclockwise);
                   857   ; main.c    417         }
                   858   ; main.c    418         if(rampIndex < 200 && rampIndex > 151){
                   859   ; main.c    419                 frequency = (rampIndex-150);
                   860   ; main.c    420                 CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequency(fre
                         quency));
                   861   ; main.c    421                 CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   862   ; main.c    422         }
                   863   ; main.c    423         if(rampIndex < 250 && rampIndex > 200){
                   864   ; main.c    424                 frequency = 50;
                   865   ; main.c    425                 CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequency(fre
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:19  Page:  17
main

 LOC CODE        LINE   SOURCELINE

                         quency));
                   866   ; main.c    426                 CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   867   ; main.c    427         }
                   868   ; main.c    428         if(rampIndex < 300 && rampIndex > 250){
                   869   ; main.c    429                 frequency = (300 - rampIndex);
                   870   ; main.c    430                 CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequency(fre
                         quency));
                   871   ; main.c    431                 CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   872   ; main.c    432         }
                   873   ; main.c    433         if(rampIndex < 350 && rampIndex > 300){
                   874   ; main.c    434                 frequency = 50;
                   875   ; main.c    435                 CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequency(fre
                         quency));
                   876   ; main.c    436                 CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   877   ; main.c    437         }
                   878   ; main.c    438         if(rampIndex == 350){
                   879   ; main.c    439                 frequency = 0;
                   880   ; main.c    440                 CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequency(fre
                         quency));
                   881   ; main.c    441                 CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   882   ; main.c    442         }
                   883   ; main.c    443 
                   884   ; main.c    444 
                   885   ; main.c    445         */
                   886   ; main.c    446    // USER CODE END
                   887   ; main.c    447 
                   888   ; main.c    448   }
                   889   ; main.c    449 
                   890   ; main.c    450 } //  End of function main
                   891           ?LINE   450
01A8 0804          892           ADD     R0,#04h
               R   893           ?SYMB   '',$,96,0
01AA DB00          894           RETS
                   895   _main   ENDP
               R   896           ?SYMB   '',$,17,450
                   897   ; main.c    451 
                   898   ; main.c    452 
                   899   ; main.c    453 
                   900   ; main.c    454 // USER CODE BEGIN (MAIN_General,10)
                   901   ; main.c    455 void generateTable(){
                   902           ?LINE   455
                   903           PUBLIC  _generateTable
               R   904           ?SYMB   'generateTable',_generateTable,37,1
                   905           ?SYMB   '',455,8,34
                   906   _generateTable  PROC    FAR
                   907           ?SYMB   '',00H,95,0
01AC 26F00A00      908           SUB     R0,#0Ah
               R   909           ?SYMB   '',$,96,10
                   910   ; Locals:
                   911   ;     i = offset 0
                   912   ;     stepSize = offset 2
                   913   ; 
                   914   ; Statics:
                   915   ; 
                   916   ; CSEs:
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:19  Page:  18
main

 LOC CODE        LINE   SOURCELINE

                   917   ; 
                   918   ; main.c    456         double stepSize = (2*pi)/(ARRAY_SIZE);
                   919           ?SYMB   'stepSize',2,98,11
               R   920           ?SYMB   '-8',$,101,2
                   921           ?LINE   456
01B0 F2F40000  R   922           MOV     R4,_pi
01B4 F2F50000  R   923           MOV     R5,(_pi+2)
01B8 E6FA0040      924           MOV     R10,#04000h
01BC E00B          925           MOV     R11,#00h
01BE DA000000  R   926           CALLS   SEG __mlf4r,__mlf4r
01C2 E6FA9644      927           MOV     R10,#04496h
01C6 E00B          928           MOV     R11,#00h
01C8 DA000000  R   929           CALLS   SEG __dvf4r,__dvf4r
01CC DA000000  R   930           CALLS   SEG __cff48r,__cff48r
               R   931           ?SYMB   '',$,96,18
01D0 F040          932           MOV     R4,R0
01D2 06F40A00      933           ADD     R4,#0Ah
01D6 DA000000  R   934           CALLS   SEG __store8n,__store8n
01DA 06F00800      935           ADD     R0,#08h
               R   936           ?SYMB   '',$,96,10
                   937   ; main.c    457         int i;
                   938           ?SYMB   'i',1,98,16
               R   939           ?SYMB   '-a',$,101,1
                   940   ; main.c    458         for (i = 0; i < ARRAY_SIZE; i++){ 
                   941           ?LINE   458
01DE E00C          942           MOV     R12,#00h
01E0 B8C0          943           MOV     [R0],R12
01E2 0D35          944           JMPR    cc_UC,_27
01E4               945   _26:
                   946   ; main.c    459                 table[i] = (unsigned int)((double)((CCU63_T12PR - 140)/2)*sin(s
                         tepSize * i) + (CCU63_T12PR/2));
                   947           ?LINE   459
01E4 26F00800      948           SUB     R0,#08h
               R   949           ?SYMB   '',$,96,18
01E8 E0A4          950           MOV     R4,#0Ah
01EA 0040          951           ADD     R4,R0
01EC DA000000  R   952           CALLS   SEG __load8n,__load8n
               R   953           ?SYMB   '',$,96,26
01F0 D4B01000      954           MOV     R11,[R0+#010H]
01F4 F04B          955           MOV     R4,R11
01F6 F0CA          956           MOV     R12,R10
01F8 DA000000  R   957           CALLS   SEG __cif28r,__cif28r
               R   958           ?SYMB   '',$,96,34
01FC F0BA          959           MOV     R11,R10
01FE F0AC          960           MOV     R10,R12
0200 DA000000  R   961           CALLS   SEG __mlf8r,__mlf8r
0204 06F00800      962           ADD     R0,#08h
               R   963           ?SYMB   '',$,96,26
0208 DA000000  R   964           CALLS   SEG _sin,_sin
020C 06F00800      965           ADD     R0,#08h
               R   966           ?SYMB   '',$,96,18
0210 F0B4          967           MOV     R11,R4
0212 F2FA92EB      968           MOV     R10,0EB92h
0216 26FA8C00      969           SUB     R10,#08Ch
021A 7C1A          970           SHR     R10,#01h
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:19  Page:  19
main

 LOC CODE        LINE   SOURCELINE

021C F04A          971           MOV     R4,R10
021E DA000000  R   972           CALLS   SEG __cuf28r,__cuf28r
               R   973           ?SYMB   '',$,96,26
0222 DA000000  R   974           CALLS   SEG __mlf8r,__mlf8r
0226 F0BA          975           MOV     R11,R10
0228 F2FA92EB      976           MOV     R10,0EB92h
022C 7C1A          977           SHR     R10,#01h
022E F04A          978           MOV     R4,R10
0230 DA000000  R   979           CALLS   SEG __cuf28r,__cuf28r
               R   980           ?SYMB   '',$,96,34
0234 DA000000  R   981           CALLS   SEG __adf8r,__adf8r
0238 DA000000  R   982           CALLS   SEG __cfu82r,__cfu82r
023C 06F01800      983           ADD     R0,#018h
               R   984           ?SYMB   '',$,96,10
0240 A8C0          985           MOV     R12,[R0]
0242 5C1C          986           SHL     R12,#01h
0244 C44C0000  R   987           MOV     [R12+#_table],R4
                   988           ?LINE   458
0248 A8C0          989           MOV     R12,[R0]
024A 08C1          990           ADD     R12,#01h
024C B8C0          991           MOV     [R0],R12
024E               992   _27:
024E A8C0          993           MOV     R12,[R0]
0250 46FCB004      994           CMP     R12,#04B0h
0254 8DC7          995           JMPR    cc_ULT,_26
                   996   ; main.c    460         }
                   997   ; main.c    461 }
               R   998           ?SYMB   '',$,102,1
               R   999           ?SYMB   '',$,102,2
                  1000           ?LINE   461
0256 06F00A00     1001           ADD     R0,#0Ah
               R  1002           ?SYMB   '',$,96,0
025A DB00         1003           RETS
                  1004   _generateTable  ENDP
               R  1005           ?SYMB   '',$,17,461
                  1006   ; main.c    462 
                  1007   ; main.c    463 unsigned int calculateMotorFrequency (int _frequency){
                  1008           ?LINE   463
                  1009           PUBLIC  _calculateMotorFrequency
               R  1010           ?SYMB   'calculateMotorFrequency',_calculateMotorFrequency,37,18
                  1011           ?SYMB   '',463,8,34
                  1012   _calculateMotorFrequency        PROC    FAR
                  1013           ?SYMB   '',00H,95,0
025C 88C0         1014           MOV     [-R0],R12
               R  1015           ?SYMB   '',$,96,2
                  1016   ; Locals:
                  1017   ;     _frequency = offset 0
                  1018   ; 
                  1019   ; Statics:
                  1020   ; 
                  1021   ; CSEs:
                  1022   ; 
                  1023           ?SYMB   '_frequency',1,99,16
               R  1024           ?SYMB   '-2',$,101,1
                  1025   ; main.c    464         if (_frequency < 2){
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:19  Page:  20
main

 LOC CODE        LINE   SOURCELINE

                  1026           ?LINE   464
025E A8C0         1027           MOV     R12,[R0]
0260 48C2         1028           CMP     R12,#02h
0262 DD06         1029           JMPR    cc_SGE,_32
                  1030   ; main.c    465                 frequency = 1;
                  1031           ?LINE   465
0264 E01C         1032           MOV     R12,#01h
0266 F6FC0000  R  1033           MOV     _frequency,R12
                  1034   ; main.c    466                 return (0xD903);
                  1035           ?LINE   466
026A E6F403D9     1036           MOV     R4,#0D903h
026E 0D1B         1037           JMPR    cc_UC,_33
                  1038   ; main.c    467         }
                  1039           ?LINE   467
0270              1040   _32:
                  1041   ; main.c    468         else {
                  1042   ; main.c    469                 return (1/(_frequency * ARRAY_SIZE*0.000000015));
                  1043           ?LINE   469
0270 A8C0         1044           MOV     R12,[R0]
0272 E6FDB004     1045           MOV     R13,#04B0h
0276 1BCD         1046           MULU    R12,R13
0278 F2FB0EFE     1047           MOV     R11,MDL
027C F04B         1048           MOV     R4,R11
027E DA000000  R  1049           CALLS   SEG __cuf28r,__cuf28r
               R  1050           ?SYMB   '',$,96,10
0282 F0BA         1051           MOV     R11,R10
0284 E6F40000  R  1052           MOV     R4,#_28
0288 DA000000  R  1053           CALLS   SEG __load8n,__load8n
               R  1054           ?SYMB   '',$,96,18
028C DA000000  R  1055           CALLS   SEG __mlf8r,__mlf8r
0290 F0BA         1056           MOV     R11,R10
0292 E6F40000  R  1057           MOV     R4,#_29
0296 DA000000  R  1058           CALLS   SEG __load8n,__load8n
               R  1059           ?SYMB   '',$,96,26
029A DA000000  R  1060           CALLS   SEG __dvf8r,__dvf8r
029E DA000000  R  1061           CALLS   SEG __cfu82r,__cfu82r
02A2 06F01800     1062           ADD     R0,#018h
               R  1063           ?SYMB   '',$,96,2
                  1064   ; main.c    470         }
                  1065   ; main.c    471 }
                  1066           ?LINE   471
02A6              1067   _33:
               R  1068           ?SYMB   '',$,102,1
02A6 0802         1069           ADD     R0,#02h
               R  1070           ?SYMB   '',$,96,0
02A8 DB00         1071           RETS
                  1072   _calculateMotorFrequency        ENDP
               R  1073           ?SYMB   '',$,17,471
                  1074   ; main.c    472 
                  1075   ; main.c    473 void setPhaseChange(int dir){
                  1076           ?LINE   473
                  1077           PUBLIC  _setPhaseChange
               R  1078           ?SYMB   'setPhaseChange',_setPhaseChange,37,1
                  1079           ?SYMB   '',473,8,34
                  1080   _setPhaseChange PROC    FAR
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:19  Page:  21
main

 LOC CODE        LINE   SOURCELINE

                  1081           ?SYMB   '',00H,95,0
02AA 88C0         1082           MOV     [-R0],R12
               R  1083           ?SYMB   '',$,96,2
                  1084   ; Locals:
                  1085   ;     dir = offset 0
                  1086   ; 
                  1087   ; Statics:
                  1088   ; 
                  1089   ; CSEs:
                  1090   ; 
                  1091           ?SYMB   'dir',1,99,16
               R  1092           ?SYMB   '-2',$,101,1
                  1093   ; main.c    474         if(dir == clockwise){
                  1094           ?LINE   474
02AC A8C0         1095           MOV     R12,[R0]
02AE 3D0A         1096           JMPR    cc_NZ,_36
                  1097   ; main.c    475                 OFFSET_L1 = 0;
                  1098           ?LINE   475
02B0 F68E0000  R  1099           MOV     _OFFSET_L1,ZEROS
                  1100   ; main.c    476                 OFFSET_L2 = (2*ARRAY_SIZE)/3;
                  1101           ?LINE   476
02B4 E6FC2003     1102           MOV     R12,#0320h
02B8 F6FC0000  R  1103           MOV     _OFFSET_L2,R12
                  1104   ; main.c    477                 OFFSET_L3 = ARRAY_SIZE/3;
                  1105           ?LINE   477
02BC E6FC9001     1106           MOV     R12,#0190h
02C0 F6FC0000  R  1107           MOV     _OFFSET_L3,R12
                  1108   ; main.c    478         }
                  1109           ?LINE   478
02C4              1110   _36:
                  1111   ; main.c    479         if(dir == counterclockwise){
                  1112           ?LINE   479
02C4 A8C0         1113           MOV     R12,[R0]
02C6 48C1         1114           CMP     R12,#01h
02C8 3D0A         1115           JMPR    cc_NE,_37
                  1116   ; main.c    480                 OFFSET_L1 = 0;
                  1117           ?LINE   480
02CA F68E0000  R  1118           MOV     _OFFSET_L1,ZEROS
                  1119   ; main.c    481                 OFFSET_L2 = ARRAY_SIZE/3;
                  1120           ?LINE   481
02CE E6FC9001     1121           MOV     R12,#0190h
02D2 F6FC0000  R  1122           MOV     _OFFSET_L2,R12
                  1123   ; main.c    482                 OFFSET_L3 = (2*ARRAY_SIZE)/3;
                  1124           ?LINE   482
02D6 E6FC2003     1125           MOV     R12,#0320h
02DA F6FC0000  R  1126           MOV     _OFFSET_L3,R12
                  1127   ; main.c    483         }  
                  1128           ?LINE   483
02DE              1129   _37:
                  1130   ; main.c    484 }
               R  1131           ?SYMB   '',$,102,1
                  1132           ?LINE   484
02DE 0802         1133           ADD     R0,#02h
               R  1134           ?SYMB   '',$,96,0
02E0 DB00         1135           RETS
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:19  Page:  22
main

 LOC CODE        LINE   SOURCELINE

                  1136   _setPhaseChange ENDP
               R  1137           ?SYMB   '',$,17,484
                  1138   ; main.c    485 
                  1139   ; main.c    486 
                  1140   ; main.c    487 // USER CODE END
                  1141   ; main.c    488 
                  1142   MAIN_4_PR       ENDS
                  1143   
                  1144   MAIN_5_NB       SECTION LDAT WORD PUBLIC 'CNEAR'
0000              1145   MAIN_5_NB_ENTRY LABEL   BYTE
0000              1146   _table  LABEL   WORD
0000              1147           DS      2400
                  1148           PUBLIC  _table
                  1149           ?SYMB   '',01200012H,5,287
                  1150           ?SYMB   '',16,47,288
                  1151           ?SYMB   '',0,30,0
                  1152           ?SYMB   '',1199,49,0
               R  1153           ?SYMB   'table',_table,22,287
0960              1154   _rpm    LABEL   WORD
0960              1155           DS      4
                  1156           PUBLIC  _rpm
               R  1157           ?SYMB   'rpm',_rpm,22,10
0964              1158   _velocity       LABEL   WORD
0964              1159           DS      4
                  1160           PUBLIC  _velocity
               R  1161           ?SYMB   'velocity',_velocity,22,10
0968              1162   _rampIndex      LABEL   WORD
0968              1163           DS      2
                  1164           PUBLIC  _rampIndex
               R  1165           ?SYMB   'rampIndex',_rampIndex,22,18
096A              1166   _index  LABEL   WORD
096A              1167           DS      2
                  1168           PUBLIC  _index
               R  1169           ?SYMB   'index',_index,22,18
096C              1170   _OFFSET_L1      LABEL   WORD
096C              1171           DS      2
                  1172           PUBLIC  _OFFSET_L1
               R  1173           ?SYMB   'OFFSET_L1',_OFFSET_L1,22,18
096E              1174   _OFFSET_L3      LABEL   WORD
096E              1175           DS      2
                  1176           PUBLIC  _OFFSET_L3
               R  1177           ?SYMB   'OFFSET_L3',_OFFSET_L3,22,18
0970              1178   _OFFSET_L2      LABEL   WORD
0970              1179           DS      2
                  1180           PUBLIC  _OFFSET_L2
               R  1181           ?SYMB   'OFFSET_L2',_OFFSET_L2,22,18
                  1182   MAIN_5_NB       ENDS
                  1183   
                  1184   MAIN_6_CO       SECTION LDAT WORD PUBLIC 'CROM'
0000              1185   _28     LABEL   WORD
0000 503E2B1B     1186           DW      03E50h,01B2Bh,029A4h,0692Bh
0004 A4292B69    
0008              1187   _29     LABEL   WORD
0008 F03F0000     1188           DW      03FF0h,00h,00h,00h
000C 00000000    
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2021  Time: 15:42:19  Page:  23
main

 LOC CODE        LINE   SOURCELINE

                  1189   MAIN_6_CO       ENDS
                  1190   
                  1191   C166_US SECTION LDAT WORD GLBUSRSTACK 'CUSTACK'
0000              1192           DS      70
                  1193   C166_US ENDS
                  1194   
                  1195   C166_INIT       SECTION PDAT WORD GLOBAL 'CINITROM'
0000 0600         1196           DW      06h
0002 00000000  R  1197           DPPTR   MAIN_ID_NB_ENTRY,MAIN_IR_NB_ENTRY
0006 00000000    
000A 0600         1198           DW      06h
                  1199   C166_INIT       ENDS
                  1200   
                  1201   C166_BSS        SECTION PDAT WORD GLOBAL 'CINITROM'
0000 05000000  R  1202           DW      05h,MAIN_5_NB_ENTRY,0972h
0004 7209        
                  1203   C166_BSS        ENDS
                  1204   
                  1205   $FLOAT(ANSI)
                  1206           EXTERN  _ADC0_vStartSeq0ReqChNum:FAR
                  1207           EXTERN  _CCU62_vInit:FAR
                  1208           EXTERN  _CCU63_vInit:FAR
                  1209           EXTERN  _sin:FAR
                  1210           EXTERN  _SCS_SwitchToHighPrecBandgap:FAR
                  1211           EXTERN  _SCS_StartXtalOsc:FAR
                  1212           EXTERN  _IO_vInit:FAR
                  1213           EXTERN  _GPT2_vInit:FAR
                  1214           EXTERN  _GPT1_vInit:FAR
                  1215           EXTERN  _SCS_SwitchSystemClock:FAR
                  1216           EXTERN  _ADC0_vInit:FAR
                  1217           EXTERN  __mul:FAR
                  1218           EXTERN  __mlf4r:FAR
                  1219           EXTERN  __dvf4r:FAR
                  1220           EXTERN  __cff48r:FAR
                  1221           EXTERN  __store8n:FAR
                  1222           EXTERN  __load8n:FAR
                  1223           EXTERN  __cif28r:FAR
                  1224           EXTERN  __mlf8r:FAR
                  1225           EXTERN  __cuf28r:FAR
                  1226           EXTERN  __adf8r:FAR
                  1227           EXTERN  __cfu82r:FAR
                  1228           EXTERN  __dvf8r:FAR
                  1229           EXTERN  __CSTART:FAR
                  1230           REGDEF  R0-R15
                  1231           END

total errors: 0, warnings: 0

