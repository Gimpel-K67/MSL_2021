TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:28  Page:   1
main

 LOC CODE        LINE   SOURCELINE

                     1   ; TASKING C166/ST10 C compiler v8.7r1 Build 775
                     2   ; options: -e -Id:\programme\tasking\c166 v8.7r1\include -x2 -Bhoeufmknladij -OB
                     3   ;          -OE -zswitch_tabmem_default -zautobitastruct-4 -zautobita-0 -FSC -A1
                     4   ;          -zvolatile_union -O0 -g -newerr -s -i0 -Ms
                     5   $DEBUG
                     6   $NOLOCALS
                     7   $EXTEND2
                     8   $NOMOD166
                     9   $STDNAMES(regsuper10bo.def)
                    10   $EXTMAC
                    11   $CASE
                    12   $NOEXPANDREGBANK
                    13   $MODEL(SMALL)
                    14           NAME    MAIN_C
                    15           ?SYMB   'main.c',32,80,16
                    16           ?SYMB   '',1,82,0
                    17           ?SYMB   '80166',0,84,0
                    18           ?SYMB   '',0,81,0
                    19           ?SYMB   'void',00H,45,1
                    20           ?SYMB   'char',080000H,45,2
                    21           ?SYMB   'unsigned char',080000H,45,3
                    22           ?SYMB   'short',0100000H,45,4
                    23           ?SYMB   'unsigned short',0100000H,45,5
                    24           ?SYMB   'long',0200000H,45,6
                    25           ?SYMB   'unsigned long',0200000H,45,7
                    26           ?SYMB   'float',0200000H,45,10
                    27           ?SYMB   'double',0400000H,45,11
                    28           ?SYMB   'int',0100000H,45,16
                    29           ?SYMB   'unsigned int',0100000H,45,18
                    30           ?SYMB   'bit',010000H,7,256
                    31           ?SYMB   'main.c',0,29,1
                    32           ?SYMB   '',0,86,1
                    33   ; main.c      1 //****************************************************************************
                    34   ; main.c      2 // @Module        Project Settings
                    35   ; main.c      3 // @Filename      MAIN.C
                    36   ; main.c      4 // @Project       DAvE_config.dav
                    37   ; main.c      5 //----------------------------------------------------------------------------
                    38   ; main.c      6 // @Controller    Infineon XE167F-96F66
                    39   ; main.c      7 //
                    40   ; main.c      8 // @Compiler      Tasking Classic
                    41   ; main.c      9 //
                    42   ; main.c     10 // @Codegenerator 2.2
                    43   ; main.c     11 //
                    44   ; main.c     12 // @Description   This file contains the project initialization function.
                    45   ; main.c     13 //
                    46   ; main.c     14 //----------------------------------------------------------------------------
                    47   ; main.c     15 // @Date          27.09.2021 18:18:18
                    48   ; main.c     16 //
                    49   ; main.c     17 //****************************************************************************
                    50   ; main.c     18 
                    51   ; main.c     19 // USER CODE BEGIN (MAIN_General,1)
                    52   ; main.c     20 
                    53   ; main.c     21 // USER CODE END
                    54   ; main.c     22 
                    55   ; main.c     23 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:28  Page:   2
main

 LOC CODE        LINE   SOURCELINE

                    56   ; main.c     24 
                    57   ; main.c     25 //****************************************************************************
                    58   ; main.c     26 // @Project Includes
                    59   ; main.c     27 //****************************************************************************
                    60   ; main.c     28 
                    61   ; main.c     29 #include "MAIN.H"
                    62           ?SYMB   'MAIN.H',0,29,2
                    63           ?SYMB   '',0,86,2
                    64           ?SYMB   'XE16xREGS.H',0,29,3
                    65           ?SYMB   '',0,86,3
                    66           ?SYMB   '',0,86,2
                    67           ?SYMB   'SCS.H',0,29,3
                    68           ?SYMB   '',0,86,3
                    69           ?SYMB   'T$2',0,14,257
                    70           ?SYMB   'SCS_EXTCLK_F_SYS',0,33,257
                    71           ?SYMB   'SCS_EXTCLK_F_OUT',1,33,257
                    72           ?SYMB   'SCS_EXTCLK_F_PLL',2,33,257
                    73           ?SYMB   'SCS_EXTCLK_F_OSC',3,33,257
                    74           ?SYMB   'SCS_EXTCLK_F_WU',4,33,257
                    75           ?SYMB   'SCS_EXTCLK_F_TCK',5,33,257
                    76           ?SYMB   'SCS_EXTCLK_F_OSC_FL',6,33,257
                    77           ?SYMB   'SCS_EXTCLK_F_RTC',8,33,257
                    78           ?SYMB   '',16,16,0
                    79           ?SYMB   'SCS_EXTCLK_Type',257,13,258
                    80           ?SYMB   '',0,86,2
                    81           ?SYMB   'IO.H',0,29,3
                    82           ?SYMB   '',0,86,3
                    83           ?SYMB   '',0,86,2
                    84           ?SYMB   'GPT1.H',0,29,3
                    85           ?SYMB   '',0,86,3
                    86           ?SYMB   '',0,86,2
                    87           ?SYMB   'GPT2.H',0,29,3
                    88           ?SYMB   '',0,86,3
                    89           ?SYMB   '',0,86,2
                    90           ?SYMB   'CC2.H',0,29,3
                    91           ?SYMB   '',0,86,3
                    92           ?SYMB   '',0,86,2
                    93           ?SYMB   'CCU62.H',0,29,3
                    94           ?SYMB   '',0,86,3
                    95           ?SYMB   '',0,86,2
                    96           ?SYMB   'CCU63.H',0,29,3
                    97           ?SYMB   '',0,86,3
                    98           ?SYMB   '',0,86,2
                    99           ?SYMB   'ADC0.H',0,29,3
                   100           ?SYMB   '',0,86,3
                   101           ?SYMB   'ubyte',3,13,259
                   102           ?SYMB   '',0,86,2
                   103           ?SYMB   '',0,86,1
                   104   ; main.c     30 
                   105   ; main.c     31 // USER CODE BEGIN (MAIN_General,2)
                   106   ; main.c     32 #include <math.h>
                   107           ?SYMB   'd:\programme\tasking\c166 v8.7r1\include\math.h',0,29,2
                   108           ?SYMB   '',0,86,2
                   109           ?SYMB   '',0,86,1
                   110   ; main.c     33 // USER CODE END
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:28  Page:   3
main

 LOC CODE        LINE   SOURCELINE

                   111   ; main.c     34 
                   112   ; main.c     35 
                   113   ; main.c     36 //****************************************************************************
                   114   ; main.c     37 // @Macros
                   115   ; main.c     38 //****************************************************************************
                   116   ; main.c     39 
                   117   ; main.c     40 // USER CODE BEGIN (MAIN_General,3)
                   118   ; main.c     41 
                   119   ; main.c     42 // USER CODE END
                   120   ; main.c     43 
                   121   ; main.c     44 
                   122   ; main.c     45 //****************************************************************************
                   123   ; main.c     46 // @Defines
                   124   ; main.c     47 //****************************************************************************
                   125   ; main.c     48 
                   126   ; main.c     49 // USER CODE BEGIN (MAIN_General,4)
                   127   ; main.c     50 
                   128   ; main.c     51 // USER CODE END
                   129   ; main.c     52 
                   130   ; main.c     53 
                   131   ; main.c     54 //****************************************************************************
                   132   ; main.c     55 // @Typedefs
                   133   ; main.c     56 //****************************************************************************
                   134   ; main.c     57 
                   135   ; main.c     58 // USER CODE BEGIN (MAIN_General,5)
                   136   ; main.c     59 
                   137   ; main.c     60 // USER CODE END
                   138   ; main.c     61 
                   139   ; main.c     62 
                   140   ; main.c     63 //****************************************************************************
                   141   ; main.c     64 // @Imported Global Variables
                   142   ; main.c     65 //****************************************************************************
                   143   ; main.c     66 
                   144   ; main.c     67 // USER CODE BEGIN (MAIN_General,6)
                   145   ; main.c     68 
                   146   ; main.c     69 // USER CODE END
                   147   ; main.c     70 
                   148   ; main.c     71 
                   149   ; main.c     72 //****************************************************************************
                   150   ; main.c     73 // @Global Variables
                   151   ; main.c     74 //****************************************************************************
                   152   ; main.c     75 
                   153   ; main.c     76 // USER CODE BEGIN (MAIN_General,7)
                   154   ; main.c     77         unsigned int frequency = 0;
                   155   MAIN_IR_NB      SECTION PDAT WORD PUBLIC 'CINITROM'
0000               156   MAIN_IR_NB_ENTRY        LABEL   BYTE
0000 0000          157           DW      00h
                   158   MAIN_IR_NB      ENDS
                   159   
                   160   MAIN_ID_NB      SECTION LDAT WORD PUBLIC 'CINITIRAM'
0000               161   MAIN_ID_NB_ENTRY        LABEL   BYTE
0000               162   _frequency      LABEL   WORD
0000               163           DS      2
                   164           PUBLIC  _frequency
               R   165           ?SYMB   'frequency',_frequency,22,18
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:28  Page:   4
main

 LOC CODE        LINE   SOURCELINE

                   166   ; main.c     78         const unsigned int ARRAY_SIZE = 1200;
                   167   MAIN_ID_NB      ENDS
                   168   
                   169   MAIN_3_NC       SECTION LDAT WORD PUBLIC 'CNEARROM'
0000               170   _ARRAY_SIZE     LABEL   WORD
0000 B004          171           DW      04B0h
                   172           PUBLIC  _ARRAY_SIZE
               R   173           ?SYMB   'ARRAY_SIZE',_ARRAY_SIZE,22,18
                   174   ; main.c     79         const unsigned int OFFSET_L2 = ARRAY_SIZE/3;
0002               175   _OFFSET_L2      LABEL   WORD
0002 9001          176           DW      0190h
                   177           PUBLIC  _OFFSET_L2
               R   178           ?SYMB   'OFFSET_L2',_OFFSET_L2,22,18
                   179   ; main.c     80         const unsigned int OFFSET_L3 = (2*ARRAY_SIZE)/3;
0004               180   _OFFSET_L3      LABEL   WORD
0004 2003          181           DW      0320h
                   182           PUBLIC  _OFFSET_L3
               R   183           ?SYMB   'OFFSET_L3',_OFFSET_L3,22,18
                   184   ; main.c     81         unsigned int table[ARRAY_SIZE];
                   185   ; main.c     82         unsigned int index;
                   186   ; main.c     83         float pi = 3.14159265359;
                   187   MAIN_3_NC       ENDS
                   188   
                   189   MAIN_IR_NB      SECTION PDAT
0002 4940DB0F      190           DW      04049h,0FDBh
                   191   MAIN_IR_NB      ENDS
                   192   
                   193   MAIN_ID_NB      SECTION LDAT
0002               194   _pi     LABEL   WORD
0002               195           DS      4
                   196           PUBLIC  _pi
               R   197           ?SYMB   'pi',_pi,22,10
                   198   ; main.c     84         volatile unsigned int rampIndex;
                   199   ; main.c     85         //unsigned int ccu62_pr = 1/(frequency * ARRAY_SIZE*0.000000015);
                   200   ; main.c     86 
                   201   ; main.c     87 // USER CODE END
                   202   ; main.c     88 
                   203   ; main.c     89 
                   204   ; main.c     90 //****************************************************************************
                   205   ; main.c     91 // @External Prototypes
                   206   ; main.c     92 //****************************************************************************
                   207   ; main.c     93 
                   208   ; main.c     94 // USER CODE BEGIN (MAIN_General,8)
                   209   ; main.c     95 
                   210   ; main.c     96 // USER CODE END
                   211   ; main.c     97 
                   212   ; main.c     98 
                   213   ; main.c     99 //****************************************************************************
                   214   ; main.c    100 // @Prototypes Of Local Functions
                   215   ; main.c    101 //****************************************************************************
                   216   ; main.c    102 
                   217   ; main.c    103 // USER CODE BEGIN (MAIN_General,9)
                   218   ; main.c    104 void generateTable();
                   219   ; main.c    105 unsigned int calculateMotorFrequency (int frequency);
                   220   ; main.c    106 // USER CODE END
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:28  Page:   5
main

 LOC CODE        LINE   SOURCELINE

                   221   ; main.c    107 
                   222   ; main.c    108 
                   223   ; main.c    109 //****************************************************************************
                   224   ; main.c    110 // @Function      void MAIN_vInit(void) 
                   225   ; main.c    111 //
                   226   ; main.c    112 //----------------------------------------------------------------------------
                   227   ; main.c    113 // @Description   This function initializes the microcontroller.
                   228   ; main.c    114 //
                   229   ; main.c    115 //----------------------------------------------------------------------------
                   230   ; main.c    116 // @Returnvalue   None
                   231   ; main.c    117 //
                   232   ; main.c    118 //----------------------------------------------------------------------------
                   233   ; main.c    119 // @Parameters    None
                   234   ; main.c    120 //
                   235   ; main.c    121 //----------------------------------------------------------------------------
                   236   ; main.c    122 // @Date          27.09.2021
                   237   ; main.c    123 //
                   238   ; main.c    124 //****************************************************************************
                   239   ; main.c    125 
                   240   ; main.c    126 // USER CODE BEGIN (Init,1)
                   241   ; main.c    127 
                   242   ; main.c    128 // USER CODE END
                   243   ; main.c    129 
                   244   ; main.c    130 void MAIN_vInit(void)
                   245   ; main.c    131 {
                   246   MAIN_ID_NB      ENDS
                   247   
                   248   MAIN_4_PR       SECTION CODE WORD PUBLIC 'CPROGRAM'
                   249           ?LINE   131
                   250           PUBLIC  _MAIN_vInit
               R   251           ?SYMB   'MAIN_vInit',_MAIN_vInit,37,1
                   252           ?SYMB   '',131,8,34
                   253           ?SYMB   '',010000H,7,261
                   254           ?SYMB   '',010001H,7,262
                   255           ?SYMB   '',010002H,7,263
                   256           ?SYMB   '',010003H,7,264
                   257           ?SYMB   '',010004H,7,265
                   258           ?SYMB   '',010005H,7,266
                   259           ?SYMB   '',010006H,7,267
                   260           ?SYMB   '',010007H,7,268
                   261           ?SYMB   '',010000H,7,269
                   262           ?SYMB   '',010001H,7,270
                   263           ?SYMB   '',010002H,7,271
                   264           ?SYMB   '',010003H,7,272
                   265           ?SYMB   '',010004H,7,273
                   266           ?SYMB   '',010005H,7,274
                   267           ?SYMB   '',010006H,7,275
                   268           ?SYMB   '',010007H,7,276
                   269           ?SYMB   'T$1',0,40,277
                   270           ?SYMB   'bit0',0,23,261
                   271           ?SYMB   'bit1',1,23,262
                   272           ?SYMB   'bit2',2,23,263
                   273           ?SYMB   'bit3',3,23,264
                   274           ?SYMB   'bit4',4,23,265
                   275           ?SYMB   'bit5',5,23,266
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:28  Page:   6
main

 LOC CODE        LINE   SOURCELINE

                   276           ?SYMB   'bit6',6,23,267
                   277           ?SYMB   'bit7',7,23,268
                   278           ?SYMB   'bit8',8,23,269
                   279           ?SYMB   'bit9',9,23,270
                   280           ?SYMB   'bit10',10,23,271
                   281           ?SYMB   'bit11',11,23,272
                   282           ?SYMB   'bit12',12,23,273
                   283           ?SYMB   'bit13',13,23,274
                   284           ?SYMB   'bit14',14,23,275
                   285           ?SYMB   'bit15',15,23,276
                   286           ?SYMB   '',16,18,0
                   287           ?SYMB   'T_Reg16',277,13,278
                   288   _MAIN_vInit     PROC    FAR
                   289           ?SYMB   '',00H,95,0
                   290   ; Locals:
                   291   ; 
                   292   ; Statics:
                   293   ; 
                   294   ; CSEs:
                   295   ; 
                   296   ; main.c    132   // USER CODE BEGIN (Init,2)
                   297   ; main.c    133 
                   298   ; main.c    134   // USER CODE END
                   299   ; main.c    135 
                   300   ; main.c    136   //   globally disable interrupts
                   301   ; main.c    137   PSW_IEN        =  0;          
                   302           ?LINE   137
0000 E6FC10FF      303           MOV     R12,#0FF10h
0004 A8DC          304           MOV     R13,[R12]
0006 66FDFFF7      305           AND     R13,#0F7FFh
000A B8DC          306           MOV     [R12],R13
                   307   ; main.c    138 
                   308   ; main.c    139 
                   309   ; main.c    140   ///  -----------------------------------------------------------------------
                   310   ; main.c    141   ///  Configuration of the System Clock:
                   311   ; main.c    142   ///  -----------------------------------------------------------------------
                   312   ; main.c    143   ///  - VCO clock used, input clock is connected
                   313   ; main.c    144   ///  - input frequency is 10,00 MHz
                   314   ; main.c    145   ///  - configured system frequency is 66,00 MHz
                   315   ; main.c    146 
                   316   ; main.c    147   MAIN_vUnlockProtecReg();     // unlock write security
                   317           ?LINE   147
000C DA004200  R   318           CALLS   SEG _MAIN_vUnlockProtecReg,_MAIN_vUnlockProtecReg
                   319   ; main.c    148 
                   320   ; main.c    149   MAIN_vChangeFreq();          // load PLL control register
                   321           ?LINE   149
0010 DA00D600  R   322           CALLS   SEG _MAIN_vChangeFreq,_MAIN_vChangeFreq
                   323   ; main.c    150 
                   324   ; main.c    151   //   -----------------------------------------------------------------------
                   325   ; main.c    152   //   Initialization of the Peripherals:
                   326   ; main.c    153   //   -----------------------------------------------------------------------
                   327   ; main.c    154 
                   328   ; main.c    155   //   initializes the Parallel Ports
                   329   ; main.c    156   IO_vInit();
                   330           ?LINE   156
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:28  Page:   7
main

 LOC CODE        LINE   SOURCELINE

0014 DA000000  R   331           CALLS   SEG _IO_vInit,_IO_vInit
                   332   ; main.c    157 
                   333   ; main.c    158   //   initializes the General Purpose Timer Unit (GPT1)
                   334   ; main.c    159   GPT1_vInit();
                   335           ?LINE   159
0018 DA000000  R   336           CALLS   SEG _GPT1_vInit,_GPT1_vInit
                   337   ; main.c    160 
                   338   ; main.c    161   //   initializes the General Purpose Timer Unit (GPT2)
                   339   ; main.c    162   GPT2_vInit();
                   340           ?LINE   162
001C DA000000  R   341           CALLS   SEG _GPT2_vInit,_GPT2_vInit
                   342   ; main.c    163 
                   343   ; main.c    164   //   initializes the Capture / Compare Unit 2 (CAPCOM2)
                   344   ; main.c    165   CC2_vInit();
                   345           ?LINE   165
0020 DA000000  R   346           CALLS   SEG _CC2_vInit,_CC2_vInit
                   347   ; main.c    166 
                   348   ; main.c    167   //   initializes the Capture / Compare Unit 62 (CCU62)
                   349   ; main.c    168   CCU62_vInit();
                   350           ?LINE   168
0024 DA000000  R   351           CALLS   SEG _CCU62_vInit,_CCU62_vInit
                   352   ; main.c    169 
                   353   ; main.c    170   //   initializes the Capture / Compare Unit 63 (CCU63)
                   354   ; main.c    171   CCU63_vInit();
                   355           ?LINE   171
0028 DA000000  R   356           CALLS   SEG _CCU63_vInit,_CCU63_vInit
                   357   ; main.c    172 
                   358   ; main.c    173   //   initializes the Analog / Digital Converter  (ADC0)
                   359   ; main.c    174   ADC0_vInit();
                   360           ?LINE   174
002C DA000000  R   361           CALLS   SEG _ADC0_vInit,_ADC0_vInit
                   362   ; main.c    175 
                   363   ; main.c    176 
                   364   ; main.c    177   //   -----------------------------------------------------------------------
                   365   ; main.c    178   //   Initialization of the Bank Select registers:
                   366   ; main.c    179   //   -----------------------------------------------------------------------
                   367   ; main.c    180 
                   368   ; main.c    181 
                   369   ; main.c    182   // USER CODE BEGIN (Init,3)
                   370   ; main.c    183 
                   371   ; main.c    184   // USER CODE END
                   372   ; main.c    185 
                   373   ; main.c    186   MAIN_vLockProtecReg();       // lock write security
                   374           ?LINE   186
0030 DA007C00  R   375           CALLS   SEG _MAIN_vLockProtecReg,_MAIN_vLockProtecReg
                   376   ; main.c    187 
                   377   ; main.c    188   //   globally enable interrupts
                   378   ; main.c    189   PSW_IEN        =  1;          
                   379           ?LINE   189
0034 E6FC10FF      380           MOV     R12,#0FF10h
0038 A8DC          381           MOV     R13,[R12]
003A 1AFD0808      382           BFLDH   R13,#08h,#08h
003E B8DC          383           MOV     [R12],R13
                   384   ; main.c    190 
                   385   ; main.c    191 } //  End of function MAIN_vInit
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:28  Page:   8
main

 LOC CODE        LINE   SOURCELINE

                   386           ?LINE   191
0040 DB00          387           RETS
                   388   _MAIN_vInit     ENDP
               R   389           ?SYMB   '',$,17,191
                   390   ; main.c    192 
                   391   ; main.c    193 
                   392   ; main.c    194 //****************************************************************************
                   393   ; main.c    195 // @Function      void MAIN_vUnlockProtecReg(void) 
                   394   ; main.c    196 //
                   395   ; main.c    197 //----------------------------------------------------------------------------
                   396   ; main.c    198 // @Description   This function makes it possible to write one protected 
                   397   ; main.c    199 //                register.
                   398   ; main.c    200 //
                   399   ; main.c    201 //----------------------------------------------------------------------------
                   400   ; main.c    202 // @Returnvalue   None
                   401   ; main.c    203 //
                   402   ; main.c    204 //----------------------------------------------------------------------------
                   403   ; main.c    205 // @Parameters    None
                   404   ; main.c    206 //
                   405   ; main.c    207 //----------------------------------------------------------------------------
                   406   ; main.c    208 // @Date          27.09.2021
                   407   ; main.c    209 //
                   408   ; main.c    210 //****************************************************************************
                   409   ; main.c    211 
                   410   ; main.c    212 // USER CODE BEGIN (UnlockProtecReg,1)
                   411   ; main.c    213 
                   412   ; main.c    214 // USER CODE END
                   413   ; main.c    215 
                   414   ; main.c    216 void MAIN_vUnlockProtecReg(void)
                   415   ; main.c    217 {
                   416           ?LINE   217
                   417           PUBLIC  _MAIN_vUnlockProtecReg
               R   418           ?SYMB   'MAIN_vUnlockProtecReg',_MAIN_vUnlockProtecReg,37,1
                   419           ?SYMB   '',217,8,34
                   420           ?SYMB   'uword',18,13,280
                   421   _MAIN_vUnlockProtecReg  PROC    FAR
                   422           ?SYMB   '',00H,95,0
0042 2802          423           SUB     R0,#02h
               R   424           ?SYMB   '',$,96,2
                   425   ; Locals:
                   426   ;     uwPASSWORD = offset 0
                   427   ; 
                   428   ; Statics:
                   429   ; 
                   430   ; CSEs:
                   431   ; 
                   432   ; main.c    218   uword uwPASSWORD;
                   433           ?SYMB   'uwPASSWORD',1,98,280
               R   434           ?SYMB   '-2',$,101,1
                   435   ; main.c    219 
                   436   ; main.c    220     SCU_SLC = 0xAAAA;                   // command 0
                   437           ?LINE   220
0044 E6FCAAAA      438           MOV     R12,#0AAAAh
0048 F6FCC0F0      439           MOV     0F0C0h,R12
                   440   ; main.c    221     SCU_SLC = 0x5554;                   // command 1
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:28  Page:   9
main

 LOC CODE        LINE   SOURCELINE

                   441           ?LINE   221
004C E6FC5455      442           MOV     R12,#05554h
0050 F6FCC0F0      443           MOV     0F0C0h,R12
                   444   ; main.c    222 
                   445   ; main.c    223     uwPASSWORD = SCU_SLS & 0x00FF;
                   446           ?LINE   223
0054 F2FCC2F0      447           MOV     R12,0F0C2h
0058 66FCFF00      448           AND     R12,#0FFh
005C B8C0          449           MOV     [R0],R12
                   450   ; main.c    224     uwPASSWORD = (~uwPASSWORD) & 0x00FF;
                   451           ?LINE   224
005E A8C0          452           MOV     R12,[R0]
0060 91C0          453           CPL     R12
0062 66FCFF00      454           AND     R12,#0FFh
0066 B8C0          455           MOV     [R0],R12
                   456   ; main.c    225 
                   457   ; main.c    226     SCU_SLC = 0x9600 | uwPASSWORD;      // command 2
                   458           ?LINE   226
0068 A8C0          459           MOV     R12,[R0]
006A 76FC0096      460           OR      R12,#09600h
006E F6FCC0F0      461           MOV     0F0C0h,R12
                   462   ; main.c    227     SCU_SLC = 0x0000;                   // command 3
                   463           ?LINE   227
0072 E00C          464           MOV     R12,#00h
0074 F6FCC0F0      465           MOV     0F0C0h,R12
                   466   ; main.c    228 
                   467   ; main.c    229 } //  End of function MAIN_vUnlockProtecReg
               R   468           ?SYMB   '',$,102,1
                   469           ?LINE   229
0078 0802          470           ADD     R0,#02h
               R   471           ?SYMB   '',$,96,0
007A DB00          472           RETS
                   473   _MAIN_vUnlockProtecReg  ENDP
               R   474           ?SYMB   '',$,17,229
                   475   ; main.c    230 
                   476   ; main.c    231 
                   477   ; main.c    232 //****************************************************************************
                   478   ; main.c    233 // @Function      void MAIN_vLockProtecReg(void) 
                   479   ; main.c    234 //
                   480   ; main.c    235 //----------------------------------------------------------------------------
                   481   ; main.c    236 // @Description   This function makes it possible to lock one protected 
                   482   ; main.c    237 //                register.
                   483   ; main.c    238 //
                   484   ; main.c    239 //----------------------------------------------------------------------------
                   485   ; main.c    240 // @Returnvalue   None
                   486   ; main.c    241 //
                   487   ; main.c    242 //----------------------------------------------------------------------------
                   488   ; main.c    243 // @Parameters    None
                   489   ; main.c    244 //
                   490   ; main.c    245 //----------------------------------------------------------------------------
                   491   ; main.c    246 // @Date          27.09.2021
                   492   ; main.c    247 //
                   493   ; main.c    248 //****************************************************************************
                   494   ; main.c    249 
                   495   ; main.c    250 // USER CODE BEGIN (LockProtecReg,1)
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:28  Page:  10
main

 LOC CODE        LINE   SOURCELINE

                   496   ; main.c    251 
                   497   ; main.c    252 // USER CODE END
                   498   ; main.c    253 
                   499   ; main.c    254 void MAIN_vLockProtecReg(void)
                   500   ; main.c    255 {
                   501           ?LINE   255
                   502           PUBLIC  _MAIN_vLockProtecReg
               R   503           ?SYMB   'MAIN_vLockProtecReg',_MAIN_vLockProtecReg,37,1
                   504           ?SYMB   '',255,8,34
                   505   _MAIN_vLockProtecReg    PROC    FAR
                   506           ?SYMB   '',00H,95,0
007C 2802          507           SUB     R0,#02h
               R   508           ?SYMB   '',$,96,2
                   509   ; Locals:
                   510   ;     uwPASSWORD = offset 0
                   511   ; 
                   512   ; Statics:
                   513   ; 
                   514   ; CSEs:
                   515   ; 
                   516   ; main.c    256   uword uwPASSWORD;
                   517           ?SYMB   'uwPASSWORD',1,98,280
               R   518           ?SYMB   '-2',$,101,1
                   519   ; main.c    257 
                   520   ; main.c    258     SCU_SLC = 0xAAAA;                   // command 0
                   521           ?LINE   258
007E E6FCAAAA      522           MOV     R12,#0AAAAh
0082 F6FCC0F0      523           MOV     0F0C0h,R12
                   524   ; main.c    259     SCU_SLC = 0x5554;                   // command 1
                   525           ?LINE   259
0086 E6FC5455      526           MOV     R12,#05554h
008A F6FCC0F0      527           MOV     0F0C0h,R12
                   528   ; main.c    260 
                   529   ; main.c    261     uwPASSWORD = SCU_SLS & 0x00FF;
                   530           ?LINE   261
008E F2FCC2F0      531           MOV     R12,0F0C2h
0092 66FCFF00      532           AND     R12,#0FFh
0096 B8C0          533           MOV     [R0],R12
                   534   ; main.c    262     uwPASSWORD = (~uwPASSWORD) & 0x00FF;
                   535           ?LINE   262
0098 A8C0          536           MOV     R12,[R0]
009A 91C0          537           CPL     R12
009C 66FCFF00      538           AND     R12,#0FFh
00A0 B8C0          539           MOV     [R0],R12
                   540   ; main.c    263 
                   541   ; main.c    264     SCU_SLC = 0x9600 | uwPASSWORD;      // command 2
                   542           ?LINE   264
00A2 A8C0          543           MOV     R12,[R0]
00A4 76FC0096      544           OR      R12,#09600h
00A8 F6FCC0F0      545           MOV     0F0C0h,R12
                   546   ; main.c    265     SCU_SLC = 0x1800;                   // command 3; new PASSWOR is 0x00
                   547           ?LINE   265
00AC E6FC0018      548           MOV     R12,#01800h
00B0 F6FCC0F0      549           MOV     0F0C0h,R12
                   550   ; main.c    266 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:28  Page:  11
main

 LOC CODE        LINE   SOURCELINE

                   551   ; main.c    267     uwPASSWORD = SCU_SLS & 0x00FF;
                   552           ?LINE   267
00B4 F2FCC2F0      553           MOV     R12,0F0C2h
00B8 66FCFF00      554           AND     R12,#0FFh
00BC B8C0          555           MOV     [R0],R12
                   556   ; main.c    268     uwPASSWORD = (~uwPASSWORD) & 0x00FF;
                   557           ?LINE   268
00BE A8C0          558           MOV     R12,[R0]
00C0 91C0          559           CPL     R12
00C2 66FCFF00      560           AND     R12,#0FFh
00C6 B8C0          561           MOV     [R0],R12
                   562   ; main.c    269     SCU_SLC = 0x8E00 | uwPASSWORD;      // command 4
                   563           ?LINE   269
00C8 A8C0          564           MOV     R12,[R0]
00CA 76FC008E      565           OR      R12,#08E00h
00CE F6FCC0F0      566           MOV     0F0C0h,R12
                   567   ; main.c    270 
                   568   ; main.c    271 } //  End of function MAIN_vLockProtecReg
               R   569           ?SYMB   '',$,102,1
                   570           ?LINE   271
00D2 0802          571           ADD     R0,#02h
               R   572           ?SYMB   '',$,96,0
00D4 DB00          573           RETS
                   574   _MAIN_vLockProtecReg    ENDP
               R   575           ?SYMB   '',$,17,271
                   576   ; main.c    272 
                   577   ; main.c    273 
                   578   ; main.c    274 //****************************************************************************
                   579   ; main.c    275 // @Function      void MAIN_vChangeFreq(void) 
                   580   ; main.c    276 //
                   581   ; main.c    277 //----------------------------------------------------------------------------
                   582   ; main.c    278 // @Description   This function is used to select the external crystal and
                   583   ; main.c    279 //                configure the system frequency to 80Mhz/66Mhz.
                   584   ; main.c    280 //
                   585   ; main.c    281 //----------------------------------------------------------------------------
                   586   ; main.c    282 // @Returnvalue   None
                   587   ; main.c    283 //
                   588   ; main.c    284 //----------------------------------------------------------------------------
                   589   ; main.c    285 // @Parameters    None
                   590   ; main.c    286 //
                   591   ; main.c    287 //----------------------------------------------------------------------------
                   592   ; main.c    288 // @Date          27.09.2021
                   593   ; main.c    289 //
                   594   ; main.c    290 //****************************************************************************
                   595   ; main.c    291 
                   596   ; main.c    292 // USER CODE BEGIN (ChangeFreq,1)
                   597   ; main.c    293 
                   598   ; main.c    294 // USER CODE END
                   599   ; main.c    295 
                   600   ; main.c    296 void MAIN_vChangeFreq(void)
                   601   ; main.c    297 {
                   602           ?LINE   297
                   603           PUBLIC  _MAIN_vChangeFreq
               R   604           ?SYMB   'MAIN_vChangeFreq',_MAIN_vChangeFreq,37,1
                   605           ?SYMB   '',297,8,34
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:28  Page:  12
main

 LOC CODE        LINE   SOURCELINE

                   606   _MAIN_vChangeFreq       PROC    FAR
                   607           ?SYMB   '',00H,95,0
                   608   ; Locals:
                   609   ; 
                   610   ; Statics:
                   611   ; 
                   612   ; CSEs:
                   613   ; 
                   614   ; main.c    298   SCS_SwitchToHighPrecBandgap();
                   615           ?LINE   298
00D6 DA000000  R   616           CALLS   SEG _SCS_SwitchToHighPrecBandgap,_SCS_SwitchToHighPrecBandgap
                   617   ; main.c    299 
                   618   ; main.c    300   //For application and internal application resets, the complete PLL configura
                         tion could be avoided
                   619   ; main.c    301   //The entry from application resets and internal application reset is covered
                          in the following differentiation
                   620   ; main.c    302   //in int/ext clock in lock/unlocked state.
                   621   ; main.c    303 
                   622   ; main.c    304   if  ((SCU_PLLSTAT & 0x0004) == 0x0004)             // fR derived from Interna
                         l clock
                   623           ?LINE   304
00DA F2FCBCF0      624           MOV     R12,0F0BCh
00DE 9AFC0720      625           JNB     R12.2,_7
                   626   ; main.c    305         {
                   627   ; main.c    306             //Normal startup state during boot and the clock
                   628   ; main.c    307             //has to be in the next step configured on the external crystal
                   629   ; main.c    308             //use XTAL/VCO, count XTAL clock
                   630   ; main.c    309 
                   631   ; main.c    310             SCS_StartXtalOsc(1);                     // Starts the crystal osci
                         llator
                   632           ?LINE   310
00E2 E01C          633           MOV     R12,#01h
00E4 DA000000  R   634           CALLS   SEG _SCS_StartXtalOsc,_SCS_StartXtalOsc
                   635   ; main.c    311             SCS_SwitchSystemClock(1);                // System clock is increas
                         ed to target speed (80/66 MHz)
                   636           ?LINE   311
00E8 E01C          637           MOV     R12,#01h
00EA DA000000  R   638           CALLS   SEG _SCS_SwitchSystemClock,_SCS_SwitchSystemClock
                   639   ; main.c    312 
                   640   ; main.c    313         }
                   641           ?LINE   313
00EE DB00          642           RETS
00F0               643   _7:
                   644   ; main.c    314 
                   645   ; main.c    315   else                                               // fR derived from externa
                         l crystal clock
                   646   ; main.c    316         {
                   647   ; main.c    317             if ((SCU_PLLSTAT & 0x1009) == 0x1009)    // fR derived from externa
                         l crystal clock + VCO is locked
                   648           ?LINE   317
00F0 F2FCBCF0      649           MOV     R12,0F0BCh
00F4 66FC0910      650           AND     R12,#01009h
00F8 46FC0910      651           CMP     R12,#01009h
00FC 3D02          652           JMPR    cc_NE,_8
                   653   ; main.c    318             {
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:28  Page:  13
main

 LOC CODE        LINE   SOURCELINE

                   654   ; main.c    319                //usually after an application reset where clock need not be con
                         figured again.
                   655   ; main.c    320                //check K2/P/N values and decide whether these values have to be
                          adapted based on application needs.
                   656   ; main.c    321                NOP();
                   657           ?LINE   321
00FE CC00          658           NOP
                   659   ; main.c    322                //usually the PLL losss of Lock TRAP schould be enabled here.
                   660   ; main.c    323             }
                   661           ?LINE   323
0100 0D01          662           JMPR    cc_UC,_9
0102               663   _8:
                   664   ; main.c    324             else                                     //fR derived from external
                          crystal clock + VCO is not locked
                   665   ; main.c    325 
                   666   ; main.c    326             {
                   667   ; main.c    327                //estimate the K1 value and the current frequency
                   668   ; main.c    328                //reduce K2/P/N values in steps so that the frequency
                   669   ; main.c    329                //jumps is limited to 20MHz or factor of 5 whichever is minimum
                   670   ; main.c    330                NOP();
                   671           ?LINE   330
0102 CC00          672           NOP
                   673   ; main.c    331             }
                   674           ?LINE   331
0104               675   _9:
                   676   ; main.c    332 
                   677   ; main.c    333 
                   678   ; main.c    334         }
                   679           ?LINE   334
0104               680   _10:
                   681   ; main.c    335 
                   682   ; main.c    336 } //  End of function MAIN_vChangeFreq
                   683           ?LINE   336
0104 DB00          684           RETS
                   685   _MAIN_vChangeFreq       ENDP
               R   686           ?SYMB   '',$,17,336
                   687   ; main.c    337 
                   688   ; main.c    338 
                   689   ; main.c    339 //****************************************************************************
                   690   ; main.c    340 // @Function      void main(void) 
                   691   ; main.c    341 //
                   692   ; main.c    342 //----------------------------------------------------------------------------
                   693   ; main.c    343 // @Description   This is the main function.
                   694   ; main.c    344 //
                   695   ; main.c    345 //----------------------------------------------------------------------------
                   696   ; main.c    346 // @Returnvalue   None
                   697   ; main.c    347 //
                   698   ; main.c    348 //----------------------------------------------------------------------------
                   699   ; main.c    349 // @Parameters    None
                   700   ; main.c    350 //
                   701   ; main.c    351 //----------------------------------------------------------------------------
                   702   ; main.c    352 // @Date          27.09.2021
                   703   ; main.c    353 //
                   704   ; main.c    354 //****************************************************************************
                   705   ; main.c    355 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:28  Page:  14
main

 LOC CODE        LINE   SOURCELINE

                   706   ; main.c    356 // USER CODE BEGIN (Main,1)
                   707   ; main.c    357 
                   708   ; main.c    358 // USER CODE END
                   709   ; main.c    359 
                   710   ; main.c    360 void main(void)
                   711   ; main.c    361 {
                   712           ?LINE   361
                   713           PUBLIC  _main
               R   714           ?SYMB   'main',_main,37,1
                   715           ?SYMB   '',361,8,34
                   716   _main   PROC    FAR
                   717           ?SYMB   '',00H,95,0
0106 2804          718           SUB     R0,#04h
               R   719           ?SYMB   '',$,96,4
                   720   ; Locals:
                   721   ;     raw = offset 0
                   722   ; 
                   723   ; Statics:
                   724   ; 
                   725   ; CSEs:
                   726   ; 
                   727   ; main.c    362   // USER CODE BEGIN (Main,2)
                   728   ; main.c    363 
                   729   ; main.c    364   // USER CODE END
                   730   ; main.c    365 
                   731   ; main.c    366   MAIN_vInit();
                   732           ?LINE   366
0108 DA000000  R   733           CALLS   SEG _MAIN_vInit,_MAIN_vInit
                   734   ; main.c    367 
                   735   ; main.c    368   // USER CODE BEGIN (Main,3)
                   736   ; main.c    369         generateTable();
                   737           ?LINE   369
010C DA003E02  R   738           CALLS   SEG _generateTable,_generateTable
                   739   ; main.c    370         ADC0_vInit();
                   740           ?LINE   370
0110 DA000000  R   741           CALLS   SEG _ADC0_vInit,_ADC0_vInit
                   742   ; main.c    371         ADC0_vStartSeq0ReqChNum(0,0,1,6);
                   743           ?LINE   371
0114 E00C          744           MOV     R12,#00h
0116 E00D          745           MOV     R13,#00h
0118 E01E          746           MOV     R14,#01h
011A E06F          747           MOV     R15,#06h
011C DA000000  R   748           CALLS   SEG _ADC0_vStartSeq0ReqChNum,_ADC0_vStartSeq0ReqChNum
                   749   ; main.c    372         CCU63_vStartTmr(CCU63_TIMER_12);
                   750           ?LINE   372
0120 E6FCA6EB      751           MOV     R12,#0EBA6h
0124 A8DC          752           MOV     R13,[R12]
0126 1FFD          753           BSET    R13.1
0128 B8DC          754           MOV     [R12],R13
                   755   ; main.c    373         CCU62_vStartTmr(CCU62_TIMER_12);
                   756           ?LINE   373
012A E6FC26EB      757           MOV     R12,#0EB26h
012E A8DC          758           MOV     R13,[R12]
0130 1FFD          759           BSET    R13.1
0132 B8DC          760           MOV     [R12],R13
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:28  Page:  15
main

 LOC CODE        LINE   SOURCELINE

                   761   ; main.c    374         //IO_vSetPin(LED_DBG);
                   762   ; main.c    375         GPT2_vStartTmr(GPT2_TIMER_6);
                   763           ?LINE   375
0134 E6FC48FF      764           MOV     R12,#0FF48h
0138 A8DC          765           MOV     R13,[R12]
013A 0AFD4040      766           BFLDL   R13,#040h,#040h
013E B8DC          767           MOV     [R12],R13
                   768   ; main.c    376     // USER CODE END
                   769   ; main.c    377 
                   770   ; main.c    378   while(1)
                   771           ?LINE   378
0140 0D7B          772           JMPR    cc_UC,_26
0142               773   _19:
                   774   ; main.c    379   {
                   775   ; main.c    380 
                   776   ; main.c    381    // USER CODE BEGIN (Main,4)
                   777   ; main.c    382    if (rampIndex > 150){
                   778           ?LINE   382
0142 F2FC0000  R   779           MOV     R12,_rampIndex
0146 46FC9600      780           CMP     R12,#096h
014A FD2A          781           JMPR    cc_ULE,_20
                   782   ; main.c    383                 unsigned long raw;
               R   783           ?SYMB   '',$,9,383
                   784           ?SYMB   'raw',1,98,7
               R   785           ?SYMB   '-4',$,101,1
                   786   ; main.c    384                 raw = ADC0_uwGetResultData(RESULT_REG_0);
                   787           ?LINE   384
014C F2FCB0E0      788           MOV     R12,0E0B0h
0150 9AFC07C0      789           JNB     R12.12,_27
0154 0D00          790           JMPR    cc_UC,_28
0156               791   _28:
0156 F2FC50E0      792           MOV     R12,0E050h
015A 66FCFF3F      793           AND     R12,#03FFFh
015E 7C2C          794           SHR     R12,#02h
0160 0D01          795           JMPR    cc_UC,_29
0162               796   _27:
0162 E00C          797           MOV     R12,#00h
0164               798   _29:
0164 E00D          799           MOV     R13,#00h
0166 B8C0          800           MOV     [R0],R12
0168 C4D00200      801           MOV     [R0+#02H],R13
                   802   ; main.c    385                 frequency = ((50*raw)/4096);
                   803           ?LINE   385
016C A840          804           MOV     R4,[R0]
016E D4500200      805           MOV     R5,[R0+#02H]
0172 E6FA3200      806           MOV     R10,#032h
0176 E00B          807           MOV     R11,#00h
0178 DA000000  R   808           CALLS   SEG __mul,__mul
017C F0C5          809           MOV     R12,R5
017E 7CC4          810           SHR     R4,#0Ch
0180 7CC5          811           SHR     R5,#0Ch
0182 5C4C          812           SHL     R12,#04h
0184 704C          813           OR      R4,R12
0186 F6F40000  R   814           MOV     _frequency,R4
                   815   ; main.c    386                 CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequency(fre
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:28  Page:  16
main

 LOC CODE        LINE   SOURCELINE

                         quency));
                   816           ?LINE   386
018A F2FC0000  R   817           MOV     R12,_frequency
018E DA00EE02  R   818           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
0192 F6F412EB      819           MOV     0EB12h,R4
                   820   ; main.c    387                 CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   821           ?LINE   387
0196 E6FC26EB      822           MOV     R12,#0EB26h
019A A8DC          823           MOV     R13,[R12]
019C 6FFD          824           BSET    R13.6
019E B8DC          825           MOV     [R12],R13
                   826   ; main.c    388         }
               R   827           ?SYMB   '',$,102,1
               R   828           ?SYMB   '',$,15,388
                   829           ?LINE   388
01A0               830   _20:
                   831   ; main.c    389         if(rampIndex < 50){
                   832           ?LINE   389
01A0 F2FC0000  R   833           MOV     R12,_rampIndex
01A4 46FC3200      834           CMP     R12,#032h
01A8 9D13          835           JMPR    cc_UGE,_21
                   836   ; main.c    390                 frequency = rampIndex;
                   837           ?LINE   390
01AA F2FC0000  R   838           MOV     R12,_rampIndex
01AE F6FC0000  R   839           MOV     _frequency,R12
                   840   ; main.c    391                 CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequency(fre
                         quency));
                   841           ?LINE   391
01B2 F2FC0000  R   842           MOV     R12,_frequency
01B6 DA00EE02  R   843           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
01BA F6F412EB      844           MOV     0EB12h,R4
                   845   ; main.c    392                 CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   846           ?LINE   392
01BE E6FC26EB      847           MOV     R12,#0EB26h
01C2 A8DC          848           MOV     R13,[R12]
01C4 6FFD          849           BSET    R13.6
01C6 B8DC          850           MOV     [R12],R13
                   851   ; main.c    393                 IO_vTogglePin(LED_DBG);
                   852           ?LINE   393
01C8 E6FC0101      853           MOV     R12,#0101h
01CC F6FCE0E9      854           MOV     0E9E0h,R12
                   855   ; main.c    394         } 
                   856           ?LINE   394
01D0               857   _21:
                   858   ; main.c    395         
                   859   ; main.c    396         if(rampIndex < 100 && rampIndex > 50){
                   860           ?LINE   396
01D0 F2FC0000  R   861           MOV     R12,_rampIndex
01D4 46FC6400      862           CMP     R12,#064h
01D8 9D14          863           JMPR    cc_UGE,_22
01DA F2FC0000  R   864           MOV     R12,_rampIndex
01DE 46FC3200      865           CMP     R12,#032h
01E2 FD0F          866           JMPR    cc_ULE,_23
                   867   ; main.c    397                 frequency = 50;
                   868           ?LINE   397
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:28  Page:  17
main

 LOC CODE        LINE   SOURCELINE

01E4 E6FC3200      869           MOV     R12,#032h
01E8 F6FC0000  R   870           MOV     _frequency,R12
                   871   ; main.c    398                 CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequency(fre
                         quency));
                   872           ?LINE   398
01EC F2FC0000  R   873           MOV     R12,_frequency
01F0 DA00EE02  R   874           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
01F4 F6F412EB      875           MOV     0EB12h,R4
                   876   ; main.c    399                 CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   877           ?LINE   399
01F8 E6FC26EB      878           MOV     R12,#0EB26h
01FC A8DC          879           MOV     R13,[R12]
01FE 6FFD          880           BSET    R13.6
0200 B8DC          881           MOV     [R12],R13
                   882   ; main.c    400         }
                   883           ?LINE   400
0202               884   _22:
0202               885   _23:
                   886   ; main.c    401 
                   887   ; main.c    402         if(rampIndex < 150 && rampIndex > 100){
                   888           ?LINE   402
0202 F2FC0000  R   889           MOV     R12,_rampIndex
0206 46FC9600      890           CMP     R12,#096h
020A 9D16          891           JMPR    cc_UGE,_24
020C F2FC0000  R   892           MOV     R12,_rampIndex
0210 46FC6400      893           CMP     R12,#064h
0214 FD11          894           JMPR    cc_ULE,_25
                   895   ; main.c    403                 frequency = (150 - rampIndex);
                   896           ?LINE   403
0216 E6FC9600      897           MOV     R12,#096h
021A 22FC0000  R   898           SUB     R12,_rampIndex
021E F6FC0000  R   899           MOV     _frequency,R12
                   900   ; main.c    404                 CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequency(fre
                         quency));
                   901           ?LINE   404
0222 F2FC0000  R   902           MOV     R12,_frequency
0226 DA00EE02  R   903           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
022A F6F412EB      904           MOV     0EB12h,R4
                   905   ; main.c    405                 CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   906           ?LINE   405
022E E6FC26EB      907           MOV     R12,#0EB26h
0232 A8DC          908           MOV     R13,[R12]
0234 6FFD          909           BSET    R13.6
0236 B8DC          910           MOV     [R12],R13
                   911   ; main.c    406         }
                   912           ?LINE   406
0238               913   _24:
0238               914   _25:
                   915           ?LINE   378
0238               916   _26:
0238 0D84          917           JMPR    cc_UC,_19
                   918   ; main.c    407    // USER CODE END
                   919   ; main.c    408 
                   920   ; main.c    409   }
                   921   ; main.c    410 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:28  Page:  18
main

 LOC CODE        LINE   SOURCELINE

                   922   ; main.c    411 } //  End of function main
                   923           ?LINE   411
023A 0804          924           ADD     R0,#04h
               R   925           ?SYMB   '',$,96,0
023C DB00          926           RETS
                   927   _main   ENDP
               R   928           ?SYMB   '',$,17,411
                   929   ; main.c    412 
                   930   ; main.c    413 
                   931   ; main.c    414 
                   932   ; main.c    415 // USER CODE BEGIN (MAIN_General,10)
                   933   ; main.c    416 void generateTable(){
                   934           ?LINE   416
                   935           PUBLIC  _generateTable
               R   936           ?SYMB   'generateTable',_generateTable,37,1
                   937           ?SYMB   '',416,8,34
                   938   _generateTable  PROC    FAR
                   939           ?SYMB   '',00H,95,0
023E 26F00A00      940           SUB     R0,#0Ah
               R   941           ?SYMB   '',$,96,10
                   942   ; Locals:
                   943   ;     i = offset 0
                   944   ;     stepSize = offset 2
                   945   ; 
                   946   ; Statics:
                   947   ; 
                   948   ; CSEs:
                   949   ; 
                   950   ; main.c    417         double stepSize = (2*pi)/(ARRAY_SIZE);
                   951           ?SYMB   'stepSize',2,98,11
               R   952           ?SYMB   '-8',$,101,2
                   953           ?LINE   417
0242 F2F40000  R   954           MOV     R4,_pi
0246 F2F50000  R   955           MOV     R5,(_pi+2)
024A E6FA0040      956           MOV     R10,#04000h
024E E00B          957           MOV     R11,#00h
0250 DA000000  R   958           CALLS   SEG __mlf4r,__mlf4r
0254 E6FA9644      959           MOV     R10,#04496h
0258 E00B          960           MOV     R11,#00h
025A DA000000  R   961           CALLS   SEG __dvf4r,__dvf4r
025E DA000000  R   962           CALLS   SEG __cff48r,__cff48r
               R   963           ?SYMB   '',$,96,18
0262 F040          964           MOV     R4,R0
0264 06F40A00      965           ADD     R4,#0Ah
0268 DA000000  R   966           CALLS   SEG __store8n,__store8n
026C 06F00800      967           ADD     R0,#08h
               R   968           ?SYMB   '',$,96,10
                   969   ; main.c    418         int i;
                   970           ?SYMB   'i',1,98,16
               R   971           ?SYMB   '-a',$,101,1
                   972   ; main.c    419         for (i = 0; i < ARRAY_SIZE; i++){ 
                   973           ?LINE   419
0270 E00C          974           MOV     R12,#00h
0272 B8C0          975           MOV     [R0],R12
0274 0D35          976           JMPR    cc_UC,_35
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:28  Page:  19
main

 LOC CODE        LINE   SOURCELINE

0276               977   _34:
                   978   ; main.c    420                 table[i] = (unsigned int)((double)((CCU63_T12PR - 140)/2)*sin(s
                         tepSize * i) + (CCU63_T12PR/2));
                   979           ?LINE   420
0276 26F00800      980           SUB     R0,#08h
               R   981           ?SYMB   '',$,96,18
027A E0A4          982           MOV     R4,#0Ah
027C 0040          983           ADD     R4,R0
027E DA000000  R   984           CALLS   SEG __load8n,__load8n
               R   985           ?SYMB   '',$,96,26
0282 D4B01000      986           MOV     R11,[R0+#010H]
0286 F04B          987           MOV     R4,R11
0288 F0CA          988           MOV     R12,R10
028A DA000000  R   989           CALLS   SEG __cif28r,__cif28r
               R   990           ?SYMB   '',$,96,34
028E F0BA          991           MOV     R11,R10
0290 F0AC          992           MOV     R10,R12
0292 DA000000  R   993           CALLS   SEG __mlf8r,__mlf8r
0296 06F00800      994           ADD     R0,#08h
               R   995           ?SYMB   '',$,96,26
029A DA000000  R   996           CALLS   SEG _sin,_sin
029E 06F00800      997           ADD     R0,#08h
               R   998           ?SYMB   '',$,96,18
02A2 F0B4          999           MOV     R11,R4
02A4 F2FA92EB     1000           MOV     R10,0EB92h
02A8 26FA8C00     1001           SUB     R10,#08Ch
02AC 7C1A         1002           SHR     R10,#01h
02AE F04A         1003           MOV     R4,R10
02B0 DA000000  R  1004           CALLS   SEG __cuf28r,__cuf28r
               R  1005           ?SYMB   '',$,96,26
02B4 DA000000  R  1006           CALLS   SEG __mlf8r,__mlf8r
02B8 F0BA         1007           MOV     R11,R10
02BA F2FA92EB     1008           MOV     R10,0EB92h
02BE 7C1A         1009           SHR     R10,#01h
02C0 F04A         1010           MOV     R4,R10
02C2 DA000000  R  1011           CALLS   SEG __cuf28r,__cuf28r
               R  1012           ?SYMB   '',$,96,34
02C6 DA000000  R  1013           CALLS   SEG __adf8r,__adf8r
02CA DA000000  R  1014           CALLS   SEG __cfu82r,__cfu82r
02CE 06F01800     1015           ADD     R0,#018h
               R  1016           ?SYMB   '',$,96,10
02D2 A8C0         1017           MOV     R12,[R0]
02D4 5C1C         1018           SHL     R12,#01h
02D6 C44C0000  R  1019           MOV     [R12+#_table],R4
                  1020           ?LINE   419
02DA A8C0         1021           MOV     R12,[R0]
02DC 08C1         1022           ADD     R12,#01h
02DE B8C0         1023           MOV     [R0],R12
02E0              1024   _35:
02E0 A8C0         1025           MOV     R12,[R0]
02E2 46FCB004     1026           CMP     R12,#04B0h
02E6 8DC7         1027           JMPR    cc_ULT,_34
                  1028   ; main.c    421         }
                  1029   ; main.c    422 }
               R  1030           ?SYMB   '',$,102,1
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:28  Page:  20
main

 LOC CODE        LINE   SOURCELINE

               R  1031           ?SYMB   '',$,102,2
                  1032           ?LINE   422
02E8 06F00A00     1033           ADD     R0,#0Ah
               R  1034           ?SYMB   '',$,96,0
02EC DB00         1035           RETS
                  1036   _generateTable  ENDP
               R  1037           ?SYMB   '',$,17,422
                  1038   ; main.c    423 
                  1039   ; main.c    424 unsigned int calculateMotorFrequency (int _frequency){
                  1040           ?LINE   424
                  1041           PUBLIC  _calculateMotorFrequency
               R  1042           ?SYMB   'calculateMotorFrequency',_calculateMotorFrequency,37,18
                  1043           ?SYMB   '',424,8,34
                  1044   _calculateMotorFrequency        PROC    FAR
                  1045           ?SYMB   '',00H,95,0
02EE 88C0         1046           MOV     [-R0],R12
               R  1047           ?SYMB   '',$,96,2
                  1048   ; Locals:
                  1049   ;     _frequency = offset 0
                  1050   ; 
                  1051   ; Statics:
                  1052   ; 
                  1053   ; CSEs:
                  1054   ; 
                  1055           ?SYMB   '_frequency',1,99,16
               R  1056           ?SYMB   '-2',$,101,1
                  1057   ; main.c    425 if (_frequency < 5){
                  1058           ?LINE   425
02F0 A8C0         1059           MOV     R12,[R0]
02F2 48C5         1060           CMP     R12,#05h
02F4 DD06         1061           JMPR    cc_SGE,_40
                  1062   ; main.c    426         //CCU63_vStopTmr(CCU63_TIMER_12);
                  1063   ; main.c    427         //CCU63_vResetTmr(CCU63_TIMER_12);
                  1064   ; main.c    428         frequency = 5;
                  1065           ?LINE   428
02F6 E05C         1066           MOV     R12,#05h
02F8 F6FC0000  R  1067           MOV     _frequency,R12
                  1068   ; main.c    429         return (0x2B67);
                  1069           ?LINE   429
02FC E6F4672B     1070           MOV     R4,#02B67h
0300 0D1B         1071           JMPR    cc_UC,_41
                  1072   ; main.c    430 }
                  1073           ?LINE   430
0302              1074   _40:
                  1075   ; main.c    431 else {
                  1076   ; main.c    432         return (1/(_frequency * ARRAY_SIZE*0.000000015));
                  1077           ?LINE   432
0302 A8C0         1078           MOV     R12,[R0]
0304 E6FDB004     1079           MOV     R13,#04B0h
0308 1BCD         1080           MULU    R12,R13
030A F2FB0EFE     1081           MOV     R11,MDL
030E F04B         1082           MOV     R4,R11
0310 DA000000  R  1083           CALLS   SEG __cuf28r,__cuf28r
               R  1084           ?SYMB   '',$,96,10
0314 F0BA         1085           MOV     R11,R10
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:28  Page:  21
main

 LOC CODE        LINE   SOURCELINE

0316 E6F40000  R  1086           MOV     R4,#_36
031A DA000000  R  1087           CALLS   SEG __load8n,__load8n
               R  1088           ?SYMB   '',$,96,18
031E DA000000  R  1089           CALLS   SEG __mlf8r,__mlf8r
0322 F0BA         1090           MOV     R11,R10
0324 E6F40000  R  1091           MOV     R4,#_37
0328 DA000000  R  1092           CALLS   SEG __load8n,__load8n
               R  1093           ?SYMB   '',$,96,26
032C DA000000  R  1094           CALLS   SEG __dvf8r,__dvf8r
0330 DA000000  R  1095           CALLS   SEG __cfu82r,__cfu82r
0334 06F01800     1096           ADD     R0,#018h
               R  1097           ?SYMB   '',$,96,2
                  1098   ; main.c    433 }
                  1099   ; main.c    434 }
                  1100           ?LINE   434
0338              1101   _41:
               R  1102           ?SYMB   '',$,102,1
0338 0802         1103           ADD     R0,#02h
               R  1104           ?SYMB   '',$,96,0
033A DB00         1105           RETS
                  1106   _calculateMotorFrequency        ENDP
               R  1107           ?SYMB   '',$,17,434
                  1108   ; main.c    435 
                  1109   ; main.c    436 // USER CODE END
                  1110   ; main.c    437 
                  1111   MAIN_4_PR       ENDS
                  1112   
                  1113   MAIN_5_NB       SECTION LDAT WORD PUBLIC 'CNEAR'
0000              1114   MAIN_5_NB_ENTRY LABEL   BYTE
0000              1115   _table  LABEL   WORD
0000              1116           DS      2400
                  1117           PUBLIC  _table
                  1118           ?SYMB   '',011f0012H,5,286
                  1119           ?SYMB   '',16,47,287
                  1120           ?SYMB   '',0,30,0
                  1121           ?SYMB   '',1199,49,0
               R  1122           ?SYMB   'table',_table,22,286
0960              1123   _rampIndex      LABEL   WORD
0960              1124           DS      2
                  1125           PUBLIC  _rampIndex
               R  1126           ?SYMB   'rampIndex',_rampIndex,22,18
0962              1127   _index  LABEL   WORD
0962              1128           DS      2
                  1129           PUBLIC  _index
               R  1130           ?SYMB   'index',_index,22,18
                  1131   MAIN_5_NB       ENDS
                  1132   
                  1133   MAIN_6_CO       SECTION LDAT WORD PUBLIC 'CROM'
0000              1134   _36     LABEL   WORD
0000 503E2B1B     1135           DW      03E50h,01B2Bh,029A4h,0692Bh
0004 A4292B69    
0008              1136   _37     LABEL   WORD
0008 F03F0000     1137           DW      03FF0h,00h,00h,00h
000C 00000000    
                  1138   MAIN_6_CO       ENDS
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 27 2021  Time: 18:18:28  Page:  22
main

 LOC CODE        LINE   SOURCELINE

                  1139   
                  1140   C166_US SECTION LDAT WORD GLBUSRSTACK 'CUSTACK'
0000              1141           DS      68
                  1142   C166_US ENDS
                  1143   
                  1144   C166_INIT       SECTION PDAT WORD GLOBAL 'CINITROM'
0000 0600         1145           DW      06h
0002 00000000  R  1146           DPPTR   MAIN_ID_NB_ENTRY,MAIN_IR_NB_ENTRY
0006 00000000    
000A 0600         1147           DW      06h
                  1148   C166_INIT       ENDS
                  1149   
                  1150   C166_BSS        SECTION PDAT WORD GLOBAL 'CINITROM'
0000 05000000  R  1151           DW      05h,MAIN_5_NB_ENTRY,0964h
0004 6409        
                  1152   C166_BSS        ENDS
                  1153   
                  1154   $FLOAT(ANSI)
                  1155           EXTERN  _ADC0_vStartSeq0ReqChNum:FAR
                  1156           EXTERN  _CCU62_vInit:FAR
                  1157           EXTERN  _CC2_vInit:FAR
                  1158           EXTERN  _CCU63_vInit:FAR
                  1159           EXTERN  _sin:FAR
                  1160           EXTERN  _SCS_SwitchToHighPrecBandgap:FAR
                  1161           EXTERN  _SCS_StartXtalOsc:FAR
                  1162           EXTERN  _IO_vInit:FAR
                  1163           EXTERN  _GPT2_vInit:FAR
                  1164           EXTERN  _GPT1_vInit:FAR
                  1165           EXTERN  _SCS_SwitchSystemClock:FAR
                  1166           EXTERN  _ADC0_vInit:FAR
                  1167           EXTERN  __mul:FAR
                  1168           EXTERN  __mlf4r:FAR
                  1169           EXTERN  __dvf4r:FAR
                  1170           EXTERN  __cff48r:FAR
                  1171           EXTERN  __store8n:FAR
                  1172           EXTERN  __load8n:FAR
                  1173           EXTERN  __cif28r:FAR
                  1174           EXTERN  __mlf8r:FAR
                  1175           EXTERN  __cuf28r:FAR
                  1176           EXTERN  __adf8r:FAR
                  1177           EXTERN  __cfu82r:FAR
                  1178           EXTERN  __dvf8r:FAR
                  1179           EXTERN  __CSTART:FAR
                  1180           REGDEF  R0-R15
                  1181           END

total errors: 0, warnings: 0

