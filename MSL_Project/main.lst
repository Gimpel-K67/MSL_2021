TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 24 2021  Time: 15:48:39  Page:   1
main

 LOC CODE        LINE   SOURCELINE

                     1   ; TASKING C166/ST10 C compiler v8.7r1 Build 775
                     2   ; options: -e -Id:\programme\tasking\c166 v8.7r1\include -x2 -Bhoeufmknladij -OB
                     3   ;          -OE -zswitch_tabmem_default -zautobitastruct-4 -zautobita-0 -FSC -A1
                     4   ;          -zvolatile_union -O0 -g -newerr -s -i0 -Ms
                     5   $DEBUG
                     6   $NOLOCALS
                     7   $EXTEND2
                     8   $NOMOD166
                     9   $STDNAMES(regsuper10bo.def)
                    10   $EXTMAC
                    11   $CASE
                    12   $NOEXPANDREGBANK
                    13   $MODEL(SMALL)
                    14           NAME    MAIN_C
                    15           ?SYMB   'main.c',32,80,16
                    16           ?SYMB   '',1,82,0
                    17           ?SYMB   '80166',0,84,0
                    18           ?SYMB   '',0,81,0
                    19           ?SYMB   'void',00H,45,1
                    20           ?SYMB   'char',080000H,45,2
                    21           ?SYMB   'unsigned char',080000H,45,3
                    22           ?SYMB   'short',0100000H,45,4
                    23           ?SYMB   'unsigned short',0100000H,45,5
                    24           ?SYMB   'long',0200000H,45,6
                    25           ?SYMB   'unsigned long',0200000H,45,7
                    26           ?SYMB   'float',0200000H,45,10
                    27           ?SYMB   'double',0400000H,45,11
                    28           ?SYMB   'int',0100000H,45,16
                    29           ?SYMB   'unsigned int',0100000H,45,18
                    30           ?SYMB   'bit',010000H,7,256
                    31           ?SYMB   'main.c',0,29,1
                    32           ?SYMB   '',0,86,1
                    33   ; main.c      1 //****************************************************************************
                    34   ; main.c      2 // @Module        Project Settings
                    35   ; main.c      3 // @Filename      MAIN.C
                    36   ; main.c      4 // @Project       DAvE_config.dav
                    37   ; main.c      5 //----------------------------------------------------------------------------
                    38   ; main.c      6 // @Controller    Infineon XE167F-96F66
                    39   ; main.c      7 //
                    40   ; main.c      8 // @Compiler      Tasking Classic
                    41   ; main.c      9 //
                    42   ; main.c     10 // @Codegenerator 2.2
                    43   ; main.c     11 //
                    44   ; main.c     12 // @Description   This file contains the project initialization function.
                    45   ; main.c     13 //
                    46   ; main.c     14 //----------------------------------------------------------------------------
                    47   ; main.c     15 // @Date          24.09.2021 15:34:14
                    48   ; main.c     16 //
                    49   ; main.c     17 //****************************************************************************
                    50   ; main.c     18 
                    51   ; main.c     19 // USER CODE BEGIN (MAIN_General,1)
                    52   ; main.c     20 
                    53   ; main.c     21 // USER CODE END
                    54   ; main.c     22 
                    55   ; main.c     23 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 24 2021  Time: 15:48:39  Page:   2
main

 LOC CODE        LINE   SOURCELINE

                    56   ; main.c     24 
                    57   ; main.c     25 //****************************************************************************
                    58   ; main.c     26 // @Project Includes
                    59   ; main.c     27 //****************************************************************************
                    60   ; main.c     28 
                    61   ; main.c     29 #include "MAIN.H"
                    62           ?SYMB   'MAIN.H',0,29,2
                    63           ?SYMB   '',0,86,2
                    64           ?SYMB   'XE16xREGS.H',0,29,3
                    65           ?SYMB   '',0,86,3
                    66           ?SYMB   '',0,86,2
                    67           ?SYMB   'SCS.H',0,29,3
                    68           ?SYMB   '',0,86,3
                    69           ?SYMB   'T$2',0,14,257
                    70           ?SYMB   'SCS_EXTCLK_F_SYS',0,33,257
                    71           ?SYMB   'SCS_EXTCLK_F_OUT',1,33,257
                    72           ?SYMB   'SCS_EXTCLK_F_PLL',2,33,257
                    73           ?SYMB   'SCS_EXTCLK_F_OSC',3,33,257
                    74           ?SYMB   'SCS_EXTCLK_F_WU',4,33,257
                    75           ?SYMB   'SCS_EXTCLK_F_TCK',5,33,257
                    76           ?SYMB   'SCS_EXTCLK_F_OSC_FL',6,33,257
                    77           ?SYMB   'SCS_EXTCLK_F_RTC',8,33,257
                    78           ?SYMB   '',16,16,0
                    79           ?SYMB   'SCS_EXTCLK_Type',257,13,258
                    80           ?SYMB   '',0,86,2
                    81           ?SYMB   'IO.H',0,29,3
                    82           ?SYMB   '',0,86,3
                    83           ?SYMB   '',0,86,2
                    84           ?SYMB   'GPT1.H',0,29,3
                    85           ?SYMB   '',0,86,3
                    86           ?SYMB   '',0,86,2
                    87           ?SYMB   'GPT2.H',0,29,3
                    88           ?SYMB   '',0,86,3
                    89           ?SYMB   '',0,86,2
                    90           ?SYMB   'CC2.H',0,29,3
                    91           ?SYMB   '',0,86,3
                    92           ?SYMB   '',0,86,2
                    93           ?SYMB   'CCU62.H',0,29,3
                    94           ?SYMB   '',0,86,3
                    95           ?SYMB   '',0,86,2
                    96           ?SYMB   'CCU63.H',0,29,3
                    97           ?SYMB   '',0,86,3
                    98           ?SYMB   '',0,86,2
                    99           ?SYMB   '',0,86,1
                   100   ; main.c     30 
                   101   ; main.c     31 // USER CODE BEGIN (MAIN_General,2)
                   102   ; main.c     32 #include <math.h>
                   103           ?SYMB   'd:\programme\tasking\c166 v8.7r1\include\math.h',0,29,2
                   104           ?SYMB   '',0,86,2
                   105           ?SYMB   '',0,86,1
                   106   ; main.c     33 // USER CODE END
                   107   ; main.c     34 
                   108   ; main.c     35 
                   109   ; main.c     36 //****************************************************************************
                   110   ; main.c     37 // @Macros
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 24 2021  Time: 15:48:39  Page:   3
main

 LOC CODE        LINE   SOURCELINE

                   111   ; main.c     38 //****************************************************************************
                   112   ; main.c     39 
                   113   ; main.c     40 // USER CODE BEGIN (MAIN_General,3)
                   114   ; main.c     41 
                   115   ; main.c     42 // USER CODE END
                   116   ; main.c     43 
                   117   ; main.c     44 
                   118   ; main.c     45 //****************************************************************************
                   119   ; main.c     46 // @Defines
                   120   ; main.c     47 //****************************************************************************
                   121   ; main.c     48 
                   122   ; main.c     49 // USER CODE BEGIN (MAIN_General,4)
                   123   ; main.c     50 
                   124   ; main.c     51 // USER CODE END
                   125   ; main.c     52 
                   126   ; main.c     53 
                   127   ; main.c     54 //****************************************************************************
                   128   ; main.c     55 // @Typedefs
                   129   ; main.c     56 //****************************************************************************
                   130   ; main.c     57 
                   131   ; main.c     58 // USER CODE BEGIN (MAIN_General,5)
                   132   ; main.c     59 
                   133   ; main.c     60 // USER CODE END
                   134   ; main.c     61 
                   135   ; main.c     62 
                   136   ; main.c     63 //****************************************************************************
                   137   ; main.c     64 // @Imported Global Variables
                   138   ; main.c     65 //****************************************************************************
                   139   ; main.c     66 
                   140   ; main.c     67 // USER CODE BEGIN (MAIN_General,6)
                   141   ; main.c     68 
                   142   ; main.c     69 // USER CODE END
                   143   ; main.c     70 
                   144   ; main.c     71 
                   145   ; main.c     72 //****************************************************************************
                   146   ; main.c     73 // @Global Variables
                   147   ; main.c     74 //****************************************************************************
                   148   ; main.c     75 
                   149   ; main.c     76 // USER CODE BEGIN (MAIN_General,7)
                   150   ; main.c     77         const unsigned int ARRAY_SIZE = 600;
                   151   MAIN_1_NC       SECTION LDAT WORD PUBLIC 'CNEARROM'
0000               152   _ARRAY_SIZE     LABEL   WORD
0000 5802          153           DW      0258h
                   154           PUBLIC  _ARRAY_SIZE
               R   155           ?SYMB   'ARRAY_SIZE',_ARRAY_SIZE,22,18
                   156   ; main.c     78         const unsigned int OFFSET_L2 = ARRAY_SIZE/3;
0002               157   _OFFSET_L2      LABEL   WORD
0002 C800          158           DW      0C8h
                   159           PUBLIC  _OFFSET_L2
               R   160           ?SYMB   'OFFSET_L2',_OFFSET_L2,22,18
                   161   ; main.c     79         const unsigned int OFFSET_L3 = (2*ARRAY_SIZE)/3;
0004               162   _OFFSET_L3      LABEL   WORD
0004 9001          163           DW      0190h
                   164           PUBLIC  _OFFSET_L3
               R   165           ?SYMB   'OFFSET_L3',_OFFSET_L3,22,18
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 24 2021  Time: 15:48:39  Page:   4
main

 LOC CODE        LINE   SOURCELINE

                   166   ; main.c     80         unsigned int table[ARRAY_SIZE];
                   167   ; main.c     81         unsigned int index;
                   168   ; main.c     82         float pi = 3.14159265359;
                   169   MAIN_1_NC       ENDS
                   170   
                   171   MAIN_IR_NB      SECTION PDAT WORD PUBLIC 'CINITROM'
0000               172   MAIN_IR_NB_ENTRY        LABEL   BYTE
0000 4940DB0F      173           DW      04049h,0FDBh
                   174   MAIN_IR_NB      ENDS
                   175   
                   176   MAIN_ID_NB      SECTION LDAT WORD PUBLIC 'CINITIRAM'
0000               177   MAIN_ID_NB_ENTRY        LABEL   BYTE
0000               178   _pi     LABEL   WORD
0000               179           DS      4
                   180           PUBLIC  _pi
               R   181           ?SYMB   'pi',_pi,22,10
                   182   ; main.c     83 // USER CODE END
                   183   ; main.c     84 
                   184   ; main.c     85 
                   185   ; main.c     86 //****************************************************************************
                   186   ; main.c     87 // @External Prototypes
                   187   ; main.c     88 //****************************************************************************
                   188   ; main.c     89 
                   189   ; main.c     90 // USER CODE BEGIN (MAIN_General,8)
                   190   ; main.c     91 
                   191   ; main.c     92 // USER CODE END
                   192   ; main.c     93 
                   193   ; main.c     94 
                   194   ; main.c     95 //****************************************************************************
                   195   ; main.c     96 // @Prototypes Of Local Functions
                   196   ; main.c     97 //****************************************************************************
                   197   ; main.c     98 
                   198   ; main.c     99 // USER CODE BEGIN (MAIN_General,9)
                   199   ; main.c    100 void generateTable();
                   200   ; main.c    101 // USER CODE END
                   201   ; main.c    102 
                   202   ; main.c    103 
                   203   ; main.c    104 //****************************************************************************
                   204   ; main.c    105 // @Function      void MAIN_vInit(void) 
                   205   ; main.c    106 //
                   206   ; main.c    107 //----------------------------------------------------------------------------
                   207   ; main.c    108 // @Description   This function initializes the microcontroller.
                   208   ; main.c    109 //
                   209   ; main.c    110 //----------------------------------------------------------------------------
                   210   ; main.c    111 // @Returnvalue   None
                   211   ; main.c    112 //
                   212   ; main.c    113 //----------------------------------------------------------------------------
                   213   ; main.c    114 // @Parameters    None
                   214   ; main.c    115 //
                   215   ; main.c    116 //----------------------------------------------------------------------------
                   216   ; main.c    117 // @Date          24.09.2021
                   217   ; main.c    118 //
                   218   ; main.c    119 //****************************************************************************
                   219   ; main.c    120 
                   220   ; main.c    121 // USER CODE BEGIN (Init,1)
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 24 2021  Time: 15:48:39  Page:   5
main

 LOC CODE        LINE   SOURCELINE

                   221   ; main.c    122 
                   222   ; main.c    123 // USER CODE END
                   223   ; main.c    124 
                   224   ; main.c    125 void MAIN_vInit(void)
                   225   ; main.c    126 {
                   226   MAIN_ID_NB      ENDS
                   227   
                   228   MAIN_4_PR       SECTION CODE WORD PUBLIC 'CPROGRAM'
                   229           ?LINE   126
                   230           PUBLIC  _MAIN_vInit
               R   231           ?SYMB   'MAIN_vInit',_MAIN_vInit,37,1
                   232           ?SYMB   '',126,8,34
                   233           ?SYMB   '',010000H,7,260
                   234           ?SYMB   '',010001H,7,261
                   235           ?SYMB   '',010002H,7,262
                   236           ?SYMB   '',010003H,7,263
                   237           ?SYMB   '',010004H,7,264
                   238           ?SYMB   '',010005H,7,265
                   239           ?SYMB   '',010006H,7,266
                   240           ?SYMB   '',010007H,7,267
                   241           ?SYMB   '',010000H,7,268
                   242           ?SYMB   '',010001H,7,269
                   243           ?SYMB   '',010002H,7,270
                   244           ?SYMB   '',010003H,7,271
                   245           ?SYMB   '',010004H,7,272
                   246           ?SYMB   '',010005H,7,273
                   247           ?SYMB   '',010006H,7,274
                   248           ?SYMB   '',010007H,7,275
                   249           ?SYMB   'T$1',0,40,276
                   250           ?SYMB   'bit0',0,23,260
                   251           ?SYMB   'bit1',1,23,261
                   252           ?SYMB   'bit2',2,23,262
                   253           ?SYMB   'bit3',3,23,263
                   254           ?SYMB   'bit4',4,23,264
                   255           ?SYMB   'bit5',5,23,265
                   256           ?SYMB   'bit6',6,23,266
                   257           ?SYMB   'bit7',7,23,267
                   258           ?SYMB   'bit8',8,23,268
                   259           ?SYMB   'bit9',9,23,269
                   260           ?SYMB   'bit10',10,23,270
                   261           ?SYMB   'bit11',11,23,271
                   262           ?SYMB   'bit12',12,23,272
                   263           ?SYMB   'bit13',13,23,273
                   264           ?SYMB   'bit14',14,23,274
                   265           ?SYMB   'bit15',15,23,275
                   266           ?SYMB   '',16,18,0
                   267           ?SYMB   'T_Reg16',276,13,277
                   268   _MAIN_vInit     PROC    FAR
                   269           ?SYMB   '',00H,95,0
                   270   ; Locals:
                   271   ; 
                   272   ; Statics:
                   273   ; 
                   274   ; CSEs:
                   275   ; 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 24 2021  Time: 15:48:39  Page:   6
main

 LOC CODE        LINE   SOURCELINE

                   276   ; main.c    127   // USER CODE BEGIN (Init,2)
                   277   ; main.c    128 
                   278   ; main.c    129   // USER CODE END
                   279   ; main.c    130 
                   280   ; main.c    131   //   globally disable interrupts
                   281   ; main.c    132   PSW_IEN        =  0;          
                   282           ?LINE   132
0000 E6FC10FF      283           MOV     R12,#0FF10h
0004 A8DC          284           MOV     R13,[R12]
0006 66FDFFF7      285           AND     R13,#0F7FFh
000A B8DC          286           MOV     [R12],R13
                   287   ; main.c    133 
                   288   ; main.c    134 
                   289   ; main.c    135   ///  -----------------------------------------------------------------------
                   290   ; main.c    136   ///  Configuration of the System Clock:
                   291   ; main.c    137   ///  -----------------------------------------------------------------------
                   292   ; main.c    138   ///  - VCO clock used, input clock is connected
                   293   ; main.c    139   ///  - input frequency is 10,00 MHz
                   294   ; main.c    140   ///  - configured system frequency is 66,00 MHz
                   295   ; main.c    141 
                   296   ; main.c    142   MAIN_vUnlockProtecReg();     // unlock write security
                   297           ?LINE   142
000C DA003E00  R   298           CALLS   SEG _MAIN_vUnlockProtecReg,_MAIN_vUnlockProtecReg
                   299   ; main.c    143 
                   300   ; main.c    144   MAIN_vChangeFreq();          // load PLL control register
                   301           ?LINE   144
0010 DA00D200  R   302           CALLS   SEG _MAIN_vChangeFreq,_MAIN_vChangeFreq
                   303   ; main.c    145 
                   304   ; main.c    146   //   -----------------------------------------------------------------------
                   305   ; main.c    147   //   Initialization of the Peripherals:
                   306   ; main.c    148   //   -----------------------------------------------------------------------
                   307   ; main.c    149 
                   308   ; main.c    150   //   initializes the Parallel Ports
                   309   ; main.c    151   IO_vInit();
                   310           ?LINE   151
0014 DA000000  R   311           CALLS   SEG _IO_vInit,_IO_vInit
                   312   ; main.c    152 
                   313   ; main.c    153   //   initializes the General Purpose Timer Unit (GPT1)
                   314   ; main.c    154   GPT1_vInit();
                   315           ?LINE   154
0018 DA000000  R   316           CALLS   SEG _GPT1_vInit,_GPT1_vInit
                   317   ; main.c    155 
                   318   ; main.c    156   //   initializes the General Purpose Timer Unit (GPT2)
                   319   ; main.c    157   GPT2_vInit();
                   320           ?LINE   157
001C DA000000  R   321           CALLS   SEG _GPT2_vInit,_GPT2_vInit
                   322   ; main.c    158 
                   323   ; main.c    159   //   initializes the Capture / Compare Unit 2 (CAPCOM2)
                   324   ; main.c    160   CC2_vInit();
                   325           ?LINE   160
0020 DA000000  R   326           CALLS   SEG _CC2_vInit,_CC2_vInit
                   327   ; main.c    161 
                   328   ; main.c    162   //   initializes the Capture / Compare Unit 62 (CCU62)
                   329   ; main.c    163   CCU62_vInit();
                   330           ?LINE   163
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 24 2021  Time: 15:48:39  Page:   7
main

 LOC CODE        LINE   SOURCELINE

0024 DA000000  R   331           CALLS   SEG _CCU62_vInit,_CCU62_vInit
                   332   ; main.c    164 
                   333   ; main.c    165   //   initializes the Capture / Compare Unit 63 (CCU63)
                   334   ; main.c    166   CCU63_vInit();
                   335           ?LINE   166
0028 DA000000  R   336           CALLS   SEG _CCU63_vInit,_CCU63_vInit
                   337   ; main.c    167 
                   338   ; main.c    168 
                   339   ; main.c    169   //   -----------------------------------------------------------------------
                   340   ; main.c    170   //   Initialization of the Bank Select registers:
                   341   ; main.c    171   //   -----------------------------------------------------------------------
                   342   ; main.c    172 
                   343   ; main.c    173 
                   344   ; main.c    174   // USER CODE BEGIN (Init,3)
                   345   ; main.c    175 
                   346   ; main.c    176   // USER CODE END
                   347   ; main.c    177 
                   348   ; main.c    178   MAIN_vLockProtecReg();       // lock write security
                   349           ?LINE   178
002C DA007800  R   350           CALLS   SEG _MAIN_vLockProtecReg,_MAIN_vLockProtecReg
                   351   ; main.c    179 
                   352   ; main.c    180   //   globally enable interrupts
                   353   ; main.c    181   PSW_IEN        =  1;          
                   354           ?LINE   181
0030 E6FC10FF      355           MOV     R12,#0FF10h
0034 A8DC          356           MOV     R13,[R12]
0036 1AFD0808      357           BFLDH   R13,#08h,#08h
003A B8DC          358           MOV     [R12],R13
                   359   ; main.c    182 
                   360   ; main.c    183 } //  End of function MAIN_vInit
                   361           ?LINE   183
003C DB00          362           RETS
                   363   _MAIN_vInit     ENDP
               R   364           ?SYMB   '',$,17,183
                   365   ; main.c    184 
                   366   ; main.c    185 
                   367   ; main.c    186 //****************************************************************************
                   368   ; main.c    187 // @Function      void MAIN_vUnlockProtecReg(void) 
                   369   ; main.c    188 //
                   370   ; main.c    189 //----------------------------------------------------------------------------
                   371   ; main.c    190 // @Description   This function makes it possible to write one protected 
                   372   ; main.c    191 //                register.
                   373   ; main.c    192 //
                   374   ; main.c    193 //----------------------------------------------------------------------------
                   375   ; main.c    194 // @Returnvalue   None
                   376   ; main.c    195 //
                   377   ; main.c    196 //----------------------------------------------------------------------------
                   378   ; main.c    197 // @Parameters    None
                   379   ; main.c    198 //
                   380   ; main.c    199 //----------------------------------------------------------------------------
                   381   ; main.c    200 // @Date          24.09.2021
                   382   ; main.c    201 //
                   383   ; main.c    202 //****************************************************************************
                   384   ; main.c    203 
                   385   ; main.c    204 // USER CODE BEGIN (UnlockProtecReg,1)
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 24 2021  Time: 15:48:39  Page:   8
main

 LOC CODE        LINE   SOURCELINE

                   386   ; main.c    205 
                   387   ; main.c    206 // USER CODE END
                   388   ; main.c    207 
                   389   ; main.c    208 void MAIN_vUnlockProtecReg(void)
                   390   ; main.c    209 {
                   391           ?LINE   209
                   392           PUBLIC  _MAIN_vUnlockProtecReg
               R   393           ?SYMB   'MAIN_vUnlockProtecReg',_MAIN_vUnlockProtecReg,37,1
                   394           ?SYMB   '',209,8,34
                   395           ?SYMB   'uword',18,13,279
                   396   _MAIN_vUnlockProtecReg  PROC    FAR
                   397           ?SYMB   '',00H,95,0
003E 2802          398           SUB     R0,#02h
               R   399           ?SYMB   '',$,96,2
                   400   ; Locals:
                   401   ;     uwPASSWORD = offset 0
                   402   ; 
                   403   ; Statics:
                   404   ; 
                   405   ; CSEs:
                   406   ; 
                   407   ; main.c    210   uword uwPASSWORD;
                   408           ?SYMB   'uwPASSWORD',1,98,279
               R   409           ?SYMB   '-2',$,101,1
                   410   ; main.c    211 
                   411   ; main.c    212     SCU_SLC = 0xAAAA;                   // command 0
                   412           ?LINE   212
0040 E6FCAAAA      413           MOV     R12,#0AAAAh
0044 F6FCC0F0      414           MOV     0F0C0h,R12
                   415   ; main.c    213     SCU_SLC = 0x5554;                   // command 1
                   416           ?LINE   213
0048 E6FC5455      417           MOV     R12,#05554h
004C F6FCC0F0      418           MOV     0F0C0h,R12
                   419   ; main.c    214 
                   420   ; main.c    215     uwPASSWORD = SCU_SLS & 0x00FF;
                   421           ?LINE   215
0050 F2FCC2F0      422           MOV     R12,0F0C2h
0054 66FCFF00      423           AND     R12,#0FFh
0058 B8C0          424           MOV     [R0],R12
                   425   ; main.c    216     uwPASSWORD = (~uwPASSWORD) & 0x00FF;
                   426           ?LINE   216
005A A8C0          427           MOV     R12,[R0]
005C 91C0          428           CPL     R12
005E 66FCFF00      429           AND     R12,#0FFh
0062 B8C0          430           MOV     [R0],R12
                   431   ; main.c    217 
                   432   ; main.c    218     SCU_SLC = 0x9600 | uwPASSWORD;      // command 2
                   433           ?LINE   218
0064 A8C0          434           MOV     R12,[R0]
0066 76FC0096      435           OR      R12,#09600h
006A F6FCC0F0      436           MOV     0F0C0h,R12
                   437   ; main.c    219     SCU_SLC = 0x0000;                   // command 3
                   438           ?LINE   219
006E E00C          439           MOV     R12,#00h
0070 F6FCC0F0      440           MOV     0F0C0h,R12
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 24 2021  Time: 15:48:39  Page:   9
main

 LOC CODE        LINE   SOURCELINE

                   441   ; main.c    220 
                   442   ; main.c    221 } //  End of function MAIN_vUnlockProtecReg
               R   443           ?SYMB   '',$,102,1
                   444           ?LINE   221
0074 0802          445           ADD     R0,#02h
               R   446           ?SYMB   '',$,96,0
0076 DB00          447           RETS
                   448   _MAIN_vUnlockProtecReg  ENDP
               R   449           ?SYMB   '',$,17,221
                   450   ; main.c    222 
                   451   ; main.c    223 
                   452   ; main.c    224 //****************************************************************************
                   453   ; main.c    225 // @Function      void MAIN_vLockProtecReg(void) 
                   454   ; main.c    226 //
                   455   ; main.c    227 //----------------------------------------------------------------------------
                   456   ; main.c    228 // @Description   This function makes it possible to lock one protected 
                   457   ; main.c    229 //                register.
                   458   ; main.c    230 //
                   459   ; main.c    231 //----------------------------------------------------------------------------
                   460   ; main.c    232 // @Returnvalue   None
                   461   ; main.c    233 //
                   462   ; main.c    234 //----------------------------------------------------------------------------
                   463   ; main.c    235 // @Parameters    None
                   464   ; main.c    236 //
                   465   ; main.c    237 //----------------------------------------------------------------------------
                   466   ; main.c    238 // @Date          24.09.2021
                   467   ; main.c    239 //
                   468   ; main.c    240 //****************************************************************************
                   469   ; main.c    241 
                   470   ; main.c    242 // USER CODE BEGIN (LockProtecReg,1)
                   471   ; main.c    243 
                   472   ; main.c    244 // USER CODE END
                   473   ; main.c    245 
                   474   ; main.c    246 void MAIN_vLockProtecReg(void)
                   475   ; main.c    247 {
                   476           ?LINE   247
                   477           PUBLIC  _MAIN_vLockProtecReg
               R   478           ?SYMB   'MAIN_vLockProtecReg',_MAIN_vLockProtecReg,37,1
                   479           ?SYMB   '',247,8,34
                   480   _MAIN_vLockProtecReg    PROC    FAR
                   481           ?SYMB   '',00H,95,0
0078 2802          482           SUB     R0,#02h
               R   483           ?SYMB   '',$,96,2
                   484   ; Locals:
                   485   ;     uwPASSWORD = offset 0
                   486   ; 
                   487   ; Statics:
                   488   ; 
                   489   ; CSEs:
                   490   ; 
                   491   ; main.c    248   uword uwPASSWORD;
                   492           ?SYMB   'uwPASSWORD',1,98,279
               R   493           ?SYMB   '-2',$,101,1
                   494   ; main.c    249 
                   495   ; main.c    250     SCU_SLC = 0xAAAA;                   // command 0
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 24 2021  Time: 15:48:39  Page:  10
main

 LOC CODE        LINE   SOURCELINE

                   496           ?LINE   250
007A E6FCAAAA      497           MOV     R12,#0AAAAh
007E F6FCC0F0      498           MOV     0F0C0h,R12
                   499   ; main.c    251     SCU_SLC = 0x5554;                   // command 1
                   500           ?LINE   251
0082 E6FC5455      501           MOV     R12,#05554h
0086 F6FCC0F0      502           MOV     0F0C0h,R12
                   503   ; main.c    252 
                   504   ; main.c    253     uwPASSWORD = SCU_SLS & 0x00FF;
                   505           ?LINE   253
008A F2FCC2F0      506           MOV     R12,0F0C2h
008E 66FCFF00      507           AND     R12,#0FFh
0092 B8C0          508           MOV     [R0],R12
                   509   ; main.c    254     uwPASSWORD = (~uwPASSWORD) & 0x00FF;
                   510           ?LINE   254
0094 A8C0          511           MOV     R12,[R0]
0096 91C0          512           CPL     R12
0098 66FCFF00      513           AND     R12,#0FFh
009C B8C0          514           MOV     [R0],R12
                   515   ; main.c    255 
                   516   ; main.c    256     SCU_SLC = 0x9600 | uwPASSWORD;      // command 2
                   517           ?LINE   256
009E A8C0          518           MOV     R12,[R0]
00A0 76FC0096      519           OR      R12,#09600h
00A4 F6FCC0F0      520           MOV     0F0C0h,R12
                   521   ; main.c    257     SCU_SLC = 0x1800;                   // command 3; new PASSWOR is 0x00
                   522           ?LINE   257
00A8 E6FC0018      523           MOV     R12,#01800h
00AC F6FCC0F0      524           MOV     0F0C0h,R12
                   525   ; main.c    258 
                   526   ; main.c    259     uwPASSWORD = SCU_SLS & 0x00FF;
                   527           ?LINE   259
00B0 F2FCC2F0      528           MOV     R12,0F0C2h
00B4 66FCFF00      529           AND     R12,#0FFh
00B8 B8C0          530           MOV     [R0],R12
                   531   ; main.c    260     uwPASSWORD = (~uwPASSWORD) & 0x00FF;
                   532           ?LINE   260
00BA A8C0          533           MOV     R12,[R0]
00BC 91C0          534           CPL     R12
00BE 66FCFF00      535           AND     R12,#0FFh
00C2 B8C0          536           MOV     [R0],R12
                   537   ; main.c    261     SCU_SLC = 0x8E00 | uwPASSWORD;      // command 4
                   538           ?LINE   261
00C4 A8C0          539           MOV     R12,[R0]
00C6 76FC008E      540           OR      R12,#08E00h
00CA F6FCC0F0      541           MOV     0F0C0h,R12
                   542   ; main.c    262 
                   543   ; main.c    263 } //  End of function MAIN_vLockProtecReg
               R   544           ?SYMB   '',$,102,1
                   545           ?LINE   263
00CE 0802          546           ADD     R0,#02h
               R   547           ?SYMB   '',$,96,0
00D0 DB00          548           RETS
                   549   _MAIN_vLockProtecReg    ENDP
               R   550           ?SYMB   '',$,17,263
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 24 2021  Time: 15:48:39  Page:  11
main

 LOC CODE        LINE   SOURCELINE

                   551   ; main.c    264 
                   552   ; main.c    265 
                   553   ; main.c    266 //****************************************************************************
                   554   ; main.c    267 // @Function      void MAIN_vChangeFreq(void) 
                   555   ; main.c    268 //
                   556   ; main.c    269 //----------------------------------------------------------------------------
                   557   ; main.c    270 // @Description   This function is used to select the external crystal and
                   558   ; main.c    271 //                configure the system frequency to 80Mhz/66Mhz.
                   559   ; main.c    272 //
                   560   ; main.c    273 //----------------------------------------------------------------------------
                   561   ; main.c    274 // @Returnvalue   None
                   562   ; main.c    275 //
                   563   ; main.c    276 //----------------------------------------------------------------------------
                   564   ; main.c    277 // @Parameters    None
                   565   ; main.c    278 //
                   566   ; main.c    279 //----------------------------------------------------------------------------
                   567   ; main.c    280 // @Date          24.09.2021
                   568   ; main.c    281 //
                   569   ; main.c    282 //****************************************************************************
                   570   ; main.c    283 
                   571   ; main.c    284 // USER CODE BEGIN (ChangeFreq,1)
                   572   ; main.c    285 
                   573   ; main.c    286 // USER CODE END
                   574   ; main.c    287 
                   575   ; main.c    288 void MAIN_vChangeFreq(void)
                   576   ; main.c    289 {
                   577           ?LINE   289
                   578           PUBLIC  _MAIN_vChangeFreq
               R   579           ?SYMB   'MAIN_vChangeFreq',_MAIN_vChangeFreq,37,1
                   580           ?SYMB   '',289,8,34
                   581   _MAIN_vChangeFreq       PROC    FAR
                   582           ?SYMB   '',00H,95,0
                   583   ; Locals:
                   584   ; 
                   585   ; Statics:
                   586   ; 
                   587   ; CSEs:
                   588   ; 
                   589   ; main.c    290   SCS_SwitchToHighPrecBandgap();
                   590           ?LINE   290
00D2 DA000000  R   591           CALLS   SEG _SCS_SwitchToHighPrecBandgap,_SCS_SwitchToHighPrecBandgap
                   592   ; main.c    291 
                   593   ; main.c    292   //For application and internal application resets, the complete PLL configura
                         tion could be avoided
                   594   ; main.c    293   //The entry from application resets and internal application reset is covered
                          in the following differentiation
                   595   ; main.c    294   //in int/ext clock in lock/unlocked state.
                   596   ; main.c    295 
                   597   ; main.c    296   if  ((SCU_PLLSTAT & 0x0004) == 0x0004)             // fR derived from Interna
                         l clock
                   598           ?LINE   296
00D6 F2FCBCF0      599           MOV     R12,0F0BCh
00DA 9AFC0720      600           JNB     R12.2,_7
                   601   ; main.c    297         {
                   602   ; main.c    298             //Normal startup state during boot and the clock
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 24 2021  Time: 15:48:39  Page:  12
main

 LOC CODE        LINE   SOURCELINE

                   603   ; main.c    299             //has to be in the next step configured on the external crystal
                   604   ; main.c    300             //use XTAL/VCO, count XTAL clock
                   605   ; main.c    301 
                   606   ; main.c    302             SCS_StartXtalOsc(1);                     // Starts the crystal osci
                         llator
                   607           ?LINE   302
00DE E01C          608           MOV     R12,#01h
00E0 DA000000  R   609           CALLS   SEG _SCS_StartXtalOsc,_SCS_StartXtalOsc
                   610   ; main.c    303             SCS_SwitchSystemClock(1);                // System clock is increas
                         ed to target speed (80/66 MHz)
                   611           ?LINE   303
00E4 E01C          612           MOV     R12,#01h
00E6 DA000000  R   613           CALLS   SEG _SCS_SwitchSystemClock,_SCS_SwitchSystemClock
                   614   ; main.c    304 
                   615   ; main.c    305         }
                   616           ?LINE   305
00EA DB00          617           RETS
00EC               618   _7:
                   619   ; main.c    306 
                   620   ; main.c    307   else                                               // fR derived from externa
                         l crystal clock
                   621   ; main.c    308         {
                   622   ; main.c    309             if ((SCU_PLLSTAT & 0x1009) == 0x1009)    // fR derived from externa
                         l crystal clock + VCO is locked
                   623           ?LINE   309
00EC F2FCBCF0      624           MOV     R12,0F0BCh
00F0 66FC0910      625           AND     R12,#01009h
00F4 46FC0910      626           CMP     R12,#01009h
00F8 3D02          627           JMPR    cc_NE,_8
                   628   ; main.c    310             {
                   629   ; main.c    311                //usually after an application reset where clock need not be con
                         figured again.
                   630   ; main.c    312                //check K2/P/N values and decide whether these values have to be
                          adapted based on application needs.
                   631   ; main.c    313                NOP();
                   632           ?LINE   313
00FA CC00          633           NOP
                   634   ; main.c    314                //usually the PLL losss of Lock TRAP schould be enabled here.
                   635   ; main.c    315             }
                   636           ?LINE   315
00FC 0D01          637           JMPR    cc_UC,_9
00FE               638   _8:
                   639   ; main.c    316             else                                     //fR derived from external
                          crystal clock + VCO is not locked
                   640   ; main.c    317 
                   641   ; main.c    318             {
                   642   ; main.c    319                //estimate the K1 value and the current frequency
                   643   ; main.c    320                //reduce K2/P/N values in steps so that the frequency
                   644   ; main.c    321                //jumps is limited to 20MHz or factor of 5 whichever is minimum
                   645   ; main.c    322                NOP();
                   646           ?LINE   322
00FE CC00          647           NOP
                   648   ; main.c    323             }
                   649           ?LINE   323
0100               650   _9:
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 24 2021  Time: 15:48:39  Page:  13
main

 LOC CODE        LINE   SOURCELINE

                   651   ; main.c    324 
                   652   ; main.c    325 
                   653   ; main.c    326         }
                   654           ?LINE   326
0100               655   _10:
                   656   ; main.c    327 
                   657   ; main.c    328 } //  End of function MAIN_vChangeFreq
                   658           ?LINE   328
0100 DB00          659           RETS
                   660   _MAIN_vChangeFreq       ENDP
               R   661           ?SYMB   '',$,17,328
                   662   ; main.c    329 
                   663   ; main.c    330 
                   664   ; main.c    331 //****************************************************************************
                   665   ; main.c    332 // @Function      void main(void) 
                   666   ; main.c    333 //
                   667   ; main.c    334 //----------------------------------------------------------------------------
                   668   ; main.c    335 // @Description   This is the main function.
                   669   ; main.c    336 //
                   670   ; main.c    337 //----------------------------------------------------------------------------
                   671   ; main.c    338 // @Returnvalue   None
                   672   ; main.c    339 //
                   673   ; main.c    340 //----------------------------------------------------------------------------
                   674   ; main.c    341 // @Parameters    None
                   675   ; main.c    342 //
                   676   ; main.c    343 //----------------------------------------------------------------------------
                   677   ; main.c    344 // @Date          24.09.2021
                   678   ; main.c    345 //
                   679   ; main.c    346 //****************************************************************************
                   680   ; main.c    347 
                   681   ; main.c    348 // USER CODE BEGIN (Main,1)
                   682   ; main.c    349 
                   683   ; main.c    350 // USER CODE END
                   684   ; main.c    351 
                   685   ; main.c    352 void main(void)
                   686   ; main.c    353 {
                   687           ?LINE   353
                   688           PUBLIC  _main
               R   689           ?SYMB   'main',_main,37,1
                   690           ?SYMB   '',353,8,34
                   691   _main   PROC    FAR
                   692           ?SYMB   '',00H,95,0
                   693   ; Locals:
                   694   ; 
                   695   ; Statics:
                   696   ; 
                   697   ; CSEs:
                   698   ; 
                   699   ; main.c    354   // USER CODE BEGIN (Main,2)
                   700   ; main.c    355 
                   701   ; main.c    356   // USER CODE END
                   702   ; main.c    357 
                   703   ; main.c    358   MAIN_vInit();
                   704           ?LINE   358
0102 DA000000  R   705           CALLS   SEG _MAIN_vInit,_MAIN_vInit
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 24 2021  Time: 15:48:39  Page:  14
main

 LOC CODE        LINE   SOURCELINE

                   706   ; main.c    359 
                   707   ; main.c    360   // USER CODE BEGIN (Main,3)
                   708   ; main.c    361         generateTable();
                   709           ?LINE   361
0106 DA003C01  R   710           CALLS   SEG _generateTable,_generateTable
                   711   ; main.c    362         CCU63_vStartTmr(CCU63_TIMER_12);
                   712           ?LINE   362
010A E6FCA6EB      713           MOV     R12,#0EBA6h
010E A8DC          714           MOV     R13,[R12]
0110 1FFD          715           BSET    R13.1
0112 B8DC          716           MOV     [R12],R13
                   717   ; main.c    363         CCU62_vStartTmr(CCU62_TIMER_12);
                   718           ?LINE   363
0114 E6FC26EB      719           MOV     R12,#0EB26h
0118 A8DC          720           MOV     R13,[R12]
011A 1FFD          721           BSET    R13.1
011C B8DC          722           MOV     [R12],R13
                   723   ; main.c    364         IO_vSetPin(LED_DBG);
                   724           ?LINE   364
011E E01C          725           MOV     R12,#01h
0120 F6FCE0E9      726           MOV     0E9E0h,R12
                   727   ; main.c    365         CCU62_vSetTmrPeriod(CCU62_TIMER_12, 0xFDE7);
                   728           ?LINE   365
0124 E6FCE7FD      729           MOV     R12,#0FDE7h
0128 F6FC12EB      730           MOV     0EB12h,R12
                   731   ; main.c    366         CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   732           ?LINE   366
012C E6FC26EB      733           MOV     R12,#0EB26h
0130 A8DC          734           MOV     R13,[R12]
0132 6FFD          735           BSET    R13.6
0134 B8DC          736           MOV     [R12],R13
                   737   ; main.c    367   // USER CODE END
                   738   ; main.c    368 
                   739   ; main.c    369   while(1)
                   740           ?LINE   369
0136 0D00          741           JMPR    cc_UC,_13
0138               742   _13:
0138               743   _14:
0138 0DFF          744           JMPR    cc_UC,_14
                   745   ; main.c    370   {
                   746   ; main.c    371 
                   747   ; main.c    372    // USER CODE BEGIN (Main,4)
                   748   ; main.c    373 
                   749   ; main.c    374    // USER CODE END
                   750   ; main.c    375 
                   751   ; main.c    376   }
                   752   ; main.c    377 
                   753   ; main.c    378 } //  End of function main
                   754           ?LINE   378
013A DB00          755           RETS
                   756   _main   ENDP
               R   757           ?SYMB   '',$,17,378
                   758   ; main.c    379 
                   759   ; main.c    380 
                   760   ; main.c    381 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 24 2021  Time: 15:48:39  Page:  15
main

 LOC CODE        LINE   SOURCELINE

                   761   ; main.c    382 // USER CODE BEGIN (MAIN_General,10)
                   762   ; main.c    383 void generateTable(){
                   763           ?LINE   383
                   764           PUBLIC  _generateTable
               R   765           ?SYMB   'generateTable',_generateTable,37,1
                   766           ?SYMB   '',383,8,34
                   767   _generateTable  PROC    FAR
                   768           ?SYMB   '',00H,95,0
013C 26F00A00      769           SUB     R0,#0Ah
               R   770           ?SYMB   '',$,96,10
                   771   ; Locals:
                   772   ;     i = offset 0
                   773   ;     stepSize = offset 2
                   774   ; 
                   775   ; Statics:
                   776   ; 
                   777   ; CSEs:
                   778   ; 
                   779   ; main.c    384         double stepSize = (2*pi)/(ARRAY_SIZE);
                   780           ?SYMB   'stepSize',2,98,11
               R   781           ?SYMB   '-8',$,101,2
                   782           ?LINE   384
0140 F2F40000  R   783           MOV     R4,_pi
0144 F2F50000  R   784           MOV     R5,(_pi+2)
0148 E6FA0040      785           MOV     R10,#04000h
014C E00B          786           MOV     R11,#00h
014E DA000000  R   787           CALLS   SEG __mlf4r,__mlf4r
0152 E6FA1644      788           MOV     R10,#04416h
0156 E00B          789           MOV     R11,#00h
0158 DA000000  R   790           CALLS   SEG __dvf4r,__dvf4r
015C DA000000  R   791           CALLS   SEG __cff48r,__cff48r
               R   792           ?SYMB   '',$,96,18
0160 F040          793           MOV     R4,R0
0162 06F40A00      794           ADD     R4,#0Ah
0166 DA000000  R   795           CALLS   SEG __store8n,__store8n
016A 06F00800      796           ADD     R0,#08h
               R   797           ?SYMB   '',$,96,10
                   798   ; main.c    385         int i;
                   799           ?SYMB   'i',1,98,16
               R   800           ?SYMB   '-a',$,101,1
                   801   ; main.c    386         for (i = 0; i < ARRAY_SIZE; i++){ 
                   802           ?LINE   386
016E E00C          803           MOV     R12,#00h
0170 B8C0          804           MOV     [R0],R12
0172 0D38          805           JMPR    cc_UC,_22
0174               806   _21:
                   807   ; main.c    387                 table[i] = (unsigned int)((double)(CCU63_T12PR/2)*(sin(stepSize
                          * i) + 1) + 0.5);
                   808           ?LINE   387
0174 26F00800      809           SUB     R0,#08h
               R   810           ?SYMB   '',$,96,18
0178 E0A4          811           MOV     R4,#0Ah
017A 0040          812           ADD     R4,R0
017C DA000000  R   813           CALLS   SEG __load8n,__load8n
               R   814           ?SYMB   '',$,96,26
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 24 2021  Time: 15:48:39  Page:  16
main

 LOC CODE        LINE   SOURCELINE

0180 D4B01000      815           MOV     R11,[R0+#010H]
0184 F04B          816           MOV     R4,R11
0186 F0CA          817           MOV     R12,R10
0188 DA000000  R   818           CALLS   SEG __cif28r,__cif28r
               R   819           ?SYMB   '',$,96,34
018C F0BA          820           MOV     R11,R10
018E F0AC          821           MOV     R10,R12
0190 DA000000  R   822           CALLS   SEG __mlf8r,__mlf8r
0194 06F00800      823           ADD     R0,#08h
               R   824           ?SYMB   '',$,96,26
0198 DA000000  R   825           CALLS   SEG _sin,_sin
019C 06F00800      826           ADD     R0,#08h
               R   827           ?SYMB   '',$,96,18
01A0 F0B4          828           MOV     R11,R4
01A2 E6F40000  R   829           MOV     R4,#_18
01A6 DA000000  R   830           CALLS   SEG __load8n,__load8n
               R   831           ?SYMB   '',$,96,26
01AA DA000000  R   832           CALLS   SEG __adf8r,__adf8r
01AE F0BA          833           MOV     R11,R10
01B0 F2FA92EB      834           MOV     R10,0EB92h
01B4 7C1A          835           SHR     R10,#01h
01B6 F04A          836           MOV     R4,R10
01B8 DA000000  R   837           CALLS   SEG __cuf28r,__cuf28r
               R   838           ?SYMB   '',$,96,34
01BC DA000000  R   839           CALLS   SEG __mlf8r,__mlf8r
01C0 F0BA          840           MOV     R11,R10
01C2 E6F40000  R   841           MOV     R4,#_17
01C6 DA000000  R   842           CALLS   SEG __load8n,__load8n
               R   843           ?SYMB   '',$,96,42
01CA DA000000  R   844           CALLS   SEG __adf8r,__adf8r
01CE DA000000  R   845           CALLS   SEG __cfu82r,__cfu82r
01D2 06F02000      846           ADD     R0,#020h
               R   847           ?SYMB   '',$,96,10
01D6 A8C0          848           MOV     R12,[R0]
01D8 5C1C          849           SHL     R12,#01h
01DA C44C0000  R   850           MOV     [R12+#_table],R4
                   851           ?LINE   386
01DE A8C0          852           MOV     R12,[R0]
01E0 08C1          853           ADD     R12,#01h
01E2 B8C0          854           MOV     [R0],R12
01E4               855   _22:
01E4 A8C0          856           MOV     R12,[R0]
01E6 46FC5802      857           CMP     R12,#0258h
01EA 8DC4          858           JMPR    cc_ULT,_21
                   859   ; main.c    388         }
                   860   ; main.c    389 }
               R   861           ?SYMB   '',$,102,1
               R   862           ?SYMB   '',$,102,2
                   863           ?LINE   389
01EC 06F00A00      864           ADD     R0,#0Ah
               R   865           ?SYMB   '',$,96,0
01F0 DB00          866           RETS
                   867   _generateTable  ENDP
               R   868           ?SYMB   '',$,17,389
                   869   ; main.c    390 // USER CODE END
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 24 2021  Time: 15:48:39  Page:  17
main

 LOC CODE        LINE   SOURCELINE

                   870   ; main.c    391 
                   871   MAIN_4_PR       ENDS
                   872   
                   873   MAIN_5_NB       SECTION LDAT WORD PUBLIC 'CNEAR'
0000               874   MAIN_5_NB_ENTRY LABEL   BYTE
0000               875   _table  LABEL   WORD
0000               876           DS      1200
                   877           PUBLIC  _table
                   878           ?SYMB   '',011d0012H,5,284
                   879           ?SYMB   '',16,47,285
                   880           ?SYMB   '',0,30,0
                   881           ?SYMB   '',599,49,0
               R   882           ?SYMB   'table',_table,22,284
04B0               883   _index  LABEL   WORD
04B0               884           DS      2
                   885           PUBLIC  _index
               R   886           ?SYMB   'index',_index,22,18
                   887   MAIN_5_NB       ENDS
                   888   
                   889   MAIN_6_CO       SECTION LDAT WORD PUBLIC 'CROM'
0000               890   _18     LABEL   WORD
0000 F03F0000      891           DW      03FF0h,00h,00h,00h
0004 00000000    
0008               892   _17     LABEL   WORD
0008 E03F0000      893           DW      03FE0h,00h,00h,00h
000C 00000000    
                   894   MAIN_6_CO       ENDS
                   895   
                   896   C166_US SECTION LDAT WORD GLBUSRSTACK 'CUSTACK'
0000               897           DS      46
                   898   C166_US ENDS
                   899   
                   900   C166_INIT       SECTION PDAT WORD GLOBAL 'CINITROM'
0000 0600          901           DW      06h
0002 00000000  R   902           DPPTR   MAIN_ID_NB_ENTRY,MAIN_IR_NB_ENTRY
0006 00000000    
000A 0400          903           DW      04h
                   904   C166_INIT       ENDS
                   905   
                   906   C166_BSS        SECTION PDAT WORD GLOBAL 'CINITROM'
0000 05000000  R   907           DW      05h,MAIN_5_NB_ENTRY,04B2h
0004 B204        
                   908   C166_BSS        ENDS
                   909   
                   910   $FLOAT(ANSI)
                   911           EXTERN  _CCU62_vInit:FAR
                   912           EXTERN  _CC2_vInit:FAR
                   913           EXTERN  _CCU63_vInit:FAR
                   914           EXTERN  _sin:FAR
                   915           EXTERN  _SCS_SwitchToHighPrecBandgap:FAR
                   916           EXTERN  _SCS_StartXtalOsc:FAR
                   917           EXTERN  _IO_vInit:FAR
                   918           EXTERN  _GPT2_vInit:FAR
                   919           EXTERN  _GPT1_vInit:FAR
                   920           EXTERN  _SCS_SwitchSystemClock:FAR
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 24 2021  Time: 15:48:39  Page:  18
main

 LOC CODE        LINE   SOURCELINE

                   921           EXTERN  __mlf4r:FAR
                   922           EXTERN  __dvf4r:FAR
                   923           EXTERN  __cff48r:FAR
                   924           EXTERN  __store8n:FAR
                   925           EXTERN  __load8n:FAR
                   926           EXTERN  __cif28r:FAR
                   927           EXTERN  __mlf8r:FAR
                   928           EXTERN  __adf8r:FAR
                   929           EXTERN  __cuf28r:FAR
                   930           EXTERN  __cfu82r:FAR
                   931           EXTERN  __CSTART:FAR
                   932           REGDEF  R0-R15
                   933           END

total errors: 0, warnings: 0

