TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:   1
main

 LOC CODE        LINE   SOURCELINE

                     1   ; TASKING C166/ST10 C compiler v8.7r1 Build 775
                     2   ; options: -e -Id:\programme\tasking\c166 v8.7r1\include -x2 -Bhoeufmknladij -OB
                     3   ;          -OE -zswitch_tabmem_default -zautobitastruct-4 -zautobita-0 -FSC -A1
                     4   ;          -zvolatile_union -O0 -g -newerr -s -i0 -Ms
                     5   $DEBUG
                     6   $NOLOCALS
                     7   $EXTEND2
                     8   $NOMOD166
                     9   $STDNAMES(regsuper10bo.def)
                    10   $EXTMAC
                    11   $CASE
                    12   $NOEXPANDREGBANK
                    13   $MODEL(SMALL)
                    14           NAME    MAIN_C
                    15           ?SYMB   'main.c',32,80,16
                    16           ?SYMB   '',1,82,0
                    17           ?SYMB   '80166',0,84,0
                    18           ?SYMB   '',0,81,0
                    19           ?SYMB   'void',00H,45,1
                    20           ?SYMB   'char',080000H,45,2
                    21           ?SYMB   'unsigned char',080000H,45,3
                    22           ?SYMB   'short',0100000H,45,4
                    23           ?SYMB   'unsigned short',0100000H,45,5
                    24           ?SYMB   'long',0200000H,45,6
                    25           ?SYMB   'unsigned long',0200000H,45,7
                    26           ?SYMB   'float',0200000H,45,10
                    27           ?SYMB   'double',0400000H,45,11
                    28           ?SYMB   'int',0100000H,45,16
                    29           ?SYMB   'unsigned int',0100000H,45,18
                    30           ?SYMB   'bit',010000H,7,256
                    31           ?SYMB   'main.c',0,29,1
                    32           ?SYMB   '',0,86,1
                    33   ; main.c      1 //****************************************************************************
                    34   ; main.c      2 // @Module        Project Settings
                    35   ; main.c      3 // @Filename      MAIN.C
                    36   ; main.c      4 // @Project       DAvE_config.dav
                    37   ; main.c      5 //----------------------------------------------------------------------------
                    38   ; main.c      6 // @Controller    Infineon XE167F-96F66
                    39   ; main.c      7 //
                    40   ; main.c      8 // @Compiler      Tasking Classic
                    41   ; main.c      9 //
                    42   ; main.c     10 // @Codegenerator 2.2
                    43   ; main.c     11 //
                    44   ; main.c     12 // @Description   This file contains the project initialization function.
                    45   ; main.c     13 //
                    46   ; main.c     14 //----------------------------------------------------------------------------
                    47   ; main.c     15 // @Date          29.09.2021 09:41:08
                    48   ; main.c     16 //
                    49   ; main.c     17 //****************************************************************************
                    50   ; main.c     18 
                    51   ; main.c     19 // USER CODE BEGIN (MAIN_General,1)
                    52   ; main.c     20 
                    53   ; main.c     21 // USER CODE END
                    54   ; main.c     22 
                    55   ; main.c     23 //****************************************************************************
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:   2
main

 LOC CODE        LINE   SOURCELINE

                    56   ; main.c     24 // @Project Includes
                    57   ; main.c     25 //****************************************************************************
                    58   ; main.c     26 
                    59   ; main.c     27 #include "MAIN.H"
                    60           ?SYMB   'MAIN.H',0,29,2
                    61           ?SYMB   '',0,86,2
                    62           ?SYMB   'XE16xREGS.H',0,29,3
                    63           ?SYMB   '',0,86,3
                    64           ?SYMB   '',0,86,2
                    65           ?SYMB   'SCS.H',0,29,3
                    66           ?SYMB   '',0,86,3
                    67           ?SYMB   'T$2',0,14,257
                    68           ?SYMB   'SCS_EXTCLK_F_SYS',0,33,257
                    69           ?SYMB   'SCS_EXTCLK_F_OUT',1,33,257
                    70           ?SYMB   'SCS_EXTCLK_F_PLL',2,33,257
                    71           ?SYMB   'SCS_EXTCLK_F_OSC',3,33,257
                    72           ?SYMB   'SCS_EXTCLK_F_WU',4,33,257
                    73           ?SYMB   'SCS_EXTCLK_F_TCK',5,33,257
                    74           ?SYMB   'SCS_EXTCLK_F_OSC_FL',6,33,257
                    75           ?SYMB   'SCS_EXTCLK_F_RTC',8,33,257
                    76           ?SYMB   '',16,16,0
                    77           ?SYMB   'SCS_EXTCLK_Type',257,13,258
                    78           ?SYMB   '',0,86,2
                    79           ?SYMB   'IO.H',0,29,3
                    80           ?SYMB   '',0,86,3
                    81           ?SYMB   '',0,86,2
                    82           ?SYMB   'GPT1.H',0,29,3
                    83           ?SYMB   '',0,86,3
                    84           ?SYMB   '',0,86,2
                    85           ?SYMB   'GPT2.H',0,29,3
                    86           ?SYMB   '',0,86,3
                    87           ?SYMB   '',0,86,2
                    88           ?SYMB   'CCU62.H',0,29,3
                    89           ?SYMB   '',0,86,3
                    90           ?SYMB   '',0,86,2
                    91           ?SYMB   'CCU63.H',0,29,3
                    92           ?SYMB   '',0,86,3
                    93           ?SYMB   '',0,86,2
                    94           ?SYMB   'ADC0.H',0,29,3
                    95           ?SYMB   '',0,86,3
                    96           ?SYMB   'ubyte',3,13,259
                    97           ?SYMB   '',0,86,2
                    98           ?SYMB   '',0,86,1
                    99   ; main.c     28 
                   100   ; main.c     29 // USER CODE BEGIN (MAIN_General,2)
                   101   ; main.c     30 #include <math.h>
                   102           ?SYMB   'd:\programme\tasking\c166 v8.7r1\include\math.h',0,29,2
                   103           ?SYMB   '',0,86,2
                   104           ?SYMB   '',0,86,1
                   105   ; main.c     31 // USER CODE END
                   106   ; main.c     32 
                   107   ; main.c     33 //****************************************************************************
                   108   ; main.c     34 // @Macros
                   109   ; main.c     35 //****************************************************************************
                   110   ; main.c     36 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:   3
main

 LOC CODE        LINE   SOURCELINE

                   111   ; main.c     37 // USER CODE BEGIN (MAIN_General,3)
                   112   ; main.c     38 
                   113   ; main.c     39 // USER CODE END
                   114   ; main.c     40 
                   115   ; main.c     41 //****************************************************************************
                   116   ; main.c     42 // @Defines
                   117   ; main.c     43 //****************************************************************************
                   118   ; main.c     44 
                   119   ; main.c     45 // USER CODE BEGIN (MAIN_General,4)
                   120   ; main.c     46 // clockwise=rechtslauf, counterclockwise=linkslauf definition einer Präprozess
                         orvariable
                   121   ; main.c     47 #define clockwise (0)
                   122   ; main.c     48 #define counterclockwise (1)
                   123   ; main.c     49 // USER CODE END
                   124   ; main.c     50 
                   125   ; main.c     51 //****************************************************************************
                   126   ; main.c     52 // @Typedefs
                   127   ; main.c     53 //****************************************************************************
                   128   ; main.c     54 
                   129   ; main.c     55 // USER CODE BEGIN (MAIN_General,5)
                   130   ; main.c     56 
                   131   ; main.c     57 // USER CODE END
                   132   ; main.c     58 
                   133   ; main.c     59 //****************************************************************************
                   134   ; main.c     60 // @Imported Global Variables
                   135   ; main.c     61 //****************************************************************************
                   136   ; main.c     62 
                   137   ; main.c     63 // USER CODE BEGIN (MAIN_General,6)
                   138   ; main.c     64 
                   139   ; main.c     65 // USER CODE END
                   140   ; main.c     66 
                   141   ; main.c     67 //****************************************************************************
                   142   ; main.c     68 // @Global Variables
                   143   ; main.c     69 //****************************************************************************
                   144   ; main.c     70 
                   145   ; main.c     71 // USER CODE BEGIN (MAIN_General,7)
                   146   ; main.c     72 // Frequenz des Drehfeldes in Hz
                   147   ; main.c     73 unsigned int frequency = 0;
                   148   MAIN_IR_NB      SECTION PDAT WORD PUBLIC 'CINITROM'
0000               149   MAIN_IR_NB_ENTRY        LABEL   BYTE
0000 0000          150           DW      00h
                   151   MAIN_IR_NB      ENDS
                   152   
                   153   MAIN_ID_NB      SECTION LDAT WORD PUBLIC 'CINITIRAM'
0000               154   MAIN_ID_NB_ENTRY        LABEL   BYTE
0000               155   _frequency      LABEL   WORD
0000               156           DS      2
                   157           PUBLIC  _frequency
               R   158           ?SYMB   'frequency',_frequency,22,18
                   159   ; main.c     74 // Größe der Sinus Wertetabelle
                   160   ; main.c     75 const unsigned int ARRAY_SIZE = 1200;
                   161   MAIN_ID_NB      ENDS
                   162   
                   163   MAIN_3_NC       SECTION LDAT WORD PUBLIC 'CNEARROM'
0000               164   _ARRAY_SIZE     LABEL   WORD
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:   4
main

 LOC CODE        LINE   SOURCELINE

0000 B004          165           DW      04B0h
                   166           PUBLIC  _ARRAY_SIZE
               R   167           ?SYMB   'ARRAY_SIZE',_ARRAY_SIZE,22,18
                   168   ; main.c     76 // Phasenverschiebung
                   169   ; main.c     77 unsigned int OFFSET_L1;
                   170   ; main.c     78 unsigned int OFFSET_L2;
                   171   ; main.c     79 unsigned int OFFSET_L3;
                   172   ; main.c     80 // Wertetabelle des Sinus
                   173   ; main.c     81 int table[ARRAY_SIZE];
                   174   ; main.c     82 // Index der Wertetabelle
                   175   ; main.c     83 unsigned int index;
                   176   ; main.c     84 
                   177   ; main.c     85 float pi = 3.14159265359;
                   178   MAIN_3_NC       ENDS
                   179   
                   180   MAIN_IR_NB      SECTION PDAT
0002 4940DB0F      181           DW      04049h,0FDBh
                   182   MAIN_IR_NB      ENDS
                   183   
                   184   MAIN_ID_NB      SECTION LDAT
0002               185   _pi     LABEL   WORD
0002               186           DS      4
                   187           PUBLIC  _pi
               R   188           ?SYMB   'pi',_pi,22,10
                   189   ; main.c     86 // Index für die Rampensteuerung Erhöhung alle 8 ms
                   190   ; main.c     87 volatile unsigned int rampIndex;
                   191   ; main.c     88 // mechanische Geschwindigkeit des Motors in Hz
                   192   ; main.c     89 volatile float velocity;
                   193   ; main.c     90 // Integralsumme des I-Reglers
                   194   ; main.c     91 int integral_sum;
                   195   ; main.c     92 // Proportionalanteil P-Regler
                   196   ; main.c     93 const float K_p = 0.05;
                   197   MAIN_ID_NB      ENDS
                   198   
                   199   MAIN_3_NC       SECTION LDAT
0002               200   _K_p    LABEL   WORD
0002 4C3DCDCC      201           DW      03D4Ch,0CCCDh
                   202           PUBLIC  _K_p
               R   203           ?SYMB   'K_p',_K_p,22,10
                   204   ; main.c     94 // Integrealanteil I-Rgler
                   205   ; main.c     95 const float K_i = 0.01;
0006               206   _K_i    LABEL   WORD
0006 233C0AD7      207           DW      03C23h,0D70Ah
                   208           PUBLIC  _K_i
               R   209           ?SYMB   'K_i',_K_i,22,10
                   210   ; main.c     96 // Verschiebung des Gleichanteils des Sinus
                   211   ; main.c     97 const unsigned int HALF_PERIODVALUE = 901;
000A               212   _HALF_PERIODVALUE       LABEL   WORD
000A 8503          213           DW      0385h
                   214           PUBLIC  _HALF_PERIODVALUE
               R   215           ?SYMB   'HALF_PERIODVALUE',_HALF_PERIODVALUE,22,18
                   216   ; main.c     98 // USER CODE END
                   217   ; main.c     99 
                   218   ; main.c    100 //****************************************************************************
                   219   ; main.c    101 // @External Prototypes
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:   5
main

 LOC CODE        LINE   SOURCELINE

                   220   ; main.c    102 //****************************************************************************
                   221   ; main.c    103 
                   222   ; main.c    104 // USER CODE BEGIN (MAIN_General,8)
                   223   ; main.c    105 
                   224   ; main.c    106 // USER CODE END
                   225   ; main.c    107 
                   226   ; main.c    108 //****************************************************************************
                   227   ; main.c    109 // @Prototypes Of Local Functions
                   228   ; main.c    110 //****************************************************************************
                   229   ; main.c    111 
                   230   ; main.c    112 // USER CODE BEGIN (MAIN_General,9)
                   231   ; main.c    113 // Funktion zur Generierung der Sinus Wertetabelle
                   232   ; main.c    114 void generateTable();
                   233   ; main.c    115 // Funktion zur Berechnung des CCU62 Period Value Registers in Abhängigkeit der
                          Frequenz
                   234   ; main.c    116 unsigned int calculateMotorFrequency(unsigned int _frequency);
                   235   ; main.c    117 // Setzen der Phasenverschiebung für Links- und Rechtslauf, 0 = Rechtslauf 1 = 
                         Linkslauf
                   236   ; main.c    118 void setPhaseChange(int dir);
                   237   ; main.c    119 // Funktion für den PI-Regler, errechnet Stellgröße in Abhängigkeit der gemesse
                         nen Geschwindigkeit
                   238   ; main.c    120 unsigned int controller(int input);
                   239   ; main.c    121 // USER CODE END
                   240   ; main.c    122 
                   241   ; main.c    123 //****************************************************************************
                   242   ; main.c    124 // @Function      void MAIN_vInit(void)
                   243   ; main.c    125 //
                   244   ; main.c    126 //----------------------------------------------------------------------------
                   245   ; main.c    127 // @Description   This function initializes the microcontroller.
                   246   ; main.c    128 //
                   247   ; main.c    129 //----------------------------------------------------------------------------
                   248   ; main.c    130 // @Returnvalue   None
                   249   ; main.c    131 //
                   250   ; main.c    132 //----------------------------------------------------------------------------
                   251   ; main.c    133 // @Parameters    None
                   252   ; main.c    134 //
                   253   ; main.c    135 //----------------------------------------------------------------------------
                   254   ; main.c    136 // @Date          29.09.2021
                   255   ; main.c    137 //
                   256   ; main.c    138 //****************************************************************************
                   257   ; main.c    139 
                   258   ; main.c    140 // USER CODE BEGIN (Init,1)
                   259   ; main.c    141 
                   260   ; main.c    142 // USER CODE END
                   261   ; main.c    143 
                   262   ; main.c    144 void MAIN_vInit(void) {
                   263   MAIN_3_NC       ENDS
                   264   
                   265   MAIN_4_PR       SECTION CODE WORD PUBLIC 'CPROGRAM'
                   266           ?LINE   144
                   267           PUBLIC  _MAIN_vInit
               R   268           ?SYMB   'MAIN_vInit',_MAIN_vInit,37,1
                   269           ?SYMB   '',144,8,34
                   270           ?SYMB   '',010000H,7,261
                   271           ?SYMB   '',010001H,7,262
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:   6
main

 LOC CODE        LINE   SOURCELINE

                   272           ?SYMB   '',010002H,7,263
                   273           ?SYMB   '',010003H,7,264
                   274           ?SYMB   '',010004H,7,265
                   275           ?SYMB   '',010005H,7,266
                   276           ?SYMB   '',010006H,7,267
                   277           ?SYMB   '',010007H,7,268
                   278           ?SYMB   '',010000H,7,269
                   279           ?SYMB   '',010001H,7,270
                   280           ?SYMB   '',010002H,7,271
                   281           ?SYMB   '',010003H,7,272
                   282           ?SYMB   '',010004H,7,273
                   283           ?SYMB   '',010005H,7,274
                   284           ?SYMB   '',010006H,7,275
                   285           ?SYMB   '',010007H,7,276
                   286           ?SYMB   'T$1',0,40,277
                   287           ?SYMB   'bit0',0,23,261
                   288           ?SYMB   'bit1',1,23,262
                   289           ?SYMB   'bit2',2,23,263
                   290           ?SYMB   'bit3',3,23,264
                   291           ?SYMB   'bit4',4,23,265
                   292           ?SYMB   'bit5',5,23,266
                   293           ?SYMB   'bit6',6,23,267
                   294           ?SYMB   'bit7',7,23,268
                   295           ?SYMB   'bit8',8,23,269
                   296           ?SYMB   'bit9',9,23,270
                   297           ?SYMB   'bit10',10,23,271
                   298           ?SYMB   'bit11',11,23,272
                   299           ?SYMB   'bit12',12,23,273
                   300           ?SYMB   'bit13',13,23,274
                   301           ?SYMB   'bit14',14,23,275
                   302           ?SYMB   'bit15',15,23,276
                   303           ?SYMB   '',16,18,0
                   304           ?SYMB   'T_Reg16',277,13,278
                   305   _MAIN_vInit     PROC    FAR
                   306           ?SYMB   '',00H,95,0
                   307   ; Locals:
                   308   ; 
                   309   ; Statics:
                   310   ; 
                   311   ; CSEs:
                   312   ; 
                   313   ; main.c    145         // USER CODE BEGIN (Init,2)
                   314   ; main.c    146 
                   315   ; main.c    147         // USER CODE END
                   316   ; main.c    148 
                   317   ; main.c    149         //   globally disable interrupts
                   318   ; main.c    150         PSW_IEN = 0;
                   319           ?LINE   150
0000 E6FC10FF      320           MOV     R12,#0FF10h
0004 A8DC          321           MOV     R13,[R12]
0006 66FDFFF7      322           AND     R13,#0F7FFh
000A B8DC          323           MOV     [R12],R13
                   324   ; main.c    151 
                   325   ; main.c    152         ///  ------------------------------------------------------------------
                         -----
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:   7
main

 LOC CODE        LINE   SOURCELINE

                   326   ; main.c    153         ///  Configuration of the System Clock:
                   327   ; main.c    154         ///  ------------------------------------------------------------------
                         -----
                   328   ; main.c    155         ///  - VCO clock used, input clock is connected
                   329   ; main.c    156         ///  - input frequency is 10,00 MHz
                   330   ; main.c    157         ///  - configured system frequency is 66,00 MHz
                   331   ; main.c    158 
                   332   ; main.c    159         MAIN_vUnlockProtecReg();  // unlock write security
                   333           ?LINE   159
000C DA003E00  R   334           CALLS   SEG _MAIN_vUnlockProtecReg,_MAIN_vUnlockProtecReg
                   335   ; main.c    160 
                   336   ; main.c    161         MAIN_vChangeFreq();      // load PLL control register
                   337           ?LINE   161
0010 DA00D200  R   338           CALLS   SEG _MAIN_vChangeFreq,_MAIN_vChangeFreq
                   339   ; main.c    162 
                   340   ; main.c    163         //   ------------------------------------------------------------------
                         -----
                   341   ; main.c    164         //   Initialization of the Peripherals:
                   342   ; main.c    165         //   ------------------------------------------------------------------
                         -----
                   343   ; main.c    166 
                   344   ; main.c    167         //   initializes the Parallel Ports
                   345   ; main.c    168         IO_vInit();
                   346           ?LINE   168
0014 DA000000  R   347           CALLS   SEG _IO_vInit,_IO_vInit
                   348   ; main.c    169 
                   349   ; main.c    170         //   initializes the General Purpose Timer Unit (GPT1)
                   350   ; main.c    171         GPT1_vInit();
                   351           ?LINE   171
0018 DA000000  R   352           CALLS   SEG _GPT1_vInit,_GPT1_vInit
                   353   ; main.c    172 
                   354   ; main.c    173         //   initializes the General Purpose Timer Unit (GPT2)
                   355   ; main.c    174         GPT2_vInit();
                   356           ?LINE   174
001C DA000000  R   357           CALLS   SEG _GPT2_vInit,_GPT2_vInit
                   358   ; main.c    175 
                   359   ; main.c    176         //   initializes the Capture / Compare Unit 62 (CCU62)
                   360   ; main.c    177         CCU62_vInit();
                   361           ?LINE   177
0020 DA000000  R   362           CALLS   SEG _CCU62_vInit,_CCU62_vInit
                   363   ; main.c    178 
                   364   ; main.c    179         //   initializes the Capture / Compare Unit 63 (CCU63)
                   365   ; main.c    180         CCU63_vInit();
                   366           ?LINE   180
0024 DA000000  R   367           CALLS   SEG _CCU63_vInit,_CCU63_vInit
                   368   ; main.c    181 
                   369   ; main.c    182         //   initializes the Analog / Digital Converter  (ADC0)
                   370   ; main.c    183         ADC0_vInit();
                   371           ?LINE   183
0028 DA000000  R   372           CALLS   SEG _ADC0_vInit,_ADC0_vInit
                   373   ; main.c    184 
                   374   ; main.c    185         //   ------------------------------------------------------------------
                         -----
                   375   ; main.c    186         //   Initialization of the Bank Select registers:
                   376   ; main.c    187         //   ------------------------------------------------------------------
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:   8
main

 LOC CODE        LINE   SOURCELINE

                         -----
                   377   ; main.c    188 
                   378   ; main.c    189         // USER CODE BEGIN (Init,3)
                   379   ; main.c    190 
                   380   ; main.c    191         // USER CODE END
                   381   ; main.c    192 
                   382   ; main.c    193         MAIN_vLockProtecReg();  // lock write security
                   383           ?LINE   193
002C DA007800  R   384           CALLS   SEG _MAIN_vLockProtecReg,_MAIN_vLockProtecReg
                   385   ; main.c    194 
                   386   ; main.c    195         //   globally enable interrupts
                   387   ; main.c    196         PSW_IEN = 1;
                   388           ?LINE   196
0030 E6FC10FF      389           MOV     R12,#0FF10h
0034 A8DC          390           MOV     R13,[R12]
0036 1AFD0808      391           BFLDH   R13,#08h,#08h
003A B8DC          392           MOV     [R12],R13
                   393   ; main.c    197 
                   394   ; main.c    198 }  //  End of function MAIN_vInit
                   395           ?LINE   198
003C DB00          396           RETS
                   397   _MAIN_vInit     ENDP
               R   398           ?SYMB   '',$,17,198
                   399   ; main.c    199 
                   400   ; main.c    200 //****************************************************************************
                   401   ; main.c    201 // @Function      void MAIN_vUnlockProtecReg(void)
                   402   ; main.c    202 //
                   403   ; main.c    203 //----------------------------------------------------------------------------
                   404   ; main.c    204 // @Description   This function makes it possible to write one protected
                   405   ; main.c    205 //                register.
                   406   ; main.c    206 //
                   407   ; main.c    207 //----------------------------------------------------------------------------
                   408   ; main.c    208 // @Returnvalue   None
                   409   ; main.c    209 //
                   410   ; main.c    210 //----------------------------------------------------------------------------
                   411   ; main.c    211 // @Parameters    None
                   412   ; main.c    212 //
                   413   ; main.c    213 //----------------------------------------------------------------------------
                   414   ; main.c    214 // @Date          29.09.2021
                   415   ; main.c    215 //
                   416   ; main.c    216 //****************************************************************************
                   417   ; main.c    217 
                   418   ; main.c    218 // USER CODE BEGIN (UnlockProtecReg,1)
                   419   ; main.c    219 
                   420   ; main.c    220 // USER CODE END
                   421   ; main.c    221 
                   422   ; main.c    222 void MAIN_vUnlockProtecReg(void) {
                   423           ?LINE   222
                   424           PUBLIC  _MAIN_vUnlockProtecReg
               R   425           ?SYMB   'MAIN_vUnlockProtecReg',_MAIN_vUnlockProtecReg,37,1
                   426           ?SYMB   '',222,8,34
                   427           ?SYMB   'uword',18,13,280
                   428   _MAIN_vUnlockProtecReg  PROC    FAR
                   429           ?SYMB   '',00H,95,0
003E 2802          430           SUB     R0,#02h
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:   9
main

 LOC CODE        LINE   SOURCELINE

               R   431           ?SYMB   '',$,96,2
                   432   ; Locals:
                   433   ;     uwPASSWORD = offset 0
                   434   ; 
                   435   ; Statics:
                   436   ; 
                   437   ; CSEs:
                   438   ; 
                   439   ; main.c    223         uword uwPASSWORD;
                   440           ?SYMB   'uwPASSWORD',1,98,280
               R   441           ?SYMB   '-2',$,101,1
                   442   ; main.c    224 
                   443   ; main.c    225         SCU_SLC = 0xAAAA;  // command 0
                   444           ?LINE   225
0040 E6FCAAAA      445           MOV     R12,#0AAAAh
0044 F6FCC0F0      446           MOV     0F0C0h,R12
                   447   ; main.c    226         SCU_SLC = 0x5554;  // command 1
                   448           ?LINE   226
0048 E6FC5455      449           MOV     R12,#05554h
004C F6FCC0F0      450           MOV     0F0C0h,R12
                   451   ; main.c    227 
                   452   ; main.c    228         uwPASSWORD = SCU_SLS & 0x00FF;
                   453           ?LINE   228
0050 F2FCC2F0      454           MOV     R12,0F0C2h
0054 66FCFF00      455           AND     R12,#0FFh
0058 B8C0          456           MOV     [R0],R12
                   457   ; main.c    229         uwPASSWORD = (~uwPASSWORD) & 0x00FF;
                   458           ?LINE   229
005A A8C0          459           MOV     R12,[R0]
005C 91C0          460           CPL     R12
005E 66FCFF00      461           AND     R12,#0FFh
0062 B8C0          462           MOV     [R0],R12
                   463   ; main.c    230 
                   464   ; main.c    231         SCU_SLC = 0x9600 | uwPASSWORD;  // command 2
                   465           ?LINE   231
0064 A8C0          466           MOV     R12,[R0]
0066 76FC0096      467           OR      R12,#09600h
006A F6FCC0F0      468           MOV     0F0C0h,R12
                   469   ; main.c    232         SCU_SLC = 0x0000;                               // command 3
                   470           ?LINE   232
006E E00C          471           MOV     R12,#00h
0070 F6FCC0F0      472           MOV     0F0C0h,R12
                   473   ; main.c    233 
                   474   ; main.c    234 }  //  End of function MAIN_vUnlockProtecReg
               R   475           ?SYMB   '',$,102,1
                   476           ?LINE   234
0074 0802          477           ADD     R0,#02h
               R   478           ?SYMB   '',$,96,0
0076 DB00          479           RETS
                   480   _MAIN_vUnlockProtecReg  ENDP
               R   481           ?SYMB   '',$,17,234
                   482   ; main.c    235 
                   483   ; main.c    236 //****************************************************************************
                   484   ; main.c    237 // @Function      void MAIN_vLockProtecReg(void)
                   485   ; main.c    238 //
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:  10
main

 LOC CODE        LINE   SOURCELINE

                   486   ; main.c    239 //----------------------------------------------------------------------------
                   487   ; main.c    240 // @Description   This function makes it possible to lock one protected
                   488   ; main.c    241 //                register.
                   489   ; main.c    242 //
                   490   ; main.c    243 //----------------------------------------------------------------------------
                   491   ; main.c    244 // @Returnvalue   None
                   492   ; main.c    245 //
                   493   ; main.c    246 //----------------------------------------------------------------------------
                   494   ; main.c    247 // @Parameters    None
                   495   ; main.c    248 //
                   496   ; main.c    249 //----------------------------------------------------------------------------
                   497   ; main.c    250 // @Date          29.09.2021
                   498   ; main.c    251 //
                   499   ; main.c    252 //****************************************************************************
                   500   ; main.c    253 
                   501   ; main.c    254 // USER CODE BEGIN (LockProtecReg,1)
                   502   ; main.c    255 
                   503   ; main.c    256 // USER CODE END
                   504   ; main.c    257 
                   505   ; main.c    258 void MAIN_vLockProtecReg(void) {
                   506           ?LINE   258
                   507           PUBLIC  _MAIN_vLockProtecReg
               R   508           ?SYMB   'MAIN_vLockProtecReg',_MAIN_vLockProtecReg,37,1
                   509           ?SYMB   '',258,8,34
                   510   _MAIN_vLockProtecReg    PROC    FAR
                   511           ?SYMB   '',00H,95,0
0078 2802          512           SUB     R0,#02h
               R   513           ?SYMB   '',$,96,2
                   514   ; Locals:
                   515   ;     uwPASSWORD = offset 0
                   516   ; 
                   517   ; Statics:
                   518   ; 
                   519   ; CSEs:
                   520   ; 
                   521   ; main.c    259         uword uwPASSWORD;
                   522           ?SYMB   'uwPASSWORD',1,98,280
               R   523           ?SYMB   '-2',$,101,1
                   524   ; main.c    260 
                   525   ; main.c    261         SCU_SLC = 0xAAAA;  // command 0
                   526           ?LINE   261
007A E6FCAAAA      527           MOV     R12,#0AAAAh
007E F6FCC0F0      528           MOV     0F0C0h,R12
                   529   ; main.c    262         SCU_SLC = 0x5554;  // command 1
                   530           ?LINE   262
0082 E6FC5455      531           MOV     R12,#05554h
0086 F6FCC0F0      532           MOV     0F0C0h,R12
                   533   ; main.c    263 
                   534   ; main.c    264         uwPASSWORD = SCU_SLS & 0x00FF;
                   535           ?LINE   264
008A F2FCC2F0      536           MOV     R12,0F0C2h
008E 66FCFF00      537           AND     R12,#0FFh
0092 B8C0          538           MOV     [R0],R12
                   539   ; main.c    265         uwPASSWORD = (~uwPASSWORD) & 0x00FF;
                   540           ?LINE   265
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:  11
main

 LOC CODE        LINE   SOURCELINE

0094 A8C0          541           MOV     R12,[R0]
0096 91C0          542           CPL     R12
0098 66FCFF00      543           AND     R12,#0FFh
009C B8C0          544           MOV     [R0],R12
                   545   ; main.c    266 
                   546   ; main.c    267         SCU_SLC = 0x9600 | uwPASSWORD;  // command 2
                   547           ?LINE   267
009E A8C0          548           MOV     R12,[R0]
00A0 76FC0096      549           OR      R12,#09600h
00A4 F6FCC0F0      550           MOV     0F0C0h,R12
                   551   ; main.c    268         SCU_SLC = 0x1800;                               // command 3; new PASSW
                         OR is 0x00
                   552           ?LINE   268
00A8 E6FC0018      553           MOV     R12,#01800h
00AC F6FCC0F0      554           MOV     0F0C0h,R12
                   555   ; main.c    269 
                   556   ; main.c    270         uwPASSWORD = SCU_SLS & 0x00FF;
                   557           ?LINE   270
00B0 F2FCC2F0      558           MOV     R12,0F0C2h
00B4 66FCFF00      559           AND     R12,#0FFh
00B8 B8C0          560           MOV     [R0],R12
                   561   ; main.c    271         uwPASSWORD = (~uwPASSWORD) & 0x00FF;
                   562           ?LINE   271
00BA A8C0          563           MOV     R12,[R0]
00BC 91C0          564           CPL     R12
00BE 66FCFF00      565           AND     R12,#0FFh
00C2 B8C0          566           MOV     [R0],R12
                   567   ; main.c    272         SCU_SLC = 0x8E00 | uwPASSWORD;  // command 4
                   568           ?LINE   272
00C4 A8C0          569           MOV     R12,[R0]
00C6 76FC008E      570           OR      R12,#08E00h
00CA F6FCC0F0      571           MOV     0F0C0h,R12
                   572   ; main.c    273 
                   573   ; main.c    274 }  //  End of function MAIN_vLockProtecReg
               R   574           ?SYMB   '',$,102,1
                   575           ?LINE   274
00CE 0802          576           ADD     R0,#02h
               R   577           ?SYMB   '',$,96,0
00D0 DB00          578           RETS
                   579   _MAIN_vLockProtecReg    ENDP
               R   580           ?SYMB   '',$,17,274
                   581   ; main.c    275 
                   582   ; main.c    276 //****************************************************************************
                   583   ; main.c    277 // @Function      void MAIN_vChangeFreq(void)
                   584   ; main.c    278 //
                   585   ; main.c    279 //----------------------------------------------------------------------------
                   586   ; main.c    280 // @Description   This function is used to select the external crystal and
                   587   ; main.c    281 //                configure the system frequency to 80Mhz/66Mhz.
                   588   ; main.c    282 //
                   589   ; main.c    283 //----------------------------------------------------------------------------
                   590   ; main.c    284 // @Returnvalue   None
                   591   ; main.c    285 //
                   592   ; main.c    286 //----------------------------------------------------------------------------
                   593   ; main.c    287 // @Parameters    None
                   594   ; main.c    288 //
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:  12
main

 LOC CODE        LINE   SOURCELINE

                   595   ; main.c    289 //----------------------------------------------------------------------------
                   596   ; main.c    290 // @Date          29.09.2021
                   597   ; main.c    291 //
                   598   ; main.c    292 //****************************************************************************
                   599   ; main.c    293 
                   600   ; main.c    294 // USER CODE BEGIN (ChangeFreq,1)
                   601   ; main.c    295 
                   602   ; main.c    296 // USER CODE END
                   603   ; main.c    297 
                   604   ; main.c    298 void MAIN_vChangeFreq(void) {
                   605           ?LINE   298
                   606           PUBLIC  _MAIN_vChangeFreq
               R   607           ?SYMB   'MAIN_vChangeFreq',_MAIN_vChangeFreq,37,1
                   608           ?SYMB   '',298,8,34
                   609   _MAIN_vChangeFreq       PROC    FAR
                   610           ?SYMB   '',00H,95,0
                   611   ; Locals:
                   612   ; 
                   613   ; Statics:
                   614   ; 
                   615   ; CSEs:
                   616   ; 
                   617   ; main.c    299         SCS_SwitchToHighPrecBandgap();
                   618           ?LINE   299
00D2 DA000000  R   619           CALLS   SEG _SCS_SwitchToHighPrecBandgap,_SCS_SwitchToHighPrecBandgap
                   620   ; main.c    300 
                   621   ; main.c    301         //For application and internal application resets, the complete PLL con
                         figuration could be avoided
                   622   ; main.c    302         //The entry from application resets and internal application reset is c
                         overed in the following differentiation
                   623   ; main.c    303         //in int/ext clock in lock/unlocked state.
                   624   ; main.c    304 
                   625   ; main.c    305         if ((SCU_PLLSTAT & 0x0004) == 0x0004)  // fR derived from Internal cloc
                         k
                   626           ?LINE   305
00D6 F2FCBCF0      627           MOV     R12,0F0BCh
00DA 9AFC0720      628           JNB     R12.2,_7
                   629   ; main.c    306         {
                   630   ; main.c    307                 //Normal startup state during boot and the clock
                   631   ; main.c    308                 //has to be in the next step configured on the external crystal
                   632   ; main.c    309                 //use XTAL/VCO, count XTAL clock
                   633   ; main.c    310 
                   634   ; main.c    311                 SCS_StartXtalOsc(1);       // Starts the crystal oscillator
                   635           ?LINE   311
00DE E01C          636           MOV     R12,#01h
00E0 DA000000  R   637           CALLS   SEG _SCS_StartXtalOsc,_SCS_StartXtalOsc
                   638   ; main.c    312                 SCS_SwitchSystemClock(1);  // System clock is increased to targ
                         et speed (80/66 MHz)
                   639           ?LINE   312
00E4 E01C          640           MOV     R12,#01h
00E6 DA000000  R   641           CALLS   SEG _SCS_SwitchSystemClock,_SCS_SwitchSystemClock
                   642   ; main.c    313 
                   643   ; main.c    314         }
                   644           ?LINE   314
00EA DB00          645           RETS
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:  13
main

 LOC CODE        LINE   SOURCELINE

00EC               646   _7:
                   647   ; main.c    315 
                   648   ; main.c    316         else  // fR derived from external crystal clock
                   649   ; main.c    317         {
                   650   ; main.c    318                 if ((SCU_PLLSTAT & 0x1009) == 0x1009)  // fR derived from exter
                         nal crystal clock + VCO is locked
                   651           ?LINE   318
00EC F2FCBCF0      652           MOV     R12,0F0BCh
00F0 66FC0910      653           AND     R12,#01009h
00F4 46FC0910      654           CMP     R12,#01009h
00F8 3D02          655           JMPR    cc_NE,_8
                   656   ; main.c    319                 {
                   657   ; main.c    320                         //usually after an application reset where clock need n
                         ot be configured again.
                   658   ; main.c    321                         //check K2/P/N values and decide whether these values h
                         ave to be adapted based on application needs.
                   659   ; main.c    322                         NOP();
                   660           ?LINE   322
00FA CC00          661           NOP
                   662   ; main.c    323                         //usually the PLL losss of Lock TRAP schould be enabled
                          here.
                   663   ; main.c    324                 } else  //fR derived from external crystal clock + VCO is not l
                         ocked
                   664           ?LINE   324
00FC 0D01          665           JMPR    cc_UC,_9
00FE               666   _8:
                   667   ; main.c    325 
                   668   ; main.c    326                 {
                   669   ; main.c    327                         //estimate the K1 value and the current frequency
                   670   ; main.c    328                         //reduce K2/P/N values in steps so that the frequency
                   671   ; main.c    329                         //jumps is limited to 20MHz or factor of 5 whichever is
                          minimum
                   672   ; main.c    330                         NOP();
                   673           ?LINE   330
00FE CC00          674           NOP
                   675   ; main.c    331                 }
                   676           ?LINE   331
0100               677   _9:
                   678   ; main.c    332         }
                   679           ?LINE   332
0100               680   _10:
                   681   ; main.c    333 
                   682   ; main.c    334 }  //  End of function MAIN_vChangeFreq
                   683           ?LINE   334
0100 DB00          684           RETS
                   685   _MAIN_vChangeFreq       ENDP
               R   686           ?SYMB   '',$,17,334
                   687   ; main.c    335 
                   688   ; main.c    336 //****************************************************************************
                   689   ; main.c    337 // @Function      void main(void)
                   690   ; main.c    338 //
                   691   ; main.c    339 //----------------------------------------------------------------------------
                   692   ; main.c    340 // @Description   This is the main function.
                   693   ; main.c    341 //
                   694   ; main.c    342 //----------------------------------------------------------------------------
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:  14
main

 LOC CODE        LINE   SOURCELINE

                   695   ; main.c    343 // @Returnvalue   None
                   696   ; main.c    344 //
                   697   ; main.c    345 //----------------------------------------------------------------------------
                   698   ; main.c    346 // @Parameters    None
                   699   ; main.c    347 //
                   700   ; main.c    348 //----------------------------------------------------------------------------
                   701   ; main.c    349 // @Date          29.09.2021
                   702   ; main.c    350 //
                   703   ; main.c    351 //****************************************************************************
                   704   ; main.c    352 
                   705   ; main.c    353 // USER CODE BEGIN (Main,1)
                   706   ; main.c    354 
                   707   ; main.c    355 // USER CODE END
                   708   ; main.c    356 
                   709   ; main.c    357 void main(void) {
                   710           ?LINE   357
                   711           PUBLIC  _main
               R   712           ?SYMB   'main',_main,37,1
                   713           ?SYMB   '',357,8,34
                   714   _main   PROC    FAR
                   715           ?SYMB   '',00H,95,0
0102 2804          716           SUB     R0,#04h
               R   717           ?SYMB   '',$,96,4
                   718   ; Locals:
                   719   ;     raw = offset 0
                   720   ; 
                   721   ; Statics:
                   722   ; 
                   723   ; CSEs:
                   724   ; 
                   725   ; main.c    358         // USER CODE BEGIN (Main,2)
                   726   ; main.c    359 
                   727   ; main.c    360         // USER CODE END
                   728   ; main.c    361 
                   729   ; main.c    362         MAIN_vInit();
                   730           ?LINE   362
0104 DA000000  R   731           CALLS   SEG _MAIN_vInit,_MAIN_vInit
                   732   ; main.c    363 
                   733   ; main.c    364         // USER CODE BEGIN (Main,3)
                   734   ; main.c    365         // einmalige Funktionen zum herstellen des Betriebszustandes
                   735   ; main.c    366         // generierung der Tabelle vor dem Starten der Timer
                   736   ; main.c    367         generateTable();
                   737           ?LINE   367
0108 DA008403  R   738           CALLS   SEG _generateTable,_generateTable
                   739   ; main.c    368         // Konfiguriert den ADC
                   740   ; main.c    369         ADC0_vInit();
                   741           ?LINE   369
010C DA000000  R   742           CALLS   SEG _ADC0_vInit,_ADC0_vInit
                   743   ; main.c    370         // Starten des ADCs (externer Trigger, interrupt einschalten, Refill bi
                         t?, Kanal des ADCs)
                   744   ; main.c    371         ADC0_vStartSeq0ReqChNum(0, 0, 1, 6);
                   745           ?LINE   371
0110 E00C          746           MOV     R12,#00h
0112 E00D          747           MOV     R13,#00h
0114 E01E          748           MOV     R14,#01h
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:  15
main

 LOC CODE        LINE   SOURCELINE

0116 E06F          749           MOV     R15,#06h
0118 DA000000  R   750           CALLS   SEG _ADC0_vStartSeq0ReqChNum,_ADC0_vStartSeq0ReqChNum
                   751   ; main.c    372         // Timer 12 von CCU63 starten
                   752   ; main.c    373         CCU63_vStartTmr(CCU63_TIMER_12);
                   753           ?LINE   373
011C E6FCA6EB      754           MOV     R12,#0EBA6h
0120 A8DC          755           MOV     R13,[R12]
0122 1FFD          756           BSET    R13.1
0124 B8DC          757           MOV     [R12],R13
                   758   ; main.c    374         // Timer 12 von CCU62 starten
                   759   ; main.c    375         CCU62_vStartTmr(CCU62_TIMER_12);
                   760           ?LINE   375
0126 E6FC26EB      761           MOV     R12,#0EB26h
012A A8DC          762           MOV     R13,[R12]
012C 1FFD          763           BSET    R13.1
012E B8DC          764           MOV     [R12],R13
                   765   ; main.c    376         // Timer 6 von GPT2 starten
                   766   ; main.c    377         GPT2_vStartTmr(GPT2_TIMER_6);
                   767           ?LINE   377
0130 E6FC48FF      768           MOV     R12,#0FF48h
0134 A8DC          769           MOV     R13,[R12]
0136 0AFD4040      770           BFLDL   R13,#040h,#040h
013A B8DC          771           MOV     [R12],R13
                   772   ; main.c    378         // USER CODE END
                   773   ; main.c    379 
                   774   ; main.c    380         while (1) {
                   775           ?LINE   380
013C EA007C03  R   776           JMPA+   cc_UC,_48
0140               777   _30:
                   778   ; main.c    381                 // USER CODE BEGIN (Main,4)
                   779   ; main.c    382 
                   780   ; main.c    383                 // one rampIndex step = 8ms, 250 steps = 2s
                   781   ; main.c    384                 // Rechtslauf zu Beginn festlegen
                   782   ; main.c    385                 if (rampIndex == 0) {
                   783           ?LINE   385
0140 F2FC0000  R   784           MOV     R12,_rampIndex
0144 3D03          785           JMPR    cc_NZ,_31
                   786   ; main.c    386                         setPhaseChange(clockwise);
                   787           ?LINE   386
0146 E00C          788           MOV     R12,#00h
0148 DA007204  R   789           CALLS   SEG _setPhaseChange,_setPhaseChange
                   790   ; main.c    387                 }
                   791           ?LINE   387
014C               792   _31:
                   793   ; main.c    388 
                   794   ; main.c    389                 // Drehzahlregelung mit Potentiometer
                   795   ; main.c    390                 if (rampIndex > 5250) {
                   796           ?LINE   390
014C F2FC0000  R   797           MOV     R12,_rampIndex
0150 46FC8214      798           CMP     R12,#01482h
0154 FD2D          799           JMPR    cc_ULE,_32
                   800   ; main.c    391                         // lokale Variable für den ADC Messwert
                   801   ; main.c    392                         unsigned long raw;
               R   802           ?SYMB   '',$,9,392
                   803           ?SYMB   'raw',1,98,7
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:  16
main

 LOC CODE        LINE   SOURCELINE

               R   804           ?SYMB   '-4',$,101,1
                   805   ; main.c    393                         // lesen des ADC Werts
                   806   ; main.c    394                         raw = ADC0_uwGetResultData(RESULT_REG_0);
                   807           ?LINE   394
0156 F2FCB0E0      808           MOV     R12,0E0B0h
015A 9AFC07C0      809           JNB     R12.12,_49
015E 0D00          810           JMPR    cc_UC,_50
0160               811   _50:
0160 F2FC50E0      812           MOV     R12,0E050h
0164 66FCFF3F      813           AND     R12,#03FFFh
0168 7C2C          814           SHR     R12,#02h
016A 0D01          815           JMPR    cc_UC,_51
016C               816   _49:
016C E00C          817           MOV     R12,#00h
016E               818   _51:
016E E00D          819           MOV     R13,#00h
0170 B8C0          820           MOV     [R0],R12
0172 C4D00200      821           MOV     [R0+#02H],R13
                   822   ; main.c    395                         // 4096 ist Auflösung des ADC, links = 0, rechts = 4096
                   823   ; main.c    396                         // Normierung des ADC Messwerts auf 25 Hz mechanisch
                   824   ; main.c    397                         frequency = controller((25 * raw) / 4096);
                   825           ?LINE   397
0176 A840          826           MOV     R4,[R0]
0178 D4500200      827           MOV     R5,[R0+#02H]
017C E6FA1900      828           MOV     R10,#019h
0180 E00B          829           MOV     R11,#00h
0182 DA000000  R   830           CALLS   SEG __mul,__mul
0186 F0C5          831           MOV     R12,R5
0188 7CC4          832           SHR     R4,#0Ch
018A 7CC5          833           SHR     R5,#0Ch
018C 5C4C          834           SHL     R12,#04h
018E 704C          835           OR      R4,R12
0190 F0C4          836           MOV     R12,R4
0192 DA00AA04  R   837           CALLS   SEG _controller,_controller
0196 F6F40000  R   838           MOV     _frequency,R4
                   839   ; main.c    398                         // schreiben des CCU62 Schattenregisters
                   840   ; main.c    399                         CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequ
                         ency(frequency));
                   841           ?LINE   399
019A F2FC0000  R   842           MOV     R12,_frequency
019E DA002204  R   843           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
01A2 F6F412EB      844           MOV     0EB12h,R4
                   845   ; main.c    400                         // Übernahme des Schattenregisters erlauben
                   846   ; main.c    401                         CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   847           ?LINE   401
01A6 E6FC26EB      848           MOV     R12,#0EB26h
01AA A8DC          849           MOV     R13,[R12]
01AC 6FFD          850           BSET    R13.6
01AE B8DC          851           MOV     [R12],R13
                   852   ; main.c    402                 }
               R   853           ?SYMB   '',$,102,1
               R   854           ?SYMB   '',$,15,402
                   855           ?LINE   402
01B0               856   _32:
                   857   ; main.c    403 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:  17
main

 LOC CODE        LINE   SOURCELINE

                   858   ; main.c    404                 // steigende Rampe Rechtslauf
                   859   ; main.c    405                 if (rampIndex < 750) {
                   860           ?LINE   405
01B0 F2FC0000  R   861           MOV     R12,_rampIndex
01B4 46FCEE02      862           CMP     R12,#02EEh
01B8 9D19          863           JMPR    cc_UGE,_33
                   864   ; main.c    406                         frequency = (rampIndex / 15);
                   865           ?LINE   406
01BA F2FC0000  R   866           MOV     R12,_rampIndex
01BE E0FD          867           MOV     R13,#0Fh
01C0 F6FC0EFE      868           MOV     MDL,R12
01C4 5BDD          869           DIVU    R13
01C6 F2FC0EFE      870           MOV     R12,MDL
01CA F6FC0000  R   871           MOV     _frequency,R12
                   872   ; main.c    407                         CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequ
                         ency(frequency));
                   873           ?LINE   407
01CE F2FC0000  R   874           MOV     R12,_frequency
01D2 DA002204  R   875           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
01D6 F6F412EB      876           MOV     0EB12h,R4
                   877   ; main.c    408                         CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   878           ?LINE   408
01DA E6FC26EB      879           MOV     R12,#0EB26h
01DE A8DC          880           MOV     R13,[R12]
01E0 6FFD          881           BSET    R13.6
01E2 B8DC          882           MOV     [R12],R13
                   883   ; main.c    409                         IO_vTogglePin(LED_DBG);
                   884           ?LINE   409
01E4 E6FC0101      885           MOV     R12,#0101h
01E8 F6FCE0E9      886           MOV     0E9E0h,R12
                   887   ; main.c    410                 }
                   888           ?LINE   410
01EC               889   _33:
                   890   ; main.c    411 
                   891   ; main.c    412                 // Geschwindigkeit halten
                   892   ; main.c    413                 if (rampIndex < 1500 && rampIndex > 750) {
                   893           ?LINE   413
01EC F2FC0000  R   894           MOV     R12,_rampIndex
01F0 46FCDC05      895           CMP     R12,#05DCh
01F4 9D14          896           JMPR    cc_UGE,_34
01F6 F2FC0000  R   897           MOV     R12,_rampIndex
01FA 46FCEE02      898           CMP     R12,#02EEh
01FE FD0F          899           JMPR    cc_ULE,_35
                   900   ; main.c    414                         frequency = 50;
                   901           ?LINE   414
0200 E6FC3200      902           MOV     R12,#032h
0204 F6FC0000  R   903           MOV     _frequency,R12
                   904   ; main.c    415                         CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequ
                         ency(frequency));
                   905           ?LINE   415
0208 F2FC0000  R   906           MOV     R12,_frequency
020C DA002204  R   907           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
0210 F6F412EB      908           MOV     0EB12h,R4
                   909   ; main.c    416                         CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   910           ?LINE   416
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:  18
main

 LOC CODE        LINE   SOURCELINE

0214 E6FC26EB      911           MOV     R12,#0EB26h
0218 A8DC          912           MOV     R13,[R12]
021A 6FFD          913           BSET    R13.6
021C B8DC          914           MOV     [R12],R13
                   915   ; main.c    417                 }
                   916           ?LINE   417
021E               917   _34:
021E               918   _35:
                   919   ; main.c    418 
                   920   ; main.c    419                 // fallende Rampe Rechtslauf
                   921   ; main.c    420                 if (rampIndex < 2250 && rampIndex > 1500) {
                   922           ?LINE   420
021E F2FC0000  R   923           MOV     R12,_rampIndex
0222 46FCCA08      924           CMP     R12,#08CAh
0226 9D1C          925           JMPR    cc_UGE,_36
0228 F2FC0000  R   926           MOV     R12,_rampIndex
022C 46FCDC05      927           CMP     R12,#05DCh
0230 FD17          928           JMPR    cc_ULE,_37
                   929   ; main.c    421                         frequency = (2250 - rampIndex) / 15;
                   930           ?LINE   421
0232 E6FCCA08      931           MOV     R12,#08CAh
0236 22FC0000  R   932           SUB     R12,_rampIndex
023A E0FD          933           MOV     R13,#0Fh
023C F6FC0EFE      934           MOV     MDL,R12
0240 5BDD          935           DIVU    R13
0242 F2FC0EFE      936           MOV     R12,MDL
0246 F6FC0000  R   937           MOV     _frequency,R12
                   938   ; main.c    422                         CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequ
                         ency(frequency));
                   939           ?LINE   422
024A F2FC0000  R   940           MOV     R12,_frequency
024E DA002204  R   941           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
0252 F6F412EB      942           MOV     0EB12h,R4
                   943   ; main.c    423                         CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   944           ?LINE   423
0256 E6FC26EB      945           MOV     R12,#0EB26h
025A A8DC          946           MOV     R13,[R12]
025C 6FFD          947           BSET    R13.6
025E B8DC          948           MOV     [R12],R13
                   949   ; main.c    424                 }
                   950           ?LINE   424
0260               951   _36:
0260               952   _37:
                   953   ; main.c    425 
                   954   ; main.c    426                 // Phasen tauschen um Drehrichtung zu ändern
                   955   ; main.c    427                 if (rampIndex == 2250) {
                   956           ?LINE   427
0260 F2FC0000  R   957           MOV     R12,_rampIndex
0264 46FCCA08      958           CMP     R12,#08CAh
0268 3D03          959           JMPR    cc_NE,_38
                   960   ; main.c    428                         setPhaseChange(counterclockwise);
                   961           ?LINE   428
026A E01C          962           MOV     R12,#01h
026C DA007204  R   963           CALLS   SEG _setPhaseChange,_setPhaseChange
                   964   ; main.c    429                 }
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:  19
main

 LOC CODE        LINE   SOURCELINE

                   965           ?LINE   429
0270               966   _38:
                   967   ; main.c    430 
                   968   ; main.c    431                 // steigende Rampe Linkslauf
                   969   ; main.c    432                 if (rampIndex < 3000 && rampIndex > 2250) {
                   970           ?LINE   432
0270 F2FC0000  R   971           MOV     R12,_rampIndex
0274 46FCB80B      972           CMP     R12,#0BB8h
0278 9D1C          973           JMPR    cc_UGE,_39
027A F2FC0000  R   974           MOV     R12,_rampIndex
027E 46FCCA08      975           CMP     R12,#08CAh
0282 FD17          976           JMPR    cc_ULE,_40
                   977   ; main.c    433                         frequency = (rampIndex - 2250) / 15;
                   978           ?LINE   433
0284 F2FC0000  R   979           MOV     R12,_rampIndex
0288 26FCCA08      980           SUB     R12,#08CAh
028C E0FD          981           MOV     R13,#0Fh
028E F6FC0EFE      982           MOV     MDL,R12
0292 5BDD          983           DIVU    R13
0294 F2FC0EFE      984           MOV     R12,MDL
0298 F6FC0000  R   985           MOV     _frequency,R12
                   986   ; main.c    434                         CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequ
                         ency(frequency));
                   987           ?LINE   434
029C F2FC0000  R   988           MOV     R12,_frequency
02A0 DA002204  R   989           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
02A4 F6F412EB      990           MOV     0EB12h,R4
                   991   ; main.c    435                         CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   992           ?LINE   435
02A8 E6FC26EB      993           MOV     R12,#0EB26h
02AC A8DC          994           MOV     R13,[R12]
02AE 6FFD          995           BSET    R13.6
02B0 B8DC          996           MOV     [R12],R13
                   997   ; main.c    436                 }
                   998           ?LINE   436
02B2               999   _39:
02B2              1000   _40:
                  1001   ; main.c    437 
                  1002   ; main.c    438                 // Geschwindigkeit halten Linkslauf
                  1003   ; main.c    439                 if (rampIndex < 3750 && rampIndex > 3000) {
                  1004           ?LINE   439
02B2 F2FC0000  R  1005           MOV     R12,_rampIndex
02B6 46FCA60E     1006           CMP     R12,#0EA6h
02BA 9D14         1007           JMPR    cc_UGE,_41
02BC F2FC0000  R  1008           MOV     R12,_rampIndex
02C0 46FCB80B     1009           CMP     R12,#0BB8h
02C4 FD0F         1010           JMPR    cc_ULE,_42
                  1011   ; main.c    440                         frequency = 50;
                  1012           ?LINE   440
02C6 E6FC3200     1013           MOV     R12,#032h
02CA F6FC0000  R  1014           MOV     _frequency,R12
                  1015   ; main.c    441                         CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequ
                         ency(frequency));
                  1016           ?LINE   441
02CE F2FC0000  R  1017           MOV     R12,_frequency
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:  20
main

 LOC CODE        LINE   SOURCELINE

02D2 DA002204  R  1018           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
02D6 F6F412EB     1019           MOV     0EB12h,R4
                  1020   ; main.c    442                         CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                  1021           ?LINE   442
02DA E6FC26EB     1022           MOV     R12,#0EB26h
02DE A8DC         1023           MOV     R13,[R12]
02E0 6FFD         1024           BSET    R13.6
02E2 B8DC         1025           MOV     [R12],R13
                  1026   ; main.c    443                 }
                  1027           ?LINE   443
02E4              1028   _41:
02E4              1029   _42:
                  1030   ; main.c    444 
                  1031   ; main.c    445                 // Fallende Rampe linkslauf
                  1032   ; main.c    446                 if (rampIndex < 4500 && rampIndex > 3750) {
                  1033           ?LINE   446
02E4 F2FC0000  R  1034           MOV     R12,_rampIndex
02E8 46FC9411     1035           CMP     R12,#01194h
02EC 9D1C         1036           JMPR    cc_UGE,_43
02EE F2FC0000  R  1037           MOV     R12,_rampIndex
02F2 46FCA60E     1038           CMP     R12,#0EA6h
02F6 FD17         1039           JMPR    cc_ULE,_44
                  1040   ; main.c    447                         frequency = (4500 - rampIndex) / 15;
                  1041           ?LINE   447
02F8 E6FC9411     1042           MOV     R12,#01194h
02FC 22FC0000  R  1043           SUB     R12,_rampIndex
0300 E0FD         1044           MOV     R13,#0Fh
0302 F6FC0EFE     1045           MOV     MDL,R12
0306 5BDD         1046           DIVU    R13
0308 F2FC0EFE     1047           MOV     R12,MDL
030C F6FC0000  R  1048           MOV     _frequency,R12
                  1049   ; main.c    448                         CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequ
                         ency(frequency));
                  1050           ?LINE   448
0310 F2FC0000  R  1051           MOV     R12,_frequency
0314 DA002204  R  1052           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
0318 F6F412EB     1053           MOV     0EB12h,R4
                  1054   ; main.c    449                         CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                  1055           ?LINE   449
031C E6FC26EB     1056           MOV     R12,#0EB26h
0320 A8DC         1057           MOV     R13,[R12]
0322 6FFD         1058           BSET    R13.6
0324 B8DC         1059           MOV     [R12],R13
                  1060   ; main.c    450                 }
                  1061           ?LINE   450
0326              1062   _43:
0326              1063   _44:
                  1064   ; main.c    451 
                  1065   ; main.c    452                 // Gleichstrombremsen !!! anpassen des CCU62 rampIndex nicht ve
                         rgessen !!!
                  1066   ; main.c    453                 if (rampIndex < 5250 && rampIndex > 4500) {
                  1067           ?LINE   453
0326 F2FC0000  R  1068           MOV     R12,_rampIndex
032A 46FC8214     1069           CMP     R12,#01482h
032E 9D14         1070           JMPR    cc_UGE,_45
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:  21
main

 LOC CODE        LINE   SOURCELINE

0330 F2FC0000  R  1071           MOV     R12,_rampIndex
0334 46FC9411     1072           CMP     R12,#01194h
0338 FD0F         1073           JMPR    cc_ULE,_46
                  1074   ; main.c    454                         frequency = 50;
                  1075           ?LINE   454
033A E6FC3200     1076           MOV     R12,#032h
033E F6FC0000  R  1077           MOV     _frequency,R12
                  1078   ; main.c    455                         CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequ
                         ency(frequency));
                  1079           ?LINE   455
0342 F2FC0000  R  1080           MOV     R12,_frequency
0346 DA002204  R  1081           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
034A F6F412EB     1082           MOV     0EB12h,R4
                  1083   ; main.c    456                         CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                  1084           ?LINE   456
034E E6FC26EB     1085           MOV     R12,#0EB26h
0352 A8DC         1086           MOV     R13,[R12]
0354 6FFD         1087           BSET    R13.6
0356 B8DC         1088           MOV     [R12],R13
                  1089   ; main.c    457                 }
                  1090           ?LINE   457
0358              1091   _45:
0358              1092   _46:
                  1093   ; main.c    458 
                  1094   ; main.c    459                 // Frequenz vor der Drehzzahlregelung auf 0 setzen
                  1095   ; main.c    460                 if (rampIndex == 5250) {
                  1096           ?LINE   460
0358 F2FC0000  R  1097           MOV     R12,_rampIndex
035C 46FC8214     1098           CMP     R12,#01482h
0360 3D0D         1099           JMPR    cc_NE,_47
                  1100   ; main.c    461                         frequency = 0;
                  1101           ?LINE   461
0362 F68E0000  R  1102           MOV     _frequency,ZEROS
                  1103   ; main.c    462                         CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequ
                         ency(frequency));
                  1104           ?LINE   462
0366 F2FC0000  R  1105           MOV     R12,_frequency
036A DA002204  R  1106           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
036E F6F412EB     1107           MOV     0EB12h,R4
                  1108   ; main.c    463                         CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                  1109           ?LINE   463
0372 E6FC26EB     1110           MOV     R12,#0EB26h
0376 A8DC         1111           MOV     R13,[R12]
0378 6FFD         1112           BSET    R13.6
037A B8DC         1113           MOV     [R12],R13
                  1114   ; main.c    464                 }
                  1115           ?LINE   464
037C              1116   _47:
                  1117           ?LINE   380
037C              1118   _48:
037C EA004001  R  1119           JMPA+   cc_UC,_30
                  1120   ; main.c    465 
                  1121   ; main.c    466                 // USER CODE END
                  1122   ; main.c    467         }
                  1123   ; main.c    468 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:  22
main

 LOC CODE        LINE   SOURCELINE

                  1124   ; main.c    469 }  //  End of function main
                  1125           ?LINE   469
0380 0804         1126           ADD     R0,#04h
               R  1127           ?SYMB   '',$,96,0
0382 DB00         1128           RETS
                  1129   _main   ENDP
               R  1130           ?SYMB   '',$,17,469
                  1131   ; main.c    470 
                  1132   ; main.c    471 // USER CODE BEGIN (MAIN_General,10)
                  1133   ; main.c    472 // Funktion zur Generierung der Wertetabelle
                  1134   ; main.c    473 void generateTable() {
                  1135           ?LINE   473
                  1136           PUBLIC  _generateTable
               R  1137           ?SYMB   'generateTable',_generateTable,37,1
                  1138           ?SYMB   '',473,8,34
                  1139   _generateTable  PROC    FAR
                  1140           ?SYMB   '',00H,95,0
0384 26F00A00     1141           SUB     R0,#0Ah
               R  1142           ?SYMB   '',$,96,10
                  1143   ; Locals:
                  1144   ;     i = offset 0
                  1145   ;     stepSize = offset 2
                  1146   ; 
                  1147   ; Statics:
                  1148   ; 
                  1149   ; CSEs:
                  1150   ; 
                  1151   ; main.c    474         double stepSize = (2 * pi) / (ARRAY_SIZE);
                  1152           ?SYMB   'stepSize',2,98,11
               R  1153           ?SYMB   '-8',$,101,2
                  1154           ?LINE   474
0388 F2F40000  R  1155           MOV     R4,_pi
038C F2F50000  R  1156           MOV     R5,(_pi+2)
0390 E6FA0040     1157           MOV     R10,#04000h
0394 E00B         1158           MOV     R11,#00h
0396 DA000000  R  1159           CALLS   SEG __mlf4r,__mlf4r
039A E6FA9644     1160           MOV     R10,#04496h
039E E00B         1161           MOV     R11,#00h
03A0 DA000000  R  1162           CALLS   SEG __dvf4r,__dvf4r
03A4 DA000000  R  1163           CALLS   SEG __cff48r,__cff48r
               R  1164           ?SYMB   '',$,96,18
03A8 F040         1165           MOV     R4,R0
03AA 06F40A00     1166           ADD     R4,#0Ah
03AE DA000000  R  1167           CALLS   SEG __store8n,__store8n
03B2 06F00800     1168           ADD     R0,#08h
               R  1169           ?SYMB   '',$,96,10
                  1170   ; main.c    475         int i;
                  1171           ?SYMB   'i',1,98,16
               R  1172           ?SYMB   '-a',$,101,1
                  1173   ; main.c    476         for (i = 0; i < ARRAY_SIZE; i++) {
                  1174           ?LINE   476
03B6 E00C         1175           MOV     R12,#00h
03B8 B8C0         1176           MOV     [R0],R12
03BA 0D2C         1177           JMPR    cc_UC,_57
03BC              1178   _56:
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:  23
main

 LOC CODE        LINE   SOURCELINE

                  1179   ; main.c    477                 table[i] = (int)((double)((CCU63_T12PR - 140) / 2) * sin(stepSi
                         ze * i));
                  1180           ?LINE   477
03BC 26F00800     1181           SUB     R0,#08h
               R  1182           ?SYMB   '',$,96,18
03C0 E0A4         1183           MOV     R4,#0Ah
03C2 0040         1184           ADD     R4,R0
03C4 DA000000  R  1185           CALLS   SEG __load8n,__load8n
               R  1186           ?SYMB   '',$,96,26
03C8 D4B01000     1187           MOV     R11,[R0+#010H]
03CC F04B         1188           MOV     R4,R11
03CE F0CA         1189           MOV     R12,R10
03D0 DA000000  R  1190           CALLS   SEG __cif28r,__cif28r
               R  1191           ?SYMB   '',$,96,34
03D4 F0BA         1192           MOV     R11,R10
03D6 F0AC         1193           MOV     R10,R12
03D8 DA000000  R  1194           CALLS   SEG __mlf8r,__mlf8r
03DC 06F00800     1195           ADD     R0,#08h
               R  1196           ?SYMB   '',$,96,26
03E0 DA000000  R  1197           CALLS   SEG _sin,_sin
03E4 06F00800     1198           ADD     R0,#08h
               R  1199           ?SYMB   '',$,96,18
03E8 F0B4         1200           MOV     R11,R4
03EA F2FA92EB     1201           MOV     R10,0EB92h
03EE 26FA8C00     1202           SUB     R10,#08Ch
03F2 7C1A         1203           SHR     R10,#01h
03F4 F04A         1204           MOV     R4,R10
03F6 DA000000  R  1205           CALLS   SEG __cuf28r,__cuf28r
               R  1206           ?SYMB   '',$,96,26
03FA DA000000  R  1207           CALLS   SEG __mlf8r,__mlf8r
03FE DA000000  R  1208           CALLS   SEG __cfi82r,__cfi82r
0402 06F01000     1209           ADD     R0,#010h
               R  1210           ?SYMB   '',$,96,10
0406 A8C0         1211           MOV     R12,[R0]
0408 5C1C         1212           SHL     R12,#01h
040A C44C0000  R  1213           MOV     [R12+#_table],R4
                  1214           ?LINE   476
040E A8C0         1215           MOV     R12,[R0]
0410 08C1         1216           ADD     R12,#01h
0412 B8C0         1217           MOV     [R0],R12
0414              1218   _57:
0414 A8C0         1219           MOV     R12,[R0]
0416 46FCB004     1220           CMP     R12,#04B0h
041A 8DD0         1221           JMPR    cc_ULT,_56
                  1222   ; main.c    478         }
                  1223   ; main.c    479 }
               R  1224           ?SYMB   '',$,102,1
               R  1225           ?SYMB   '',$,102,2
                  1226           ?LINE   479
041C 06F00A00     1227           ADD     R0,#0Ah
               R  1228           ?SYMB   '',$,96,0
0420 DB00         1229           RETS
                  1230   _generateTable  ENDP
               R  1231           ?SYMB   '',$,17,479
                  1232   ; main.c    480 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:  24
main

 LOC CODE        LINE   SOURCELINE

                  1233   ; main.c    481 // berechnet den Period Value in Abhängigkeit der Frequenz, Frequenzen < 2 Hz =
                          1Hz
                  1234   ; main.c    482 unsigned int calculateMotorFrequency(unsigned int _frequency) {
                  1235           ?LINE   482
                  1236           PUBLIC  _calculateMotorFrequency
               R  1237           ?SYMB   'calculateMotorFrequency',_calculateMotorFrequency,37,18
                  1238           ?SYMB   '',482,8,34
                  1239   _calculateMotorFrequency        PROC    FAR
                  1240           ?SYMB   '',00H,95,0
0422 88C0         1241           MOV     [-R0],R12
               R  1242           ?SYMB   '',$,96,2
                  1243   ; Locals:
                  1244   ;     _frequency = offset 0
                  1245   ; 
                  1246   ; Statics:
                  1247   ; 
                  1248   ; CSEs:
                  1249   ; 
                  1250           ?SYMB   '_frequency',1,99,18
               R  1251           ?SYMB   '-2',$,101,1
                  1252   ; main.c    483         if (_frequency < 2) {
                  1253           ?LINE   483
0424 A8C0         1254           MOV     R12,[R0]
0426 48C2         1255           CMP     R12,#02h
0428 9D06         1256           JMPR    cc_UGE,_62
                  1257   ; main.c    484                 frequency = 1;
                  1258           ?LINE   484
042A E01C         1259           MOV     R12,#01h
042C F6FC0000  R  1260           MOV     _frequency,R12
                  1261   ; main.c    485                 return (0xD903);
                  1262           ?LINE   485
0430 E6F403D9     1263           MOV     R4,#0D903h
0434 0D1C         1264           JMPR    cc_UC,_63
                  1265   ; main.c    486         } else {
                  1266           ?LINE   486
0436              1267   _62:
                  1268   ; main.c    487                 //float Operation wird nicht ersetzt da Datentyp größer als lon
                         g verwendet werden müsste: benötigter Wertebereich von >10^22
                  1269   ; main.c    488                 return (1 / ((float)_frequency * (float)ARRAY_SIZE * 0.00000001
                         5));     
                  1270           ?LINE   488
0436 A840         1271           MOV     R4,[R0]
0438 DA000000  R  1272           CALLS   SEG __cuf24r,__cuf24r
043C E6FA9644     1273           MOV     R10,#04496h
0440 E00B         1274           MOV     R11,#00h
0442 DA000000  R  1275           CALLS   SEG __mlf4r,__mlf4r
0446 DA000000  R  1276           CALLS   SEG __cff48r,__cff48r
               R  1277           ?SYMB   '',$,96,10
044A F0BA         1278           MOV     R11,R10
044C E6F40000  R  1279           MOV     R4,#_58
0450 DA000000  R  1280           CALLS   SEG __load8n,__load8n
               R  1281           ?SYMB   '',$,96,18
0454 DA000000  R  1282           CALLS   SEG __mlf8r,__mlf8r
0458 F0BA         1283           MOV     R11,R10
045A E6F40000  R  1284           MOV     R4,#_59
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:  25
main

 LOC CODE        LINE   SOURCELINE

045E DA000000  R  1285           CALLS   SEG __load8n,__load8n
               R  1286           ?SYMB   '',$,96,26
0462 DA000000  R  1287           CALLS   SEG __dvf8r,__dvf8r
0466 DA000000  R  1288           CALLS   SEG __cfu82r,__cfu82r
046A 06F01800     1289           ADD     R0,#018h
               R  1290           ?SYMB   '',$,96,2
                  1291   ; main.c    489         }
                  1292   ; main.c    490 }
                  1293           ?LINE   490
046E              1294   _63:
               R  1295           ?SYMB   '',$,102,1
046E 0802         1296           ADD     R0,#02h
               R  1297           ?SYMB   '',$,96,0
0470 DB00         1298           RETS
                  1299   _calculateMotorFrequency        ENDP
               R  1300           ?SYMB   '',$,17,490
                  1301   ; main.c    491 
                  1302   ; main.c    492 // Funktion für die Phasendrehung
                  1303   ; main.c    493 void setPhaseChange(int dir) {
                  1304           ?LINE   493
                  1305           PUBLIC  _setPhaseChange
               R  1306           ?SYMB   'setPhaseChange',_setPhaseChange,37,1
                  1307           ?SYMB   '',493,8,34
                  1308   _setPhaseChange PROC    FAR
                  1309           ?SYMB   '',00H,95,0
0472 88C0         1310           MOV     [-R0],R12
               R  1311           ?SYMB   '',$,96,2
                  1312   ; Locals:
                  1313   ;     dir = offset 0
                  1314   ; 
                  1315   ; Statics:
                  1316   ; 
                  1317   ; CSEs:
                  1318   ; 
                  1319           ?SYMB   'dir',1,99,16
               R  1320           ?SYMB   '-2',$,101,1
                  1321   ; main.c    494         if (dir == clockwise) {
                  1322           ?LINE   494
0474 A8C0         1323           MOV     R12,[R0]
0476 3D0A         1324           JMPR    cc_NZ,_66
                  1325   ; main.c    495                 OFFSET_L1 = 0;
                  1326           ?LINE   495
0478 F68E0000  R  1327           MOV     _OFFSET_L1,ZEROS
                  1328   ; main.c    496                 OFFSET_L2 = ARRAY_SIZE / 3;
                  1329           ?LINE   496
047C E6FC9001     1330           MOV     R12,#0190h
0480 F6FC0000  R  1331           MOV     _OFFSET_L2,R12
                  1332   ; main.c    497                 OFFSET_L3 = (2 * ARRAY_SIZE) / 3;
                  1333           ?LINE   497
0484 E6FC2003     1334           MOV     R12,#0320h
0488 F6FC0000  R  1335           MOV     _OFFSET_L3,R12
                  1336   ; main.c    498         }
                  1337           ?LINE   498
048C              1338   _66:
                  1339   ; main.c    499         if (dir == counterclockwise) {
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:  26
main

 LOC CODE        LINE   SOURCELINE

                  1340           ?LINE   499
048C A8C0         1341           MOV     R12,[R0]
048E 48C1         1342           CMP     R12,#01h
0490 3D0A         1343           JMPR    cc_NE,_67
                  1344   ; main.c    500                 OFFSET_L1 = 0;
                  1345           ?LINE   500
0492 F68E0000  R  1346           MOV     _OFFSET_L1,ZEROS
                  1347   ; main.c    501                 OFFSET_L2 = (2 * ARRAY_SIZE) / 3;
                  1348           ?LINE   501
0496 E6FC2003     1349           MOV     R12,#0320h
049A F6FC0000  R  1350           MOV     _OFFSET_L2,R12
                  1351   ; main.c    502                 OFFSET_L3 = ARRAY_SIZE / 3;
                  1352           ?LINE   502
049E E6FC9001     1353           MOV     R12,#0190h
04A2 F6FC0000  R  1354           MOV     _OFFSET_L3,R12
                  1355   ; main.c    503         }
                  1356           ?LINE   503
04A6              1357   _67:
                  1358   ; main.c    504 }
               R  1359           ?SYMB   '',$,102,1
                  1360           ?LINE   504
04A6 0802         1361           ADD     R0,#02h
               R  1362           ?SYMB   '',$,96,0
04A8 DB00         1363           RETS
                  1364   _setPhaseChange ENDP
               R  1365           ?SYMB   '',$,17,504
                  1366   ; main.c    505 
                  1367   ; main.c    506 // PI Regler
                  1368   ; main.c    507 unsigned int controller(int input) {
                  1369           ?LINE   507
                  1370           PUBLIC  _controller
               R  1371           ?SYMB   'controller',_controller,37,18
                  1372           ?SYMB   '',507,8,34
                  1373   _controller     PROC    FAR
                  1374           ?SYMB   '',00H,95,0
04AA 88C0         1375           MOV     [-R0],R12
               R  1376           ?SYMB   '',$,96,2
04AC 2804         1377           SUB     R0,#04h
               R  1378           ?SYMB   '',$,96,6
                  1379   ; Locals:
                  1380   ;     manipulated_variable = offset 0
                  1381   ;     controller_error = offset 2
                  1382   ;     input = offset 4
                  1383   ; 
                  1384   ; Statics:
                  1385   ; 
                  1386   ; CSEs:
                  1387   ; 
                  1388           ?SYMB   'input',3,99,16
               R  1389           ?SYMB   '-2',$,101,3
                  1390   ; main.c    508         //Regelabweichung = mech Drehzahldifferenz
                  1391   ; main.c    509         int controller_error = input - velocity;  // velocity =^ output/ feedba
                         ck
                  1392           ?SYMB   'controller_error',2,98,16
               R  1393           ?SYMB   '-4',$,101,2
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:  27
main

 LOC CODE        LINE   SOURCELINE

                  1394           ?LINE   509
04AE F2FA0000  R  1395           MOV     R10,_velocity
04B2 F2FB0000  R  1396           MOV     R11,(_velocity+2)
04B6 D4400400     1397           MOV     R4,[R0+#04H]
04BA DA000000  R  1398           CALLS   SEG __cif24r,__cif24r
04BE DA000000  R  1399           CALLS   SEG __sbf4r,__sbf4r
04C2 DA000000  R  1400           CALLS   SEG __cfi42r,__cfi42r
04C6 C4400200     1401           MOV     [R0+#02H],R4
                  1402   ; main.c    510         //P-Regler
                  1403   ; main.c    511         int manipulated_variable = controller_error * K_p;
                  1404           ?SYMB   'manipulated_variable',1,98,16
               R  1405           ?SYMB   '-6',$,101,1
                  1406           ?LINE   511
04CA F2F40000  R  1407           MOV     R4,_K_p
04CE F2F50000  R  1408           MOV     R5,(_K_p+2)
04D2 F0C4         1409           MOV     R12,R4
04D4 D4400200     1410           MOV     R4,[R0+#02H]
04D8 F0D5         1411           MOV     R13,R5
04DA DA000000  R  1412           CALLS   SEG __cif24r,__cif24r
04DE F0BD         1413           MOV     R11,R13
04E0 F0AC         1414           MOV     R10,R12
04E2 DA000000  R  1415           CALLS   SEG __mlf4r,__mlf4r
04E6 DA000000  R  1416           CALLS   SEG __cfi42r,__cfi42r
04EA B840         1417           MOV     [R0],R4
                  1418   ; main.c    512         //I-Regler
                  1419   ; main.c    513         integral_sum = integral_sum + controller_error;  //so gehts auch: integ
                         ral_sum += controller_error
                  1420           ?LINE   513
04EC D4C00200     1421           MOV     R12,[R0+#02H]
04F0 02FC0000  R  1422           ADD     R12,_integral_sum
04F4 F6FC0000  R  1423           MOV     _integral_sum,R12
                  1424   ; main.c    514         
                  1425   ; main.c    515         //P- + I-Regler
                  1426   ; main.c    516         manipulated_variable = manipulated_variable + K_i * integral_sum;
                  1427           ?LINE   516
04F8 F2F40000  R  1428           MOV     R4,_K_i
04FC F2F50000  R  1429           MOV     R5,(_K_i+2)
0500 F0C4         1430           MOV     R12,R4
0502 F2F40000  R  1431           MOV     R4,_integral_sum
0506 F0D5         1432           MOV     R13,R5
0508 DA000000  R  1433           CALLS   SEG __cif24r,__cif24r
050C F0BD         1434           MOV     R11,R13
050E F0AC         1435           MOV     R10,R12
0510 DA000000  R  1436           CALLS   SEG __mlf4r,__mlf4r
0514 F0C4         1437           MOV     R12,R4
0516 A840         1438           MOV     R4,[R0]
0518 F0D5         1439           MOV     R13,R5
051A DA000000  R  1440           CALLS   SEG __cif24r,__cif24r
051E F0BD         1441           MOV     R11,R13
0520 F0AC         1442           MOV     R10,R12
0522 DA000000  R  1443           CALLS   SEG __adf4r,__adf4r
0526 DA000000  R  1444           CALLS   SEG __cfi42r,__cfi42r
052A B840         1445           MOV     [R0],R4
                  1446   ; main.c    517         //Vorsteuerung
                  1447   ; main.c    518         manipulated_variable += input * 2;
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:  28
main

 LOC CODE        LINE   SOURCELINE

                  1448           ?LINE   518
052C D4C00400     1449           MOV     R12,[R0+#04H]
0530 5C1C         1450           SHL     R12,#01h
0532 A8D0         1451           MOV     R13,[R0]
0534 00DC         1452           ADD     R13,R12
0536 B8D0         1453           MOV     [R0],R13
                  1454   ; main.c    519         //Stellgrößenbegrenzung
                  1455   ; main.c    520         if (manipulated_variable > 55) {
                  1456           ?LINE   520
0538 A8C0         1457           MOV     R12,[R0]
053A 46FC3700     1458           CMP     R12,#037h
053E BD04         1459           JMPR    cc_SLE,_71
                  1460   ; main.c    521                 manipulated_variable = 55;
                  1461           ?LINE   521
0540 E6FC3700     1462           MOV     R12,#037h
0544 B8C0         1463           MOV     [R0],R12
                  1464   ; main.c    522         } else if (manipulated_variable < 0) {
                  1465           ?LINE   522
0546 0D05         1466           JMPR    cc_UC,_73
0548              1467   _71:
0548 A8C0         1468           MOV     R12,[R0]
054A 48C0         1469           CMP     R12,#00h
054C DD02         1470           JMPR    cc_SGE,_72
                  1471   ; main.c    523                 manipulated_variable = 1;
                  1472           ?LINE   523
054E E01C         1473           MOV     R12,#01h
0550 B8C0         1474           MOV     [R0],R12
                  1475   ; main.c    524         }
                  1476           ?LINE   524
0552              1477   _72:
                  1478   ; main.c    525         return (manipulated_variable);
                  1479           ?LINE   525
0552              1480   _73:
0552 A840         1481           MOV     R4,[R0]
                  1482   ; main.c    526 }
               R  1483           ?SYMB   '',$,102,1
               R  1484           ?SYMB   '',$,102,2
               R  1485           ?SYMB   '',$,102,3
                  1486           ?LINE   526
0554 0806         1487           ADD     R0,#06h
               R  1488           ?SYMB   '',$,96,0
0556 DB00         1489           RETS
                  1490   _controller     ENDP
               R  1491           ?SYMB   '',$,17,526
                  1492   ; main.c    527 
                  1493   ; main.c    528 // USER CODE END
                  1494   MAIN_4_PR       ENDS
                  1495   
                  1496   MAIN_5_NB       SECTION LDAT WORD PUBLIC 'CNEAR'
0000              1497   MAIN_5_NB_ENTRY LABEL   BYTE
0000              1498   _table  LABEL   WORD
0000              1499           DS      2400
                  1500           PUBLIC  _table
                  1501           ?SYMB   '',01210010H,5,288
                  1502           ?SYMB   '',16,47,289
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:  29
main

 LOC CODE        LINE   SOURCELINE

                  1503           ?SYMB   '',0,30,0
                  1504           ?SYMB   '',1199,49,0
               R  1505           ?SYMB   'table',_table,22,288
0960              1506   _integral_sum   LABEL   WORD
0960              1507           DS      2
                  1508           PUBLIC  _integral_sum
               R  1509           ?SYMB   'integral_sum',_integral_sum,22,16
0962              1510   _velocity       LABEL   WORD
0962              1511           DS      4
                  1512           PUBLIC  _velocity
               R  1513           ?SYMB   'velocity',_velocity,22,10
0966              1514   _rampIndex      LABEL   WORD
0966              1515           DS      2
                  1516           PUBLIC  _rampIndex
               R  1517           ?SYMB   'rampIndex',_rampIndex,22,18
0968              1518   _index  LABEL   WORD
0968              1519           DS      2
                  1520           PUBLIC  _index
               R  1521           ?SYMB   'index',_index,22,18
096A              1522   _OFFSET_L1      LABEL   WORD
096A              1523           DS      2
                  1524           PUBLIC  _OFFSET_L1
               R  1525           ?SYMB   'OFFSET_L1',_OFFSET_L1,22,18
096C              1526   _OFFSET_L3      LABEL   WORD
096C              1527           DS      2
                  1528           PUBLIC  _OFFSET_L3
               R  1529           ?SYMB   'OFFSET_L3',_OFFSET_L3,22,18
096E              1530   _OFFSET_L2      LABEL   WORD
096E              1531           DS      2
                  1532           PUBLIC  _OFFSET_L2
               R  1533           ?SYMB   'OFFSET_L2',_OFFSET_L2,22,18
                  1534   MAIN_5_NB       ENDS
                  1535   
                  1536   MAIN_6_CO       SECTION LDAT WORD PUBLIC 'CROM'
0000              1537   _58     LABEL   WORD
0000 503E2B1B     1538           DW      03E50h,01B2Bh,029A4h,0692Bh
0004 A4292B69    
0008              1539   _59     LABEL   WORD
0008 F03F0000     1540           DW      03FF0h,00h,00h,00h
000C 00000000    
                  1541   MAIN_6_CO       ENDS
                  1542   
                  1543   C166_US SECTION LDAT WORD GLBUSRSTACK 'CUSTACK'
0000              1544           DS      76
                  1545   C166_US ENDS
                  1546   
                  1547   C166_INIT       SECTION PDAT WORD GLOBAL 'CINITROM'
0000 0600         1548           DW      06h
0002 00000000  R  1549           DPPTR   MAIN_ID_NB_ENTRY,MAIN_IR_NB_ENTRY
0006 00000000    
000A 0600         1550           DW      06h
                  1551   C166_INIT       ENDS
                  1552   
                  1553   C166_BSS        SECTION PDAT WORD GLOBAL 'CINITROM'
0000 05000000  R  1554           DW      05h,MAIN_5_NB_ENTRY,0970h
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:34:02  Page:  30
main

 LOC CODE        LINE   SOURCELINE

0004 7009        
                  1555   C166_BSS        ENDS
                  1556   
                  1557   $FLOAT(ANSI)
                  1558           EXTERN  _ADC0_vStartSeq0ReqChNum:FAR
                  1559           EXTERN  _CCU62_vInit:FAR
                  1560           EXTERN  _CCU63_vInit:FAR
                  1561           EXTERN  _sin:FAR
                  1562           EXTERN  _SCS_SwitchToHighPrecBandgap:FAR
                  1563           EXTERN  _SCS_StartXtalOsc:FAR
                  1564           EXTERN  _IO_vInit:FAR
                  1565           EXTERN  _GPT2_vInit:FAR
                  1566           EXTERN  _GPT1_vInit:FAR
                  1567           EXTERN  _SCS_SwitchSystemClock:FAR
                  1568           EXTERN  _ADC0_vInit:FAR
                  1569           EXTERN  __mul:FAR
                  1570           EXTERN  __mlf4r:FAR
                  1571           EXTERN  __dvf4r:FAR
                  1572           EXTERN  __cff48r:FAR
                  1573           EXTERN  __store8n:FAR
                  1574           EXTERN  __load8n:FAR
                  1575           EXTERN  __cif28r:FAR
                  1576           EXTERN  __mlf8r:FAR
                  1577           EXTERN  __cuf28r:FAR
                  1578           EXTERN  __cfi82r:FAR
                  1579           EXTERN  __cuf24r:FAR
                  1580           EXTERN  __dvf8r:FAR
                  1581           EXTERN  __cfu82r:FAR
                  1582           EXTERN  __cif24r:FAR
                  1583           EXTERN  __sbf4r:FAR
                  1584           EXTERN  __cfi42r:FAR
                  1585           EXTERN  __adf4r:FAR
                  1586           EXTERN  __CSTART:FAR
                  1587           REGDEF  R0-R15
                  1588           END

total errors: 0, warnings: 0

