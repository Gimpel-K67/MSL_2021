TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:   1
main

 LOC CODE        LINE   SOURCELINE

                     1   ; TASKING C166/ST10 C compiler v8.7r1 Build 775
                     2   ; options: -e -Id:\programme\tasking\c166 v8.7r1\include -x2 -Bhoeufmknladij -OB
                     3   ;          -OE -zswitch_tabmem_default -zautobitastruct-4 -zautobita-0 -FSC -A1
                     4   ;          -zvolatile_union -O0 -g -newerr -s -i0 -Ms
                     5   $DEBUG
                     6   $NOLOCALS
                     7   $EXTEND2
                     8   $NOMOD166
                     9   $STDNAMES(regsuper10bo.def)
                    10   $EXTMAC
                    11   $CASE
                    12   $NOEXPANDREGBANK
                    13   $MODEL(SMALL)
                    14           NAME    MAIN_C
                    15           ?SYMB   'main.c',32,80,16
                    16           ?SYMB   '',1,82,0
                    17           ?SYMB   '80166',0,84,0
                    18           ?SYMB   '',0,81,0
                    19           ?SYMB   'void',00H,45,1
                    20           ?SYMB   'char',080000H,45,2
                    21           ?SYMB   'unsigned char',080000H,45,3
                    22           ?SYMB   'short',0100000H,45,4
                    23           ?SYMB   'unsigned short',0100000H,45,5
                    24           ?SYMB   'long',0200000H,45,6
                    25           ?SYMB   'unsigned long',0200000H,45,7
                    26           ?SYMB   'float',0200000H,45,10
                    27           ?SYMB   'double',0400000H,45,11
                    28           ?SYMB   'int',0100000H,45,16
                    29           ?SYMB   'unsigned int',0100000H,45,18
                    30           ?SYMB   'bit',010000H,7,256
                    31           ?SYMB   'main.c',0,29,1
                    32           ?SYMB   '',0,86,1
                    33   ; main.c      1 //****************************************************************************
                    34   ; main.c      2 // @Module        Project Settings
                    35   ; main.c      3 // @Filename      MAIN.C
                    36   ; main.c      4 // @Project       DAvE_config.dav
                    37   ; main.c      5 //----------------------------------------------------------------------------
                    38   ; main.c      6 // @Controller    Infineon XE167F-96F66
                    39   ; main.c      7 //
                    40   ; main.c      8 // @Compiler      Tasking Classic
                    41   ; main.c      9 //
                    42   ; main.c     10 // @Codegenerator 2.2
                    43   ; main.c     11 //
                    44   ; main.c     12 // @Description   This file contains the project initialization function.
                    45   ; main.c     13 //
                    46   ; main.c     14 //----------------------------------------------------------------------------
                    47   ; main.c     15 // @Date          30.09.2021 14:42:53
                    48   ; main.c     16 //
                    49   ; main.c     17 //****************************************************************************
                    50   ; main.c     18 
                    51   ; main.c     19 // USER CODE BEGIN (MAIN_General,1)
                    52   ; main.c     20 
                    53   ; main.c     21 // USER CODE END
                    54   ; main.c     22 
                    55   ; main.c     23 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:   2
main

 LOC CODE        LINE   SOURCELINE

                    56   ; main.c     24 
                    57   ; main.c     25 //****************************************************************************
                    58   ; main.c     26 // @Project Includes
                    59   ; main.c     27 //****************************************************************************
                    60   ; main.c     28 
                    61   ; main.c     29 #include "MAIN.H"
                    62           ?SYMB   'MAIN.H',0,29,2
                    63           ?SYMB   '',0,86,2
                    64           ?SYMB   'XE16xREGS.H',0,29,3
                    65           ?SYMB   '',0,86,3
                    66           ?SYMB   '',0,86,2
                    67           ?SYMB   'SCS.H',0,29,3
                    68           ?SYMB   '',0,86,3
                    69           ?SYMB   'T$2',0,14,257
                    70           ?SYMB   'SCS_EXTCLK_F_SYS',0,33,257
                    71           ?SYMB   'SCS_EXTCLK_F_OUT',1,33,257
                    72           ?SYMB   'SCS_EXTCLK_F_PLL',2,33,257
                    73           ?SYMB   'SCS_EXTCLK_F_OSC',3,33,257
                    74           ?SYMB   'SCS_EXTCLK_F_WU',4,33,257
                    75           ?SYMB   'SCS_EXTCLK_F_TCK',5,33,257
                    76           ?SYMB   'SCS_EXTCLK_F_OSC_FL',6,33,257
                    77           ?SYMB   'SCS_EXTCLK_F_RTC',8,33,257
                    78           ?SYMB   '',16,16,0
                    79           ?SYMB   'SCS_EXTCLK_Type',257,13,258
                    80           ?SYMB   '',0,86,2
                    81           ?SYMB   'IO.H',0,29,3
                    82           ?SYMB   '',0,86,3
                    83           ?SYMB   '',0,86,2
                    84           ?SYMB   'GPT1.H',0,29,3
                    85           ?SYMB   '',0,86,3
                    86           ?SYMB   '',0,86,2
                    87           ?SYMB   'GPT2.H',0,29,3
                    88           ?SYMB   '',0,86,3
                    89           ?SYMB   '',0,86,2
                    90           ?SYMB   'CCU62.H',0,29,3
                    91           ?SYMB   '',0,86,3
                    92           ?SYMB   '',0,86,2
                    93           ?SYMB   'CCU63.H',0,29,3
                    94           ?SYMB   '',0,86,3
                    95           ?SYMB   '',0,86,2
                    96           ?SYMB   'ADC0.H',0,29,3
                    97           ?SYMB   '',0,86,3
                    98           ?SYMB   'ubyte',3,13,259
                    99           ?SYMB   '',0,86,2
                   100           ?SYMB   '',0,86,1
                   101   ; main.c     30 
                   102   ; main.c     31 // USER CODE BEGIN (MAIN_General,2)
                   103   ; main.c     32 #include <math.h>
                   104           ?SYMB   'd:\programme\tasking\c166 v8.7r1\include\math.h',0,29,2
                   105           ?SYMB   '',0,86,2
                   106           ?SYMB   '',0,86,1
                   107   ; main.c     33 // USER CODE END
                   108   ; main.c     34 
                   109   ; main.c     35 
                   110   ; main.c     36 //****************************************************************************
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:   3
main

 LOC CODE        LINE   SOURCELINE

                   111   ; main.c     37 // @Macros
                   112   ; main.c     38 //****************************************************************************
                   113   ; main.c     39 
                   114   ; main.c     40 // USER CODE BEGIN (MAIN_General,3)
                   115   ; main.c     41 
                   116   ; main.c     42 // USER CODE END
                   117   ; main.c     43 
                   118   ; main.c     44 
                   119   ; main.c     45 //****************************************************************************
                   120   ; main.c     46 // @Defines
                   121   ; main.c     47 //****************************************************************************
                   122   ; main.c     48 
                   123   ; main.c     49 // USER CODE BEGIN (MAIN_General,4)
                   124   ; main.c     50 // clockwise=rechtslauf, counterclockwise=linkslauf definition einer Präprozess
                         orvariable
                   125   ; main.c     51 #define clockwise (0)
                   126   ; main.c     52 #define counterclockwise (1)
                   127   ; main.c     53 // USER CODE END
                   128   ; main.c     54 
                   129   ; main.c     55 
                   130   ; main.c     56 //****************************************************************************
                   131   ; main.c     57 // @Typedefs
                   132   ; main.c     58 //****************************************************************************
                   133   ; main.c     59 
                   134   ; main.c     60 // USER CODE BEGIN (MAIN_General,5)
                   135   ; main.c     61 
                   136   ; main.c     62 // USER CODE END
                   137   ; main.c     63 
                   138   ; main.c     64 
                   139   ; main.c     65 //****************************************************************************
                   140   ; main.c     66 // @Imported Global Variables
                   141   ; main.c     67 //****************************************************************************
                   142   ; main.c     68 
                   143   ; main.c     69 // USER CODE BEGIN (MAIN_General,6)
                   144   ; main.c     70 
                   145   ; main.c     71 // USER CODE END
                   146   ; main.c     72 
                   147   ; main.c     73 
                   148   ; main.c     74 //****************************************************************************
                   149   ; main.c     75 // @Global Variables
                   150   ; main.c     76 //****************************************************************************
                   151   ; main.c     77 
                   152   ; main.c     78 // USER CODE BEGIN (MAIN_General,7)
                   153   ; main.c     79 // Frequenz des Drehfeldes in Hz
                   154   ; main.c     80 unsigned int frequency = 0;
                   155   MAIN_IR_NB      SECTION PDAT WORD PUBLIC 'CINITROM'
0000               156   MAIN_IR_NB_ENTRY        LABEL   BYTE
0000 0000          157           DW      00h
                   158   MAIN_IR_NB      ENDS
                   159   
                   160   MAIN_ID_NB      SECTION LDAT WORD PUBLIC 'CINITIRAM'
0000               161   MAIN_ID_NB_ENTRY        LABEL   BYTE
0000               162   _frequency      LABEL   WORD
0000               163           DS      2
                   164           PUBLIC  _frequency
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:   4
main

 LOC CODE        LINE   SOURCELINE

               R   165           ?SYMB   'frequency',_frequency,22,18
                   166   ; main.c     81 // Größe der Sinus Wertetabelle
                   167   ; main.c     82 const unsigned int ARRAY_SIZE = 1200;
                   168   MAIN_ID_NB      ENDS
                   169   
                   170   MAIN_3_NC       SECTION LDAT WORD PUBLIC 'CNEARROM'
0000               171   _ARRAY_SIZE     LABEL   WORD
0000 B004          172           DW      04B0h
                   173           PUBLIC  _ARRAY_SIZE
               R   174           ?SYMB   'ARRAY_SIZE',_ARRAY_SIZE,22,18
                   175   ; main.c     83 // Phasenverschiebung
                   176   ; main.c     84 unsigned int OFFSET_L1;
                   177   ; main.c     85 unsigned int OFFSET_L2;
                   178   ; main.c     86 unsigned int OFFSET_L3;
                   179   ; main.c     87 // Wertetabelle des Sinus
                   180   ; main.c     88 int table[ARRAY_SIZE];
                   181   ; main.c     89 // Index der Wertetabelle
                   182   ; main.c     90 unsigned int index;
                   183   ; main.c     91 
                   184   ; main.c     92 float pi = 3.14159265359;
                   185   MAIN_3_NC       ENDS
                   186   
                   187   MAIN_IR_NB      SECTION PDAT
0002 4940DB0F      188           DW      04049h,0FDBh
                   189   MAIN_IR_NB      ENDS
                   190   
                   191   MAIN_ID_NB      SECTION LDAT
0002               192   _pi     LABEL   WORD
0002               193           DS      4
                   194           PUBLIC  _pi
               R   195           ?SYMB   'pi',_pi,22,10
                   196   ; main.c     93 // Index für die Rampensteuerung Erhöhung alle 8 ms
                   197   ; main.c     94 volatile unsigned int rampIndex;
                   198   ; main.c     95 // mechanische Geschwindigkeit des Motors in Hz
                   199   ; main.c     96 volatile float velocity;
                   200   ; main.c     97 // Integralsumme des I-Reglers
                   201   ; main.c     98 int integral_sum;
                   202   ; main.c     99 // Proportionalanteil P-Regler
                   203   ; main.c    100 const float K_p = 0.05;
                   204   MAIN_ID_NB      ENDS
                   205   
                   206   MAIN_3_NC       SECTION LDAT
0002               207   _K_p    LABEL   WORD
0002 4C3DCDCC      208           DW      03D4Ch,0CCCDh
                   209           PUBLIC  _K_p
               R   210           ?SYMB   'K_p',_K_p,22,10
                   211   ; main.c    101 // Integrealanteil I-Rgler
                   212   ; main.c    102 const float K_i = 0.01;
0006               213   _K_i    LABEL   WORD
0006 233C0AD7      214           DW      03C23h,0D70Ah
                   215           PUBLIC  _K_i
               R   216           ?SYMB   'K_i',_K_i,22,10
                   217   ; main.c    103 // Verschiebung des Gleichanteils des Sinus
                   218   ; main.c    104 const unsigned int HALF_PERIODVALUE = 901;
000A               219   _HALF_PERIODVALUE       LABEL   WORD
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:   5
main

 LOC CODE        LINE   SOURCELINE

000A 8503          220           DW      0385h
                   221           PUBLIC  _HALF_PERIODVALUE
               R   222           ?SYMB   'HALF_PERIODVALUE',_HALF_PERIODVALUE,22,18
                   223   ; main.c    105 // USER CODE END
                   224   ; main.c    106 
                   225   ; main.c    107 
                   226   ; main.c    108 //****************************************************************************
                   227   ; main.c    109 // @External Prototypes
                   228   ; main.c    110 //****************************************************************************
                   229   ; main.c    111 
                   230   ; main.c    112 // USER CODE BEGIN (MAIN_General,8)
                   231   ; main.c    113 
                   232   ; main.c    114 // USER CODE END
                   233   ; main.c    115 
                   234   ; main.c    116 
                   235   ; main.c    117 //****************************************************************************
                   236   ; main.c    118 // @Prototypes Of Local Functions
                   237   ; main.c    119 //****************************************************************************
                   238   ; main.c    120 
                   239   ; main.c    121 // USER CODE BEGIN (MAIN_General,9)
                   240   ; main.c    122 // Funktion zur Generierung der Sinus Wertetabelle
                   241   ; main.c    123 void generateTable();
                   242   ; main.c    124 // Funktion zur Berechnung des CCU62 Period Value Registers in Abhängigkeit der
                          Frequenz
                   243   ; main.c    125 unsigned int calculateMotorFrequency(unsigned int _frequency);
                   244   ; main.c    126 // Setzen der Phasenverschiebung für Links- und Rechtslauf, 0 = Rechtslauf 1 = 
                         Linkslauf
                   245   ; main.c    127 void setPhaseChange(int dir);
                   246   ; main.c    128 // Funktion für den PI-Regler, errechnet Stellgröße in abhängigkeit der gemesse
                         nen Geschwindigkeit
                   247   ; main.c    129 unsigned int controller(int input);
                   248   ; main.c    130 // USER CODE END
                   249   ; main.c    131 
                   250   ; main.c    132 
                   251   ; main.c    133 //****************************************************************************
                   252   ; main.c    134 // @Function      void MAIN_vInit(void) 
                   253   ; main.c    135 //
                   254   ; main.c    136 //----------------------------------------------------------------------------
                   255   ; main.c    137 // @Description   This function initializes the microcontroller.
                   256   ; main.c    138 //
                   257   ; main.c    139 //----------------------------------------------------------------------------
                   258   ; main.c    140 // @Returnvalue   None
                   259   ; main.c    141 //
                   260   ; main.c    142 //----------------------------------------------------------------------------
                   261   ; main.c    143 // @Parameters    None
                   262   ; main.c    144 //
                   263   ; main.c    145 //----------------------------------------------------------------------------
                   264   ; main.c    146 // @Date          30.09.2021
                   265   ; main.c    147 //
                   266   ; main.c    148 //****************************************************************************
                   267   ; main.c    149 
                   268   ; main.c    150 // USER CODE BEGIN (Init,1)
                   269   ; main.c    151 
                   270   ; main.c    152 // USER CODE END
                   271   ; main.c    153 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:   6
main

 LOC CODE        LINE   SOURCELINE

                   272   ; main.c    154 void MAIN_vInit(void)
                   273   ; main.c    155 {
                   274   MAIN_3_NC       ENDS
                   275   
                   276   MAIN_4_PR       SECTION CODE WORD PUBLIC 'CPROGRAM'
                   277           ?LINE   155
                   278           PUBLIC  _MAIN_vInit
               R   279           ?SYMB   'MAIN_vInit',_MAIN_vInit,37,1
                   280           ?SYMB   '',155,8,34
                   281           ?SYMB   '',010000H,7,261
                   282           ?SYMB   '',010001H,7,262
                   283           ?SYMB   '',010002H,7,263
                   284           ?SYMB   '',010003H,7,264
                   285           ?SYMB   '',010004H,7,265
                   286           ?SYMB   '',010005H,7,266
                   287           ?SYMB   '',010006H,7,267
                   288           ?SYMB   '',010007H,7,268
                   289           ?SYMB   '',010000H,7,269
                   290           ?SYMB   '',010001H,7,270
                   291           ?SYMB   '',010002H,7,271
                   292           ?SYMB   '',010003H,7,272
                   293           ?SYMB   '',010004H,7,273
                   294           ?SYMB   '',010005H,7,274
                   295           ?SYMB   '',010006H,7,275
                   296           ?SYMB   '',010007H,7,276
                   297           ?SYMB   'T$1',0,40,277
                   298           ?SYMB   'bit0',0,23,261
                   299           ?SYMB   'bit1',1,23,262
                   300           ?SYMB   'bit2',2,23,263
                   301           ?SYMB   'bit3',3,23,264
                   302           ?SYMB   'bit4',4,23,265
                   303           ?SYMB   'bit5',5,23,266
                   304           ?SYMB   'bit6',6,23,267
                   305           ?SYMB   'bit7',7,23,268
                   306           ?SYMB   'bit8',8,23,269
                   307           ?SYMB   'bit9',9,23,270
                   308           ?SYMB   'bit10',10,23,271
                   309           ?SYMB   'bit11',11,23,272
                   310           ?SYMB   'bit12',12,23,273
                   311           ?SYMB   'bit13',13,23,274
                   312           ?SYMB   'bit14',14,23,275
                   313           ?SYMB   'bit15',15,23,276
                   314           ?SYMB   '',16,18,0
                   315           ?SYMB   'T_Reg16',277,13,278
                   316   _MAIN_vInit     PROC    FAR
                   317           ?SYMB   '',00H,95,0
                   318   ; Locals:
                   319   ; 
                   320   ; Statics:
                   321   ; 
                   322   ; CSEs:
                   323   ; 
                   324   ; main.c    156   // USER CODE BEGIN (Init,2)
                   325   ; main.c    157   // USER CODE END
                   326   ; main.c    158 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:   7
main

 LOC CODE        LINE   SOURCELINE

                   327   ; main.c    159   //   globally disable interrupts
                   328   ; main.c    160   PSW_IEN        =  0;          
                   329           ?LINE   160
0000 E6FC10FF      330           MOV     R12,#0FF10h
0004 A8DC          331           MOV     R13,[R12]
0006 66FDFFF7      332           AND     R13,#0F7FFh
000A B8DC          333           MOV     [R12],R13
                   334   ; main.c    161 
                   335   ; main.c    162 
                   336   ; main.c    163   ///  -----------------------------------------------------------------------
                   337   ; main.c    164   ///  Configuration of the System Clock:
                   338   ; main.c    165   ///  -----------------------------------------------------------------------
                   339   ; main.c    166   ///  - VCO clock used, input clock is connected
                   340   ; main.c    167   ///  - input frequency is 10,00 MHz
                   341   ; main.c    168   ///  - configured system frequency is 66,00 MHz
                   342   ; main.c    169 
                   343   ; main.c    170   MAIN_vUnlockProtecReg();     // unlock write security
                   344           ?LINE   170
000C DA003E00  R   345           CALLS   SEG _MAIN_vUnlockProtecReg,_MAIN_vUnlockProtecReg
                   346   ; main.c    171 
                   347   ; main.c    172   MAIN_vChangeFreq();          // load PLL control register
                   348           ?LINE   172
0010 DA00D200  R   349           CALLS   SEG _MAIN_vChangeFreq,_MAIN_vChangeFreq
                   350   ; main.c    173 
                   351   ; main.c    174   //   -----------------------------------------------------------------------
                   352   ; main.c    175   //   Initialization of the Peripherals:
                   353   ; main.c    176   //   -----------------------------------------------------------------------
                   354   ; main.c    177 
                   355   ; main.c    178   //   initializes the Parallel Ports
                   356   ; main.c    179   IO_vInit();
                   357           ?LINE   179
0014 DA000000  R   358           CALLS   SEG _IO_vInit,_IO_vInit
                   359   ; main.c    180 
                   360   ; main.c    181   //   initializes the General Purpose Timer Unit (GPT1)
                   361   ; main.c    182   GPT1_vInit();
                   362           ?LINE   182
0018 DA000000  R   363           CALLS   SEG _GPT1_vInit,_GPT1_vInit
                   364   ; main.c    183 
                   365   ; main.c    184   //   initializes the General Purpose Timer Unit (GPT2)
                   366   ; main.c    185   GPT2_vInit();
                   367           ?LINE   185
001C DA000000  R   368           CALLS   SEG _GPT2_vInit,_GPT2_vInit
                   369   ; main.c    186 
                   370   ; main.c    187   //   initializes the Capture / Compare Unit 62 (CCU62)
                   371   ; main.c    188   CCU62_vInit();
                   372           ?LINE   188
0020 DA000000  R   373           CALLS   SEG _CCU62_vInit,_CCU62_vInit
                   374   ; main.c    189 
                   375   ; main.c    190   //   initializes the Capture / Compare Unit 63 (CCU63)
                   376   ; main.c    191   CCU63_vInit();
                   377           ?LINE   191
0024 DA000000  R   378           CALLS   SEG _CCU63_vInit,_CCU63_vInit
                   379   ; main.c    192 
                   380   ; main.c    193   //   initializes the Analog / Digital Converter  (ADC0)
                   381   ; main.c    194   ADC0_vInit();
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:   8
main

 LOC CODE        LINE   SOURCELINE

                   382           ?LINE   194
0028 DA000000  R   383           CALLS   SEG _ADC0_vInit,_ADC0_vInit
                   384   ; main.c    195 
                   385   ; main.c    196 
                   386   ; main.c    197   //   -----------------------------------------------------------------------
                   387   ; main.c    198   //   Initialization of the Bank Select registers:
                   388   ; main.c    199   //   -----------------------------------------------------------------------
                   389   ; main.c    200 
                   390   ; main.c    201 
                   391   ; main.c    202   // USER CODE BEGIN (Init,3)
                   392   ; main.c    203   // USER CODE END
                   393   ; main.c    204 
                   394   ; main.c    205   MAIN_vLockProtecReg();       // lock write security
                   395           ?LINE   205
002C DA007800  R   396           CALLS   SEG _MAIN_vLockProtecReg,_MAIN_vLockProtecReg
                   397   ; main.c    206 
                   398   ; main.c    207   //   globally enable interrupts
                   399   ; main.c    208   PSW_IEN        =  1;          
                   400           ?LINE   208
0030 E6FC10FF      401           MOV     R12,#0FF10h
0034 A8DC          402           MOV     R13,[R12]
0036 1AFD0808      403           BFLDH   R13,#08h,#08h
003A B8DC          404           MOV     [R12],R13
                   405   ; main.c    209 
                   406   ; main.c    210 } //  End of function MAIN_vInit
                   407           ?LINE   210
003C DB00          408           RETS
                   409   _MAIN_vInit     ENDP
               R   410           ?SYMB   '',$,17,210
                   411   ; main.c    211 
                   412   ; main.c    212 
                   413   ; main.c    213 //****************************************************************************
                   414   ; main.c    214 // @Function      void MAIN_vUnlockProtecReg(void) 
                   415   ; main.c    215 //
                   416   ; main.c    216 //----------------------------------------------------------------------------
                   417   ; main.c    217 // @Description   This function makes it possible to write one protected 
                   418   ; main.c    218 //                register.
                   419   ; main.c    219 //
                   420   ; main.c    220 //----------------------------------------------------------------------------
                   421   ; main.c    221 // @Returnvalue   None
                   422   ; main.c    222 //
                   423   ; main.c    223 //----------------------------------------------------------------------------
                   424   ; main.c    224 // @Parameters    None
                   425   ; main.c    225 //
                   426   ; main.c    226 //----------------------------------------------------------------------------
                   427   ; main.c    227 // @Date          30.09.2021
                   428   ; main.c    228 //
                   429   ; main.c    229 //****************************************************************************
                   430   ; main.c    230 
                   431   ; main.c    231 // USER CODE BEGIN (UnlockProtecReg,1)
                   432   ; main.c    232 
                   433   ; main.c    233 // USER CODE END
                   434   ; main.c    234 
                   435   ; main.c    235 void MAIN_vUnlockProtecReg(void)
                   436   ; main.c    236 {
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:   9
main

 LOC CODE        LINE   SOURCELINE

                   437           ?LINE   236
                   438           PUBLIC  _MAIN_vUnlockProtecReg
               R   439           ?SYMB   'MAIN_vUnlockProtecReg',_MAIN_vUnlockProtecReg,37,1
                   440           ?SYMB   '',236,8,34
                   441           ?SYMB   'uword',18,13,280
                   442   _MAIN_vUnlockProtecReg  PROC    FAR
                   443           ?SYMB   '',00H,95,0
003E 2802          444           SUB     R0,#02h
               R   445           ?SYMB   '',$,96,2
                   446   ; Locals:
                   447   ;     uwPASSWORD = offset 0
                   448   ; 
                   449   ; Statics:
                   450   ; 
                   451   ; CSEs:
                   452   ; 
                   453   ; main.c    237   uword uwPASSWORD;
                   454           ?SYMB   'uwPASSWORD',1,98,280
               R   455           ?SYMB   '-2',$,101,1
                   456   ; main.c    238 
                   457   ; main.c    239     SCU_SLC = 0xAAAA;                   // command 0
                   458           ?LINE   239
0040 E6FCAAAA      459           MOV     R12,#0AAAAh
0044 F6FCC0F0      460           MOV     0F0C0h,R12
                   461   ; main.c    240     SCU_SLC = 0x5554;                   // command 1
                   462           ?LINE   240
0048 E6FC5455      463           MOV     R12,#05554h
004C F6FCC0F0      464           MOV     0F0C0h,R12
                   465   ; main.c    241 
                   466   ; main.c    242     uwPASSWORD = SCU_SLS & 0x00FF;
                   467           ?LINE   242
0050 F2FCC2F0      468           MOV     R12,0F0C2h
0054 66FCFF00      469           AND     R12,#0FFh
0058 B8C0          470           MOV     [R0],R12
                   471   ; main.c    243     uwPASSWORD = (~uwPASSWORD) & 0x00FF;
                   472           ?LINE   243
005A A8C0          473           MOV     R12,[R0]
005C 91C0          474           CPL     R12
005E 66FCFF00      475           AND     R12,#0FFh
0062 B8C0          476           MOV     [R0],R12
                   477   ; main.c    244 
                   478   ; main.c    245     SCU_SLC = 0x9600 | uwPASSWORD;      // command 2
                   479           ?LINE   245
0064 A8C0          480           MOV     R12,[R0]
0066 76FC0096      481           OR      R12,#09600h
006A F6FCC0F0      482           MOV     0F0C0h,R12
                   483   ; main.c    246     SCU_SLC = 0x0000;                   // command 3
                   484           ?LINE   246
006E E00C          485           MOV     R12,#00h
0070 F6FCC0F0      486           MOV     0F0C0h,R12
                   487   ; main.c    247 
                   488   ; main.c    248 } //  End of function MAIN_vUnlockProtecReg
               R   489           ?SYMB   '',$,102,1
                   490           ?LINE   248
0074 0802          491           ADD     R0,#02h
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:  10
main

 LOC CODE        LINE   SOURCELINE

               R   492           ?SYMB   '',$,96,0
0076 DB00          493           RETS
                   494   _MAIN_vUnlockProtecReg  ENDP
               R   495           ?SYMB   '',$,17,248
                   496   ; main.c    249 
                   497   ; main.c    250 
                   498   ; main.c    251 //****************************************************************************
                   499   ; main.c    252 // @Function      void MAIN_vLockProtecReg(void) 
                   500   ; main.c    253 //
                   501   ; main.c    254 //----------------------------------------------------------------------------
                   502   ; main.c    255 // @Description   This function makes it possible to lock one protected 
                   503   ; main.c    256 //                register.
                   504   ; main.c    257 //
                   505   ; main.c    258 //----------------------------------------------------------------------------
                   506   ; main.c    259 // @Returnvalue   None
                   507   ; main.c    260 //
                   508   ; main.c    261 //----------------------------------------------------------------------------
                   509   ; main.c    262 // @Parameters    None
                   510   ; main.c    263 //
                   511   ; main.c    264 //----------------------------------------------------------------------------
                   512   ; main.c    265 // @Date          30.09.2021
                   513   ; main.c    266 //
                   514   ; main.c    267 //****************************************************************************
                   515   ; main.c    268 
                   516   ; main.c    269 // USER CODE BEGIN (LockProtecReg,1)
                   517   ; main.c    270 
                   518   ; main.c    271 // USER CODE END
                   519   ; main.c    272 
                   520   ; main.c    273 void MAIN_vLockProtecReg(void)
                   521   ; main.c    274 {
                   522           ?LINE   274
                   523           PUBLIC  _MAIN_vLockProtecReg
               R   524           ?SYMB   'MAIN_vLockProtecReg',_MAIN_vLockProtecReg,37,1
                   525           ?SYMB   '',274,8,34
                   526   _MAIN_vLockProtecReg    PROC    FAR
                   527           ?SYMB   '',00H,95,0
0078 2802          528           SUB     R0,#02h
               R   529           ?SYMB   '',$,96,2
                   530   ; Locals:
                   531   ;     uwPASSWORD = offset 0
                   532   ; 
                   533   ; Statics:
                   534   ; 
                   535   ; CSEs:
                   536   ; 
                   537   ; main.c    275   uword uwPASSWORD;
                   538           ?SYMB   'uwPASSWORD',1,98,280
               R   539           ?SYMB   '-2',$,101,1
                   540   ; main.c    276 
                   541   ; main.c    277     SCU_SLC = 0xAAAA;                   // command 0
                   542           ?LINE   277
007A E6FCAAAA      543           MOV     R12,#0AAAAh
007E F6FCC0F0      544           MOV     0F0C0h,R12
                   545   ; main.c    278     SCU_SLC = 0x5554;                   // command 1
                   546           ?LINE   278
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:  11
main

 LOC CODE        LINE   SOURCELINE

0082 E6FC5455      547           MOV     R12,#05554h
0086 F6FCC0F0      548           MOV     0F0C0h,R12
                   549   ; main.c    279 
                   550   ; main.c    280     uwPASSWORD = SCU_SLS & 0x00FF;
                   551           ?LINE   280
008A F2FCC2F0      552           MOV     R12,0F0C2h
008E 66FCFF00      553           AND     R12,#0FFh
0092 B8C0          554           MOV     [R0],R12
                   555   ; main.c    281     uwPASSWORD = (~uwPASSWORD) & 0x00FF;
                   556           ?LINE   281
0094 A8C0          557           MOV     R12,[R0]
0096 91C0          558           CPL     R12
0098 66FCFF00      559           AND     R12,#0FFh
009C B8C0          560           MOV     [R0],R12
                   561   ; main.c    282 
                   562   ; main.c    283     SCU_SLC = 0x9600 | uwPASSWORD;      // command 2
                   563           ?LINE   283
009E A8C0          564           MOV     R12,[R0]
00A0 76FC0096      565           OR      R12,#09600h
00A4 F6FCC0F0      566           MOV     0F0C0h,R12
                   567   ; main.c    284     SCU_SLC = 0x1800;                   // command 3; new PASSWOR is 0x00
                   568           ?LINE   284
00A8 E6FC0018      569           MOV     R12,#01800h
00AC F6FCC0F0      570           MOV     0F0C0h,R12
                   571   ; main.c    285 
                   572   ; main.c    286     uwPASSWORD = SCU_SLS & 0x00FF;
                   573           ?LINE   286
00B0 F2FCC2F0      574           MOV     R12,0F0C2h
00B4 66FCFF00      575           AND     R12,#0FFh
00B8 B8C0          576           MOV     [R0],R12
                   577   ; main.c    287     uwPASSWORD = (~uwPASSWORD) & 0x00FF;
                   578           ?LINE   287
00BA A8C0          579           MOV     R12,[R0]
00BC 91C0          580           CPL     R12
00BE 66FCFF00      581           AND     R12,#0FFh
00C2 B8C0          582           MOV     [R0],R12
                   583   ; main.c    288     SCU_SLC = 0x8E00 | uwPASSWORD;      // command 4
                   584           ?LINE   288
00C4 A8C0          585           MOV     R12,[R0]
00C6 76FC008E      586           OR      R12,#08E00h
00CA F6FCC0F0      587           MOV     0F0C0h,R12
                   588   ; main.c    289 
                   589   ; main.c    290 } //  End of function MAIN_vLockProtecReg
               R   590           ?SYMB   '',$,102,1
                   591           ?LINE   290
00CE 0802          592           ADD     R0,#02h
               R   593           ?SYMB   '',$,96,0
00D0 DB00          594           RETS
                   595   _MAIN_vLockProtecReg    ENDP
               R   596           ?SYMB   '',$,17,290
                   597   ; main.c    291 
                   598   ; main.c    292 
                   599   ; main.c    293 //****************************************************************************
                   600   ; main.c    294 // @Function      void MAIN_vChangeFreq(void) 
                   601   ; main.c    295 //
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:  12
main

 LOC CODE        LINE   SOURCELINE

                   602   ; main.c    296 //----------------------------------------------------------------------------
                   603   ; main.c    297 // @Description   This function is used to select the external crystal and
                   604   ; main.c    298 //                configure the system frequency to 80Mhz/66Mhz.
                   605   ; main.c    299 //
                   606   ; main.c    300 //----------------------------------------------------------------------------
                   607   ; main.c    301 // @Returnvalue   None
                   608   ; main.c    302 //
                   609   ; main.c    303 //----------------------------------------------------------------------------
                   610   ; main.c    304 // @Parameters    None
                   611   ; main.c    305 //
                   612   ; main.c    306 //----------------------------------------------------------------------------
                   613   ; main.c    307 // @Date          30.09.2021
                   614   ; main.c    308 //
                   615   ; main.c    309 //****************************************************************************
                   616   ; main.c    310 
                   617   ; main.c    311 // USER CODE BEGIN (ChangeFreq,1)
                   618   ; main.c    312 
                   619   ; main.c    313 // USER CODE END
                   620   ; main.c    314 
                   621   ; main.c    315 void MAIN_vChangeFreq(void)
                   622   ; main.c    316 {
                   623           ?LINE   316
                   624           PUBLIC  _MAIN_vChangeFreq
               R   625           ?SYMB   'MAIN_vChangeFreq',_MAIN_vChangeFreq,37,1
                   626           ?SYMB   '',316,8,34
                   627   _MAIN_vChangeFreq       PROC    FAR
                   628           ?SYMB   '',00H,95,0
                   629   ; Locals:
                   630   ; 
                   631   ; Statics:
                   632   ; 
                   633   ; CSEs:
                   634   ; 
                   635   ; main.c    317   SCS_SwitchToHighPrecBandgap();
                   636           ?LINE   317
00D2 DA000000  R   637           CALLS   SEG _SCS_SwitchToHighPrecBandgap,_SCS_SwitchToHighPrecBandgap
                   638   ; main.c    318 
                   639   ; main.c    319   //For application and internal application resets, the complete PLL configura
                         tion could be avoided
                   640   ; main.c    320   //The entry from application resets and internal application reset is covered
                          in the following differentiation
                   641   ; main.c    321   //in int/ext clock in lock/unlocked state.
                   642   ; main.c    322 
                   643   ; main.c    323   if  ((SCU_PLLSTAT & 0x0004) == 0x0004)             // fR derived from Interna
                         l clock
                   644           ?LINE   323
00D6 F2FCBCF0      645           MOV     R12,0F0BCh
00DA 9AFC0720      646           JNB     R12.2,_7
                   647   ; main.c    324         {
                   648   ; main.c    325             //Normal startup state during boot and the clock
                   649   ; main.c    326             //has to be in the next step configured on the external crystal
                   650   ; main.c    327             //use XTAL/VCO, count XTAL clock
                   651   ; main.c    328 
                   652   ; main.c    329             SCS_StartXtalOsc(1);                     // Starts the crystal osci
                         llator
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:  13
main

 LOC CODE        LINE   SOURCELINE

                   653           ?LINE   329
00DE E01C          654           MOV     R12,#01h
00E0 DA000000  R   655           CALLS   SEG _SCS_StartXtalOsc,_SCS_StartXtalOsc
                   656   ; main.c    330             SCS_SwitchSystemClock(1);                // System clock is increas
                         ed to target speed (80/66 MHz)
                   657           ?LINE   330
00E4 E01C          658           MOV     R12,#01h
00E6 DA000000  R   659           CALLS   SEG _SCS_SwitchSystemClock,_SCS_SwitchSystemClock
                   660   ; main.c    331 
                   661   ; main.c    332         }
                   662           ?LINE   332
00EA DB00          663           RETS
00EC               664   _7:
                   665   ; main.c    333 
                   666   ; main.c    334   else                                               // fR derived from externa
                         l crystal clock
                   667   ; main.c    335         {
                   668   ; main.c    336             if ((SCU_PLLSTAT & 0x1009) == 0x1009)    // fR derived from externa
                         l crystal clock + VCO is locked
                   669           ?LINE   336
00EC F2FCBCF0      670           MOV     R12,0F0BCh
00F0 66FC0910      671           AND     R12,#01009h
00F4 46FC0910      672           CMP     R12,#01009h
00F8 3D02          673           JMPR    cc_NE,_8
                   674   ; main.c    337             {
                   675   ; main.c    338                //usually after an application reset where clock need not be con
                         figured again.
                   676   ; main.c    339                //check K2/P/N values and decide whether these values have to be
                          adapted based on application needs.
                   677   ; main.c    340                NOP();
                   678           ?LINE   340
00FA CC00          679           NOP
                   680   ; main.c    341                //usually the PLL losss of Lock TRAP schould be enabled here.
                   681   ; main.c    342             }
                   682           ?LINE   342
00FC 0D01          683           JMPR    cc_UC,_9
00FE               684   _8:
                   685   ; main.c    343             else                                     //fR derived from external
                          crystal clock + VCO is not locked
                   686   ; main.c    344 
                   687   ; main.c    345             {
                   688   ; main.c    346                //estimate the K1 value and the current frequency
                   689   ; main.c    347                //reduce K2/P/N values in steps so that the frequency
                   690   ; main.c    348                //jumps is limited to 20MHz or factor of 5 whichever is minimum
                   691   ; main.c    349                NOP();
                   692           ?LINE   349
00FE CC00          693           NOP
                   694   ; main.c    350             }
                   695           ?LINE   350
0100               696   _9:
                   697   ; main.c    351 
                   698   ; main.c    352 
                   699   ; main.c    353         }
                   700           ?LINE   353
0100               701   _10:
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:  14
main

 LOC CODE        LINE   SOURCELINE

                   702   ; main.c    354 
                   703   ; main.c    355 } //  End of function MAIN_vChangeFreq
                   704           ?LINE   355
0100 DB00          705           RETS
                   706   _MAIN_vChangeFreq       ENDP
               R   707           ?SYMB   '',$,17,355
                   708   ; main.c    356 
                   709   ; main.c    357 
                   710   ; main.c    358 //****************************************************************************
                   711   ; main.c    359 // @Function      void main(void) 
                   712   ; main.c    360 //
                   713   ; main.c    361 //----------------------------------------------------------------------------
                   714   ; main.c    362 // @Description   This is the main function.
                   715   ; main.c    363 //
                   716   ; main.c    364 //----------------------------------------------------------------------------
                   717   ; main.c    365 // @Returnvalue   None
                   718   ; main.c    366 //
                   719   ; main.c    367 //----------------------------------------------------------------------------
                   720   ; main.c    368 // @Parameters    None
                   721   ; main.c    369 //
                   722   ; main.c    370 //----------------------------------------------------------------------------
                   723   ; main.c    371 // @Date          30.09.2021
                   724   ; main.c    372 //
                   725   ; main.c    373 //****************************************************************************
                   726   ; main.c    374 
                   727   ; main.c    375 // USER CODE BEGIN (Main,1)
                   728   ; main.c    376 
                   729   ; main.c    377 // USER CODE END
                   730   ; main.c    378 
                   731   ; main.c    379 void main(void)
                   732   ; main.c    380 {
                   733           ?LINE   380
                   734           PUBLIC  _main
               R   735           ?SYMB   'main',_main,37,1
                   736           ?SYMB   '',380,8,34
                   737   _main   PROC    FAR
                   738           ?SYMB   '',00H,95,0
0102 2804          739           SUB     R0,#04h
               R   740           ?SYMB   '',$,96,4
                   741   ; Locals:
                   742   ;     raw = offset 0
                   743   ; 
                   744   ; Statics:
                   745   ; 
                   746   ; CSEs:
                   747   ; 
                   748   ; main.c    381   // USER CODE BEGIN (Main,2)
                   749   ; main.c    382   // USER CODE END
                   750   ; main.c    383 
                   751   ; main.c    384   MAIN_vInit();
                   752           ?LINE   384
0104 DA000000  R   753           CALLS   SEG _MAIN_vInit,_MAIN_vInit
                   754   ; main.c    385 
                   755   ; main.c    386   // USER CODE BEGIN (Main,3)
                   756   ; main.c    387         // einmalige Funktionen zum herstellen des Betriebszustandes
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:  15
main

 LOC CODE        LINE   SOURCELINE

                   757   ; main.c    388         // generierung der Tabelle vor dem Starten der Timer
                   758   ; main.c    389         generateTable();
                   759           ?LINE   389
0108 DA008403  R   760           CALLS   SEG _generateTable,_generateTable
                   761   ; main.c    390         // Konfiguriert den ADC
                   762   ; main.c    391         ADC0_vInit();
                   763           ?LINE   391
010C DA000000  R   764           CALLS   SEG _ADC0_vInit,_ADC0_vInit
                   765   ; main.c    392         // Starten des ADCs (externer Trigger, interrupt einschalten, Refill bi
                         t?, Kanal des ADCs)
                   766   ; main.c    393         ADC0_vStartSeq0ReqChNum(0, 0, 1, 6);
                   767           ?LINE   393
0110 E00C          768           MOV     R12,#00h
0112 E00D          769           MOV     R13,#00h
0114 E01E          770           MOV     R14,#01h
0116 E06F          771           MOV     R15,#06h
0118 DA000000  R   772           CALLS   SEG _ADC0_vStartSeq0ReqChNum,_ADC0_vStartSeq0ReqChNum
                   773   ; main.c    394         // Timer 12 von CCU63 starten
                   774   ; main.c    395         CCU63_vStartTmr(CCU63_TIMER_12);
                   775           ?LINE   395
011C E6FCA6EB      776           MOV     R12,#0EBA6h
0120 A8DC          777           MOV     R13,[R12]
0122 1FFD          778           BSET    R13.1
0124 B8DC          779           MOV     [R12],R13
                   780   ; main.c    396         // Timer 12 von CCU62 starten
                   781   ; main.c    397         CCU62_vStartTmr(CCU62_TIMER_12);
                   782           ?LINE   397
0126 E6FC26EB      783           MOV     R12,#0EB26h
012A A8DC          784           MOV     R13,[R12]
012C 1FFD          785           BSET    R13.1
012E B8DC          786           MOV     [R12],R13
                   787   ; main.c    398         // Timer 6 von GPT2 starten
                   788   ; main.c    399         GPT2_vStartTmr(GPT2_TIMER_6);  // USER CODE END
                   789           ?LINE   399
0130 E6FC48FF      790           MOV     R12,#0FF48h
0134 A8DC          791           MOV     R13,[R12]
0136 0AFD4040      792           BFLDL   R13,#040h,#040h
013A B8DC          793           MOV     [R12],R13
                   794   ; main.c    400 
                   795   ; main.c    401   while(1)
                   796           ?LINE   401
013C EA007C03  R   797           JMPA+   cc_UC,_48
0140               798   _30:
                   799   ; main.c    402   {
                   800   ; main.c    403 
                   801   ; main.c    404    // USER CODE BEGIN (Main,4)
                   802   ; main.c    405 
                   803   ; main.c    406                 // one rampIndex step = 8ms, 250 steps = 2s
                   804   ; main.c    407                 // Rechtslauf zu Beginn festlegen
                   805   ; main.c    408                 if (rampIndex == 0) {
                   806           ?LINE   408
0140 F2FC0000  R   807           MOV     R12,_rampIndex
0144 3D03          808           JMPR    cc_NZ,_31
                   809   ; main.c    409                         setPhaseChange(clockwise);
                   810           ?LINE   409
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:  16
main

 LOC CODE        LINE   SOURCELINE

0146 E00C          811           MOV     R12,#00h
0148 DA007204  R   812           CALLS   SEG _setPhaseChange,_setPhaseChange
                   813   ; main.c    410                 }
                   814           ?LINE   410
014C               815   _31:
                   816   ; main.c    411                 // Drehzahlregelung mit Potentiometer
                   817   ; main.c    412                 if (rampIndex > 5250) {
                   818           ?LINE   412
014C F2FC0000  R   819           MOV     R12,_rampIndex
0150 46FC8214      820           CMP     R12,#01482h
0154 FD2D          821           JMPR    cc_ULE,_32
                   822   ; main.c    413                         // lokale Variable für den ADC Messwert
                   823   ; main.c    414                         unsigned long raw;
               R   824           ?SYMB   '',$,9,414
                   825           ?SYMB   'raw',1,98,7
               R   826           ?SYMB   '-4',$,101,1
                   827   ; main.c    415                         // lesen des ADC Werts
                   828   ; main.c    416                         raw = ADC0_uwGetResultData(RESULT_REG_0);
                   829           ?LINE   416
0156 F2FCB0E0      830           MOV     R12,0E0B0h
015A 9AFC07C0      831           JNB     R12.12,_49
015E 0D00          832           JMPR    cc_UC,_50
0160               833   _50:
0160 F2FC50E0      834           MOV     R12,0E050h
0164 66FCFF3F      835           AND     R12,#03FFFh
0168 7C2C          836           SHR     R12,#02h
016A 0D01          837           JMPR    cc_UC,_51
016C               838   _49:
016C E00C          839           MOV     R12,#00h
016E               840   _51:
016E E00D          841           MOV     R13,#00h
0170 B8C0          842           MOV     [R0],R12
0172 C4D00200      843           MOV     [R0+#02H],R13
                   844   ; main.c    417                         // 4096 ist Auflösung des ADC, links = 0, rechts = 4096
                   845   ; main.c    418                         // Normierung des ADC Messwerts auf 25 Hz mechanisch
                   846   ; main.c    419                         frequency = controller((25 * raw) / 4096);
                   847           ?LINE   419
0176 A840          848           MOV     R4,[R0]
0178 D4500200      849           MOV     R5,[R0+#02H]
017C E6FA1900      850           MOV     R10,#019h
0180 E00B          851           MOV     R11,#00h
0182 DA000000  R   852           CALLS   SEG __mul,__mul
0186 F0C5          853           MOV     R12,R5
0188 7CC4          854           SHR     R4,#0Ch
018A 7CC5          855           SHR     R5,#0Ch
018C 5C4C          856           SHL     R12,#04h
018E 704C          857           OR      R4,R12
0190 F0C4          858           MOV     R12,R4
0192 DA00AA04  R   859           CALLS   SEG _controller,_controller
0196 F6F40000  R   860           MOV     _frequency,R4
                   861   ; main.c    420                         // schreiben des CCU62 Schattenregisters
                   862   ; main.c    421                         CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequ
                         ency(frequency));
                   863           ?LINE   421
019A F2FC0000  R   864           MOV     R12,_frequency
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:  17
main

 LOC CODE        LINE   SOURCELINE

019E DA002204  R   865           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
01A2 F6F412EB      866           MOV     0EB12h,R4
                   867   ; main.c    422                         // Übernahme des Schattenregisters erlauben
                   868   ; main.c    423                         CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   869           ?LINE   423
01A6 E6FC26EB      870           MOV     R12,#0EB26h
01AA A8DC          871           MOV     R13,[R12]
01AC 6FFD          872           BSET    R13.6
01AE B8DC          873           MOV     [R12],R13
                   874   ; main.c    424                 }
               R   875           ?SYMB   '',$,102,1
               R   876           ?SYMB   '',$,15,424
                   877           ?LINE   424
01B0               878   _32:
                   879   ; main.c    425                 // steigende Rampe Rechtslauf
                   880   ; main.c    426                 if (rampIndex < 750) {
                   881           ?LINE   426
01B0 F2FC0000  R   882           MOV     R12,_rampIndex
01B4 46FCEE02      883           CMP     R12,#02EEh
01B8 9D19          884           JMPR    cc_UGE,_33
                   885   ; main.c    427                         frequency = (rampIndex / 15);
                   886           ?LINE   427
01BA F2FC0000  R   887           MOV     R12,_rampIndex
01BE E0FD          888           MOV     R13,#0Fh
01C0 F6FC0EFE      889           MOV     MDL,R12
01C4 5BDD          890           DIVU    R13
01C6 F2FC0EFE      891           MOV     R12,MDL
01CA F6FC0000  R   892           MOV     _frequency,R12
                   893   ; main.c    428                         CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequ
                         ency(frequency));
                   894           ?LINE   428
01CE F2FC0000  R   895           MOV     R12,_frequency
01D2 DA002204  R   896           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
01D6 F6F412EB      897           MOV     0EB12h,R4
                   898   ; main.c    429                         CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   899           ?LINE   429
01DA E6FC26EB      900           MOV     R12,#0EB26h
01DE A8DC          901           MOV     R13,[R12]
01E0 6FFD          902           BSET    R13.6
01E2 B8DC          903           MOV     [R12],R13
                   904   ; main.c    430                         IO_vTogglePin(LED_DBG);
                   905           ?LINE   430
01E4 E6FC0101      906           MOV     R12,#0101h
01E8 F6FCE0E9      907           MOV     0E9E0h,R12
                   908   ; main.c    431                 }
                   909           ?LINE   431
01EC               910   _33:
                   911   ; main.c    432                 // Geschwindigkeit halten
                   912   ; main.c    433                 if (rampIndex < 1500 && rampIndex > 750) {
                   913           ?LINE   433
01EC F2FC0000  R   914           MOV     R12,_rampIndex
01F0 46FCDC05      915           CMP     R12,#05DCh
01F4 9D14          916           JMPR    cc_UGE,_34
01F6 F2FC0000  R   917           MOV     R12,_rampIndex
01FA 46FCEE02      918           CMP     R12,#02EEh
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:  18
main

 LOC CODE        LINE   SOURCELINE

01FE FD0F          919           JMPR    cc_ULE,_35
                   920   ; main.c    434                         frequency = 50;
                   921           ?LINE   434
0200 E6FC3200      922           MOV     R12,#032h
0204 F6FC0000  R   923           MOV     _frequency,R12
                   924   ; main.c    435                         CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequ
                         ency(frequency));
                   925           ?LINE   435
0208 F2FC0000  R   926           MOV     R12,_frequency
020C DA002204  R   927           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
0210 F6F412EB      928           MOV     0EB12h,R4
                   929   ; main.c    436                         CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   930           ?LINE   436
0214 E6FC26EB      931           MOV     R12,#0EB26h
0218 A8DC          932           MOV     R13,[R12]
021A 6FFD          933           BSET    R13.6
021C B8DC          934           MOV     [R12],R13
                   935   ; main.c    437                 }
                   936           ?LINE   437
021E               937   _34:
021E               938   _35:
                   939   ; main.c    438                 // fallende Rampe Rechtslauf
                   940   ; main.c    439                 if (rampIndex < 2250 && rampIndex > 1500) {
                   941           ?LINE   439
021E F2FC0000  R   942           MOV     R12,_rampIndex
0222 46FCCA08      943           CMP     R12,#08CAh
0226 9D1C          944           JMPR    cc_UGE,_36
0228 F2FC0000  R   945           MOV     R12,_rampIndex
022C 46FCDC05      946           CMP     R12,#05DCh
0230 FD17          947           JMPR    cc_ULE,_37
                   948   ; main.c    440                         frequency = (2250 - rampIndex) / 15;
                   949           ?LINE   440
0232 E6FCCA08      950           MOV     R12,#08CAh
0236 22FC0000  R   951           SUB     R12,_rampIndex
023A E0FD          952           MOV     R13,#0Fh
023C F6FC0EFE      953           MOV     MDL,R12
0240 5BDD          954           DIVU    R13
0242 F2FC0EFE      955           MOV     R12,MDL
0246 F6FC0000  R   956           MOV     _frequency,R12
                   957   ; main.c    441                         CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequ
                         ency(frequency));
                   958           ?LINE   441
024A F2FC0000  R   959           MOV     R12,_frequency
024E DA002204  R   960           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
0252 F6F412EB      961           MOV     0EB12h,R4
                   962   ; main.c    442                         CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                   963           ?LINE   442
0256 E6FC26EB      964           MOV     R12,#0EB26h
025A A8DC          965           MOV     R13,[R12]
025C 6FFD          966           BSET    R13.6
025E B8DC          967           MOV     [R12],R13
                   968   ; main.c    443                 }
                   969           ?LINE   443
0260               970   _36:
0260               971   _37:
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:  19
main

 LOC CODE        LINE   SOURCELINE

                   972   ; main.c    444                 // Phasen tauschen um Drehrichtung zu ändern
                   973   ; main.c    445                 if (rampIndex == 2250) {
                   974           ?LINE   445
0260 F2FC0000  R   975           MOV     R12,_rampIndex
0264 46FCCA08      976           CMP     R12,#08CAh
0268 3D03          977           JMPR    cc_NE,_38
                   978   ; main.c    446                         setPhaseChange(counterclockwise);
                   979           ?LINE   446
026A E01C          980           MOV     R12,#01h
026C DA007204  R   981           CALLS   SEG _setPhaseChange,_setPhaseChange
                   982   ; main.c    447                 }
                   983           ?LINE   447
0270               984   _38:
                   985   ; main.c    448 
                   986   ; main.c    449                 // steigende Rampe Linkslauf
                   987   ; main.c    450                 if (rampIndex < 3000 && rampIndex > 2250) {
                   988           ?LINE   450
0270 F2FC0000  R   989           MOV     R12,_rampIndex
0274 46FCB80B      990           CMP     R12,#0BB8h
0278 9D1C          991           JMPR    cc_UGE,_39
027A F2FC0000  R   992           MOV     R12,_rampIndex
027E 46FCCA08      993           CMP     R12,#08CAh
0282 FD17          994           JMPR    cc_ULE,_40
                   995   ; main.c    451                         frequency = (rampIndex - 2250) / 15;
                   996           ?LINE   451
0284 F2FC0000  R   997           MOV     R12,_rampIndex
0288 26FCCA08      998           SUB     R12,#08CAh
028C E0FD          999           MOV     R13,#0Fh
028E F6FC0EFE     1000           MOV     MDL,R12
0292 5BDD         1001           DIVU    R13
0294 F2FC0EFE     1002           MOV     R12,MDL
0298 F6FC0000  R  1003           MOV     _frequency,R12
                  1004   ; main.c    452                         CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequ
                         ency(frequency));
                  1005           ?LINE   452
029C F2FC0000  R  1006           MOV     R12,_frequency
02A0 DA002204  R  1007           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
02A4 F6F412EB     1008           MOV     0EB12h,R4
                  1009   ; main.c    453                         CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                  1010           ?LINE   453
02A8 E6FC26EB     1011           MOV     R12,#0EB26h
02AC A8DC         1012           MOV     R13,[R12]
02AE 6FFD         1013           BSET    R13.6
02B0 B8DC         1014           MOV     [R12],R13
                  1015   ; main.c    454                 }
                  1016           ?LINE   454
02B2              1017   _39:
02B2              1018   _40:
                  1019   ; main.c    455                 // Geschwindigkeit halten Linkslauf
                  1020   ; main.c    456                 if (rampIndex < 3750 && rampIndex > 3000) {
                  1021           ?LINE   456
02B2 F2FC0000  R  1022           MOV     R12,_rampIndex
02B6 46FCA60E     1023           CMP     R12,#0EA6h
02BA 9D14         1024           JMPR    cc_UGE,_41
02BC F2FC0000  R  1025           MOV     R12,_rampIndex
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:  20
main

 LOC CODE        LINE   SOURCELINE

02C0 46FCB80B     1026           CMP     R12,#0BB8h
02C4 FD0F         1027           JMPR    cc_ULE,_42
                  1028   ; main.c    457                         frequency = 50;
                  1029           ?LINE   457
02C6 E6FC3200     1030           MOV     R12,#032h
02CA F6FC0000  R  1031           MOV     _frequency,R12
                  1032   ; main.c    458                         CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequ
                         ency(frequency));
                  1033           ?LINE   458
02CE F2FC0000  R  1034           MOV     R12,_frequency
02D2 DA002204  R  1035           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
02D6 F6F412EB     1036           MOV     0EB12h,R4
                  1037   ; main.c    459                         CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                  1038           ?LINE   459
02DA E6FC26EB     1039           MOV     R12,#0EB26h
02DE A8DC         1040           MOV     R13,[R12]
02E0 6FFD         1041           BSET    R13.6
02E2 B8DC         1042           MOV     [R12],R13
                  1043   ; main.c    460                 }
                  1044           ?LINE   460
02E4              1045   _41:
02E4              1046   _42:
                  1047   ; main.c    461                 // Fallende Rampe linkslauf
                  1048   ; main.c    462                 if (rampIndex < 4500 && rampIndex > 3750) {
                  1049           ?LINE   462
02E4 F2FC0000  R  1050           MOV     R12,_rampIndex
02E8 46FC9411     1051           CMP     R12,#01194h
02EC 9D1C         1052           JMPR    cc_UGE,_43
02EE F2FC0000  R  1053           MOV     R12,_rampIndex
02F2 46FCA60E     1054           CMP     R12,#0EA6h
02F6 FD17         1055           JMPR    cc_ULE,_44
                  1056   ; main.c    463                         frequency = (4500 - rampIndex) / 15;
                  1057           ?LINE   463
02F8 E6FC9411     1058           MOV     R12,#01194h
02FC 22FC0000  R  1059           SUB     R12,_rampIndex
0300 E0FD         1060           MOV     R13,#0Fh
0302 F6FC0EFE     1061           MOV     MDL,R12
0306 5BDD         1062           DIVU    R13
0308 F2FC0EFE     1063           MOV     R12,MDL
030C F6FC0000  R  1064           MOV     _frequency,R12
                  1065   ; main.c    464                         CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequ
                         ency(frequency));
                  1066           ?LINE   464
0310 F2FC0000  R  1067           MOV     R12,_frequency
0314 DA002204  R  1068           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
0318 F6F412EB     1069           MOV     0EB12h,R4
                  1070   ; main.c    465                         CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                  1071           ?LINE   465
031C E6FC26EB     1072           MOV     R12,#0EB26h
0320 A8DC         1073           MOV     R13,[R12]
0322 6FFD         1074           BSET    R13.6
0324 B8DC         1075           MOV     [R12],R13
                  1076   ; main.c    466                 }
                  1077           ?LINE   466
0326              1078   _43:
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:  21
main

 LOC CODE        LINE   SOURCELINE

0326              1079   _44:
                  1080   ; main.c    467                 // Gleichstrombremsen !!! anpassen des CCU62 rampIndex nicht ve
                         rgessen !!!
                  1081   ; main.c    468                 if (rampIndex < 5250 && rampIndex > 4500) {
                  1082           ?LINE   468
0326 F2FC0000  R  1083           MOV     R12,_rampIndex
032A 46FC8214     1084           CMP     R12,#01482h
032E 9D14         1085           JMPR    cc_UGE,_45
0330 F2FC0000  R  1086           MOV     R12,_rampIndex
0334 46FC9411     1087           CMP     R12,#01194h
0338 FD0F         1088           JMPR    cc_ULE,_46
                  1089   ; main.c    469                         frequency = 50;
                  1090           ?LINE   469
033A E6FC3200     1091           MOV     R12,#032h
033E F6FC0000  R  1092           MOV     _frequency,R12
                  1093   ; main.c    470                         CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequ
                         ency(frequency));
                  1094           ?LINE   470
0342 F2FC0000  R  1095           MOV     R12,_frequency
0346 DA002204  R  1096           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
034A F6F412EB     1097           MOV     0EB12h,R4
                  1098   ; main.c    471                         CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                  1099           ?LINE   471
034E E6FC26EB     1100           MOV     R12,#0EB26h
0352 A8DC         1101           MOV     R13,[R12]
0354 6FFD         1102           BSET    R13.6
0356 B8DC         1103           MOV     [R12],R13
                  1104   ; main.c    472                 }
                  1105           ?LINE   472
0358              1106   _45:
0358              1107   _46:
                  1108   ; main.c    473                 // Frequenz vor der Drehzzahlregelung auf 0 setzen
                  1109   ; main.c    474                 if (rampIndex == 5250) {
                  1110           ?LINE   474
0358 F2FC0000  R  1111           MOV     R12,_rampIndex
035C 46FC8214     1112           CMP     R12,#01482h
0360 3D0D         1113           JMPR    cc_NE,_47
                  1114   ; main.c    475                         frequency = 0;
                  1115           ?LINE   475
0362 F68E0000  R  1116           MOV     _frequency,ZEROS
                  1117   ; main.c    476                         CCU62_vSetTmrPeriod(CCU62_TIMER_12, calculateMotorFrequ
                         ency(frequency));
                  1118           ?LINE   476
0366 F2FC0000  R  1119           MOV     R12,_frequency
036A DA002204  R  1120           CALLS   SEG _calculateMotorFrequency,_calculateMotorFrequency
036E F6F412EB     1121           MOV     0EB12h,R4
                  1122   ; main.c    477                         CCU62_vEnableShadowTransfer(CCU62_TIMER_12);
                  1123           ?LINE   477
0372 E6FC26EB     1124           MOV     R12,#0EB26h
0376 A8DC         1125           MOV     R13,[R12]
0378 6FFD         1126           BSET    R13.6
037A B8DC         1127           MOV     [R12],R13
                  1128   ; main.c    478                 }
                  1129           ?LINE   478
037C              1130   _47:
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:  22
main

 LOC CODE        LINE   SOURCELINE

                  1131           ?LINE   401
037C              1132   _48:
037C EA004001  R  1133           JMPA+   cc_UC,_30
                  1134   ; main.c    479    // USER CODE END
                  1135   ; main.c    480 
                  1136   ; main.c    481   }
                  1137   ; main.c    482 
                  1138   ; main.c    483 } //  End of function main
                  1139           ?LINE   483
0380 0804         1140           ADD     R0,#04h
               R  1141           ?SYMB   '',$,96,0
0382 DB00         1142           RETS
                  1143   _main   ENDP
               R  1144           ?SYMB   '',$,17,483
                  1145   ; main.c    484 
                  1146   ; main.c    485 
                  1147   ; main.c    486 
                  1148   ; main.c    487 // USER CODE BEGIN (MAIN_General,10)
                  1149   ; main.c    488 // Funktion zur Generierung der Wertetabelle
                  1150   ; main.c    489 void generateTable() {
                  1151           ?LINE   489
                  1152           PUBLIC  _generateTable
               R  1153           ?SYMB   'generateTable',_generateTable,37,1
                  1154           ?SYMB   '',489,8,34
                  1155   _generateTable  PROC    FAR
                  1156           ?SYMB   '',00H,95,0
0384 26F00A00     1157           SUB     R0,#0Ah
               R  1158           ?SYMB   '',$,96,10
                  1159   ; Locals:
                  1160   ;     i = offset 0
                  1161   ;     stepSize = offset 2
                  1162   ; 
                  1163   ; Statics:
                  1164   ; 
                  1165   ; CSEs:
                  1166   ; 
                  1167   ; main.c    490         double stepSize = (2 * pi) / (ARRAY_SIZE);
                  1168           ?SYMB   'stepSize',2,98,11
               R  1169           ?SYMB   '-8',$,101,2
                  1170           ?LINE   490
0388 F2F40000  R  1171           MOV     R4,_pi
038C F2F50000  R  1172           MOV     R5,(_pi+2)
0390 E6FA0040     1173           MOV     R10,#04000h
0394 E00B         1174           MOV     R11,#00h
0396 DA000000  R  1175           CALLS   SEG __mlf4r,__mlf4r
039A E6FA9644     1176           MOV     R10,#04496h
039E E00B         1177           MOV     R11,#00h
03A0 DA000000  R  1178           CALLS   SEG __dvf4r,__dvf4r
03A4 DA000000  R  1179           CALLS   SEG __cff48r,__cff48r
               R  1180           ?SYMB   '',$,96,18
03A8 F040         1181           MOV     R4,R0
03AA 06F40A00     1182           ADD     R4,#0Ah
03AE DA000000  R  1183           CALLS   SEG __store8n,__store8n
03B2 06F00800     1184           ADD     R0,#08h
               R  1185           ?SYMB   '',$,96,10
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:  23
main

 LOC CODE        LINE   SOURCELINE

                  1186   ; main.c    491         int i;
                  1187           ?SYMB   'i',1,98,16
               R  1188           ?SYMB   '-a',$,101,1
                  1189   ; main.c    492         for (i = 0; i < ARRAY_SIZE; i++) {
                  1190           ?LINE   492
03B6 E00C         1191           MOV     R12,#00h
03B8 B8C0         1192           MOV     [R0],R12
03BA 0D2C         1193           JMPR    cc_UC,_57
03BC              1194   _56:
                  1195   ; main.c    493                 table[i] = (int)((double)((CCU63_T12PR - 140) / 2) * sin(stepSi
                         ze * i));
                  1196           ?LINE   493
03BC 26F00800     1197           SUB     R0,#08h
               R  1198           ?SYMB   '',$,96,18
03C0 E0A4         1199           MOV     R4,#0Ah
03C2 0040         1200           ADD     R4,R0
03C4 DA000000  R  1201           CALLS   SEG __load8n,__load8n
               R  1202           ?SYMB   '',$,96,26
03C8 D4B01000     1203           MOV     R11,[R0+#010H]
03CC F04B         1204           MOV     R4,R11
03CE F0CA         1205           MOV     R12,R10
03D0 DA000000  R  1206           CALLS   SEG __cif28r,__cif28r
               R  1207           ?SYMB   '',$,96,34
03D4 F0BA         1208           MOV     R11,R10
03D6 F0AC         1209           MOV     R10,R12
03D8 DA000000  R  1210           CALLS   SEG __mlf8r,__mlf8r
03DC 06F00800     1211           ADD     R0,#08h
               R  1212           ?SYMB   '',$,96,26
03E0 DA000000  R  1213           CALLS   SEG _sin,_sin
03E4 06F00800     1214           ADD     R0,#08h
               R  1215           ?SYMB   '',$,96,18
03E8 F0B4         1216           MOV     R11,R4
03EA F2FA92EB     1217           MOV     R10,0EB92h
03EE 26FA8C00     1218           SUB     R10,#08Ch
03F2 7C1A         1219           SHR     R10,#01h
03F4 F04A         1220           MOV     R4,R10
03F6 DA000000  R  1221           CALLS   SEG __cuf28r,__cuf28r
               R  1222           ?SYMB   '',$,96,26
03FA DA000000  R  1223           CALLS   SEG __mlf8r,__mlf8r
03FE DA000000  R  1224           CALLS   SEG __cfi82r,__cfi82r
0402 06F01000     1225           ADD     R0,#010h
               R  1226           ?SYMB   '',$,96,10
0406 A8C0         1227           MOV     R12,[R0]
0408 5C1C         1228           SHL     R12,#01h
040A C44C0000  R  1229           MOV     [R12+#_table],R4
                  1230           ?LINE   492
040E A8C0         1231           MOV     R12,[R0]
0410 08C1         1232           ADD     R12,#01h
0412 B8C0         1233           MOV     [R0],R12
0414              1234   _57:
0414 A8C0         1235           MOV     R12,[R0]
0416 46FCB004     1236           CMP     R12,#04B0h
041A 8DD0         1237           JMPR    cc_ULT,_56
                  1238   ; main.c    494         }
                  1239   ; main.c    495 }
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:  24
main

 LOC CODE        LINE   SOURCELINE

               R  1240           ?SYMB   '',$,102,1
               R  1241           ?SYMB   '',$,102,2
                  1242           ?LINE   495
041C 06F00A00     1243           ADD     R0,#0Ah
               R  1244           ?SYMB   '',$,96,0
0420 DB00         1245           RETS
                  1246   _generateTable  ENDP
               R  1247           ?SYMB   '',$,17,495
                  1248   ; main.c    496 
                  1249   ; main.c    497 // berechnet den Period Value in Abhängigkeit der Frequenz, Frequenzen < 2 Hz =
                          1Hz
                  1250   ; main.c    498 unsigned int calculateMotorFrequency(unsigned int _frequency) {
                  1251           ?LINE   498
                  1252           PUBLIC  _calculateMotorFrequency
               R  1253           ?SYMB   'calculateMotorFrequency',_calculateMotorFrequency,37,18
                  1254           ?SYMB   '',498,8,34
                  1255   _calculateMotorFrequency        PROC    FAR
                  1256           ?SYMB   '',00H,95,0
0422 88C0         1257           MOV     [-R0],R12
               R  1258           ?SYMB   '',$,96,2
                  1259   ; Locals:
                  1260   ;     _frequency = offset 0
                  1261   ; 
                  1262   ; Statics:
                  1263   ; 
                  1264   ; CSEs:
                  1265   ; 
                  1266           ?SYMB   '_frequency',1,99,18
               R  1267           ?SYMB   '-2',$,101,1
                  1268   ; main.c    499         if (_frequency < 2) {
                  1269           ?LINE   499
0424 A8C0         1270           MOV     R12,[R0]
0426 48C2         1271           CMP     R12,#02h
0428 9D06         1272           JMPR    cc_UGE,_62
                  1273   ; main.c    500                 frequency = 1;
                  1274           ?LINE   500
042A E01C         1275           MOV     R12,#01h
042C F6FC0000  R  1276           MOV     _frequency,R12
                  1277   ; main.c    501                 return (0xD903);
                  1278           ?LINE   501
0430 E6F403D9     1279           MOV     R4,#0D903h
0434 0D1C         1280           JMPR    cc_UC,_63
                  1281   ; main.c    502         } else {
                  1282           ?LINE   502
0436              1283   _62:
                  1284   ; main.c    503                 return (1 / ((float)_frequency * (float)ARRAY_SIZE * 0.00000001
                         5));     //float Operation wird nicht ersetzt da Datentyp grer als long verwendet werden mss
                         te: brcuhte Wertebereich von >10^22
                  1285           ?LINE   503
0436 A840         1286           MOV     R4,[R0]
0438 DA000000  R  1287           CALLS   SEG __cuf24r,__cuf24r
043C E6FA9644     1288           MOV     R10,#04496h
0440 E00B         1289           MOV     R11,#00h
0442 DA000000  R  1290           CALLS   SEG __mlf4r,__mlf4r
0446 DA000000  R  1291           CALLS   SEG __cff48r,__cff48r
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:  25
main

 LOC CODE        LINE   SOURCELINE

               R  1292           ?SYMB   '',$,96,10
044A F0BA         1293           MOV     R11,R10
044C E6F40000  R  1294           MOV     R4,#_58
0450 DA000000  R  1295           CALLS   SEG __load8n,__load8n
               R  1296           ?SYMB   '',$,96,18
0454 DA000000  R  1297           CALLS   SEG __mlf8r,__mlf8r
0458 F0BA         1298           MOV     R11,R10
045A E6F40000  R  1299           MOV     R4,#_59
045E DA000000  R  1300           CALLS   SEG __load8n,__load8n
               R  1301           ?SYMB   '',$,96,26
0462 DA000000  R  1302           CALLS   SEG __dvf8r,__dvf8r
0466 DA000000  R  1303           CALLS   SEG __cfu82r,__cfu82r
046A 06F01800     1304           ADD     R0,#018h
               R  1305           ?SYMB   '',$,96,2
                  1306   ; main.c    504         }
                  1307   ; main.c    505 }
                  1308           ?LINE   505
046E              1309   _63:
               R  1310           ?SYMB   '',$,102,1
046E 0802         1311           ADD     R0,#02h
               R  1312           ?SYMB   '',$,96,0
0470 DB00         1313           RETS
                  1314   _calculateMotorFrequency        ENDP
               R  1315           ?SYMB   '',$,17,505
                  1316   ; main.c    506 
                  1317   ; main.c    507 // Funktion für die Phasendrehung
                  1318   ; main.c    508 void setPhaseChange(int dir) {
                  1319           ?LINE   508
                  1320           PUBLIC  _setPhaseChange
               R  1321           ?SYMB   'setPhaseChange',_setPhaseChange,37,1
                  1322           ?SYMB   '',508,8,34
                  1323   _setPhaseChange PROC    FAR
                  1324           ?SYMB   '',00H,95,0
0472 88C0         1325           MOV     [-R0],R12
               R  1326           ?SYMB   '',$,96,2
                  1327   ; Locals:
                  1328   ;     dir = offset 0
                  1329   ; 
                  1330   ; Statics:
                  1331   ; 
                  1332   ; CSEs:
                  1333   ; 
                  1334           ?SYMB   'dir',1,99,16
               R  1335           ?SYMB   '-2',$,101,1
                  1336   ; main.c    509         if (dir == clockwise) {
                  1337           ?LINE   509
0474 A8C0         1338           MOV     R12,[R0]
0476 3D0A         1339           JMPR    cc_NZ,_66
                  1340   ; main.c    510                 OFFSET_L1 = 0;
                  1341           ?LINE   510
0478 F68E0000  R  1342           MOV     _OFFSET_L1,ZEROS
                  1343   ; main.c    511                 OFFSET_L2 = (2 * ARRAY_SIZE) / 3;
                  1344           ?LINE   511
047C E6FC2003     1345           MOV     R12,#0320h
0480 F6FC0000  R  1346           MOV     _OFFSET_L2,R12
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:  26
main

 LOC CODE        LINE   SOURCELINE

                  1347   ; main.c    512                 OFFSET_L3 = ARRAY_SIZE / 3;
                  1348           ?LINE   512
0484 E6FC9001     1349           MOV     R12,#0190h
0488 F6FC0000  R  1350           MOV     _OFFSET_L3,R12
                  1351   ; main.c    513         }
                  1352           ?LINE   513
048C              1353   _66:
                  1354   ; main.c    514         if (dir == counterclockwise) {
                  1355           ?LINE   514
048C A8C0         1356           MOV     R12,[R0]
048E 48C1         1357           CMP     R12,#01h
0490 3D0A         1358           JMPR    cc_NE,_67
                  1359   ; main.c    515                 OFFSET_L1 = 0;
                  1360           ?LINE   515
0492 F68E0000  R  1361           MOV     _OFFSET_L1,ZEROS
                  1362   ; main.c    516                 OFFSET_L2 = ARRAY_SIZE / 3;
                  1363           ?LINE   516
0496 E6FC9001     1364           MOV     R12,#0190h
049A F6FC0000  R  1365           MOV     _OFFSET_L2,R12
                  1366   ; main.c    517                 OFFSET_L3 = (2 * ARRAY_SIZE) / 3;
                  1367           ?LINE   517
049E E6FC2003     1368           MOV     R12,#0320h
04A2 F6FC0000  R  1369           MOV     _OFFSET_L3,R12
                  1370   ; main.c    518         }
                  1371           ?LINE   518
04A6              1372   _67:
                  1373   ; main.c    519 }
               R  1374           ?SYMB   '',$,102,1
                  1375           ?LINE   519
04A6 0802         1376           ADD     R0,#02h
               R  1377           ?SYMB   '',$,96,0
04A8 DB00         1378           RETS
                  1379   _setPhaseChange ENDP
               R  1380           ?SYMB   '',$,17,519
                  1381   ; main.c    520 
                  1382   ; main.c    521 // PI Regler
                  1383   ; main.c    522 unsigned int controller(int input) {
                  1384           ?LINE   522
                  1385           PUBLIC  _controller
               R  1386           ?SYMB   'controller',_controller,37,18
                  1387           ?SYMB   '',522,8,34
                  1388   _controller     PROC    FAR
                  1389           ?SYMB   '',00H,95,0
04AA 88C0         1390           MOV     [-R0],R12
               R  1391           ?SYMB   '',$,96,2
04AC 2804         1392           SUB     R0,#04h
               R  1393           ?SYMB   '',$,96,6
                  1394   ; Locals:
                  1395   ;     manipulated_variable = offset 0
                  1396   ;     controller_error = offset 2
                  1397   ;     input = offset 4
                  1398   ; 
                  1399   ; Statics:
                  1400   ; 
                  1401   ; CSEs:
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:  27
main

 LOC CODE        LINE   SOURCELINE

                  1402   ; 
                  1403           ?SYMB   'input',3,99,16
               R  1404           ?SYMB   '-2',$,101,3
                  1405   ; main.c    523         //Regelabweichung = mech Drehzahldifferenz
                  1406   ; main.c    524         int controller_error = input - velocity;  // velocity =^ output/ feedba
                         ck
                  1407           ?SYMB   'controller_error',2,98,16
               R  1408           ?SYMB   '-4',$,101,2
                  1409           ?LINE   524
04AE F2FA0000  R  1410           MOV     R10,_velocity
04B2 F2FB0000  R  1411           MOV     R11,(_velocity+2)
04B6 D4400400     1412           MOV     R4,[R0+#04H]
04BA DA000000  R  1413           CALLS   SEG __cif24r,__cif24r
04BE DA000000  R  1414           CALLS   SEG __sbf4r,__sbf4r
04C2 DA000000  R  1415           CALLS   SEG __cfi42r,__cfi42r
04C6 C4400200     1416           MOV     [R0+#02H],R4
                  1417   ; main.c    525         //P-Regler
                  1418   ; main.c    526         int manipulated_variable = controller_error * K_p;
                  1419           ?SYMB   'manipulated_variable',1,98,16
               R  1420           ?SYMB   '-6',$,101,1
                  1421           ?LINE   526
04CA F2F40000  R  1422           MOV     R4,_K_p
04CE F2F50000  R  1423           MOV     R5,(_K_p+2)
04D2 F0C4         1424           MOV     R12,R4
04D4 D4400200     1425           MOV     R4,[R0+#02H]
04D8 F0D5         1426           MOV     R13,R5
04DA DA000000  R  1427           CALLS   SEG __cif24r,__cif24r
04DE F0BD         1428           MOV     R11,R13
04E0 F0AC         1429           MOV     R10,R12
04E2 DA000000  R  1430           CALLS   SEG __mlf4r,__mlf4r
04E6 DA000000  R  1431           CALLS   SEG __cfi42r,__cfi42r
04EA B840         1432           MOV     [R0],R4
                  1433   ; main.c    527         //I-Regler
                  1434   ; main.c    528         integral_sum = integral_sum + controller_error;  //so gehts auch: integ
                         ral_sum += controller_error
                  1435           ?LINE   528
04EC D4C00200     1436           MOV     R12,[R0+#02H]
04F0 02FC0000  R  1437           ADD     R12,_integral_sum
04F4 F6FC0000  R  1438           MOV     _integral_sum,R12
                  1439   ; main.c    529         //if (integral_sum > windup){
                  1440   ; main.c    530         // }
                  1441   ; main.c    531         //P- + I-Regler
                  1442   ; main.c    532         manipulated_variable = manipulated_variable + K_i * integral_sum;
                  1443           ?LINE   532
04F8 F2F40000  R  1444           MOV     R4,_K_i
04FC F2F50000  R  1445           MOV     R5,(_K_i+2)
0500 F0C4         1446           MOV     R12,R4
0502 F2F40000  R  1447           MOV     R4,_integral_sum
0506 F0D5         1448           MOV     R13,R5
0508 DA000000  R  1449           CALLS   SEG __cif24r,__cif24r
050C F0BD         1450           MOV     R11,R13
050E F0AC         1451           MOV     R10,R12
0510 DA000000  R  1452           CALLS   SEG __mlf4r,__mlf4r
0514 F0C4         1453           MOV     R12,R4
0516 A840         1454           MOV     R4,[R0]
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:  28
main

 LOC CODE        LINE   SOURCELINE

0518 F0D5         1455           MOV     R13,R5
051A DA000000  R  1456           CALLS   SEG __cif24r,__cif24r
051E F0BD         1457           MOV     R11,R13
0520 F0AC         1458           MOV     R10,R12
0522 DA000000  R  1459           CALLS   SEG __adf4r,__adf4r
0526 DA000000  R  1460           CALLS   SEG __cfi42r,__cfi42r
052A B840         1461           MOV     [R0],R4
                  1462   ; main.c    533         //Vorsteuerung
                  1463   ; main.c    534         manipulated_variable += input * 2;
                  1464           ?LINE   534
052C D4C00400     1465           MOV     R12,[R0+#04H]
0530 5C1C         1466           SHL     R12,#01h
0532 A8D0         1467           MOV     R13,[R0]
0534 00DC         1468           ADD     R13,R12
0536 B8D0         1469           MOV     [R0],R13
                  1470   ; main.c    535         //Stellgrößenbegrenzung
                  1471   ; main.c    536         if (manipulated_variable > 55) {
                  1472           ?LINE   536
0538 A8C0         1473           MOV     R12,[R0]
053A 46FC3700     1474           CMP     R12,#037h
053E BD04         1475           JMPR    cc_SLE,_71
                  1476   ; main.c    537                 manipulated_variable = 55;
                  1477           ?LINE   537
0540 E6FC3700     1478           MOV     R12,#037h
0544 B8C0         1479           MOV     [R0],R12
                  1480   ; main.c    538         } else if (manipulated_variable < 0) {
                  1481           ?LINE   538
0546 0D05         1482           JMPR    cc_UC,_73
0548              1483   _71:
0548 A8C0         1484           MOV     R12,[R0]
054A 48C0         1485           CMP     R12,#00h
054C DD02         1486           JMPR    cc_SGE,_72
                  1487   ; main.c    539                 manipulated_variable = 1;
                  1488           ?LINE   539
054E E01C         1489           MOV     R12,#01h
0550 B8C0         1490           MOV     [R0],R12
                  1491   ; main.c    540         }
                  1492           ?LINE   540
0552              1493   _72:
                  1494   ; main.c    541         return (manipulated_variable);
                  1495           ?LINE   541
0552              1496   _73:
0552 A840         1497           MOV     R4,[R0]
                  1498   ; main.c    542 }
               R  1499           ?SYMB   '',$,102,1
               R  1500           ?SYMB   '',$,102,2
               R  1501           ?SYMB   '',$,102,3
                  1502           ?LINE   542
0554 0806         1503           ADD     R0,#06h
               R  1504           ?SYMB   '',$,96,0
0556 DB00         1505           RETS
                  1506   _controller     ENDP
               R  1507           ?SYMB   '',$,17,542
                  1508   ; main.c    543 
                  1509   ; main.c    544 // USER CODE END
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:  29
main

 LOC CODE        LINE   SOURCELINE

                  1510   ; main.c    545 
                  1511   MAIN_4_PR       ENDS
                  1512   
                  1513   MAIN_5_NB       SECTION LDAT WORD PUBLIC 'CNEAR'
0000              1514   MAIN_5_NB_ENTRY LABEL   BYTE
0000              1515   _table  LABEL   WORD
0000              1516           DS      2400
                  1517           PUBLIC  _table
                  1518           ?SYMB   '',01210010H,5,288
                  1519           ?SYMB   '',16,47,289
                  1520           ?SYMB   '',0,30,0
                  1521           ?SYMB   '',1199,49,0
               R  1522           ?SYMB   'table',_table,22,288
0960              1523   _integral_sum   LABEL   WORD
0960              1524           DS      2
                  1525           PUBLIC  _integral_sum
               R  1526           ?SYMB   'integral_sum',_integral_sum,22,16
0962              1527   _velocity       LABEL   WORD
0962              1528           DS      4
                  1529           PUBLIC  _velocity
               R  1530           ?SYMB   'velocity',_velocity,22,10
0966              1531   _rampIndex      LABEL   WORD
0966              1532           DS      2
                  1533           PUBLIC  _rampIndex
               R  1534           ?SYMB   'rampIndex',_rampIndex,22,18
0968              1535   _index  LABEL   WORD
0968              1536           DS      2
                  1537           PUBLIC  _index
               R  1538           ?SYMB   'index',_index,22,18
096A              1539   _OFFSET_L1      LABEL   WORD
096A              1540           DS      2
                  1541           PUBLIC  _OFFSET_L1
               R  1542           ?SYMB   'OFFSET_L1',_OFFSET_L1,22,18
096C              1543   _OFFSET_L3      LABEL   WORD
096C              1544           DS      2
                  1545           PUBLIC  _OFFSET_L3
               R  1546           ?SYMB   'OFFSET_L3',_OFFSET_L3,22,18
096E              1547   _OFFSET_L2      LABEL   WORD
096E              1548           DS      2
                  1549           PUBLIC  _OFFSET_L2
               R  1550           ?SYMB   'OFFSET_L2',_OFFSET_L2,22,18
                  1551   MAIN_5_NB       ENDS
                  1552   
                  1553   MAIN_6_CO       SECTION LDAT WORD PUBLIC 'CROM'
0000              1554   _58     LABEL   WORD
0000 503E2B1B     1555           DW      03E50h,01B2Bh,029A4h,0692Bh
0004 A4292B69    
0008              1556   _59     LABEL   WORD
0008 F03F0000     1557           DW      03FF0h,00h,00h,00h
000C 00000000    
                  1558   MAIN_6_CO       ENDS
                  1559   
                  1560   C166_US SECTION LDAT WORD GLBUSRSTACK 'CUSTACK'
0000              1561           DS      76
                  1562   C166_US ENDS
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 14:55:23  Page:  30
main

 LOC CODE        LINE   SOURCELINE

                  1563   
                  1564   C166_INIT       SECTION PDAT WORD GLOBAL 'CINITROM'
0000 0600         1565           DW      06h
0002 00000000  R  1566           DPPTR   MAIN_ID_NB_ENTRY,MAIN_IR_NB_ENTRY
0006 00000000    
000A 0600         1567           DW      06h
                  1568   C166_INIT       ENDS
                  1569   
                  1570   C166_BSS        SECTION PDAT WORD GLOBAL 'CINITROM'
0000 05000000  R  1571           DW      05h,MAIN_5_NB_ENTRY,0970h
0004 7009        
                  1572   C166_BSS        ENDS
                  1573   
                  1574   $FLOAT(ANSI)
                  1575           EXTERN  _ADC0_vStartSeq0ReqChNum:FAR
                  1576           EXTERN  _CCU62_vInit:FAR
                  1577           EXTERN  _CCU63_vInit:FAR
                  1578           EXTERN  _sin:FAR
                  1579           EXTERN  _SCS_SwitchToHighPrecBandgap:FAR
                  1580           EXTERN  _SCS_StartXtalOsc:FAR
                  1581           EXTERN  _IO_vInit:FAR
                  1582           EXTERN  _GPT2_vInit:FAR
                  1583           EXTERN  _GPT1_vInit:FAR
                  1584           EXTERN  _SCS_SwitchSystemClock:FAR
                  1585           EXTERN  _ADC0_vInit:FAR
                  1586           EXTERN  __mul:FAR
                  1587           EXTERN  __mlf4r:FAR
                  1588           EXTERN  __dvf4r:FAR
                  1589           EXTERN  __cff48r:FAR
                  1590           EXTERN  __store8n:FAR
                  1591           EXTERN  __load8n:FAR
                  1592           EXTERN  __cif28r:FAR
                  1593           EXTERN  __mlf8r:FAR
                  1594           EXTERN  __cuf28r:FAR
                  1595           EXTERN  __cfi82r:FAR
                  1596           EXTERN  __cuf24r:FAR
                  1597           EXTERN  __dvf8r:FAR
                  1598           EXTERN  __cfu82r:FAR
                  1599           EXTERN  __cif24r:FAR
                  1600           EXTERN  __sbf4r:FAR
                  1601           EXTERN  __cfi42r:FAR
                  1602           EXTERN  __adf4r:FAR
                  1603           EXTERN  __CSTART:FAR
                  1604           REGDEF  R0-R15
                  1605           END

total errors: 0, warnings: 0

