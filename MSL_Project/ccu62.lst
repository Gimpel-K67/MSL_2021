TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:31:52  Page:   1
ccu62

 LOC CODE        LINE   SOURCELINE

                     1   ; TASKING C166/ST10 C compiler v8.7r1 Build 775
                     2   ; options: -e -Id:\programme\tasking\c166 v8.7r1\include -x2 -Bhoeufmknladij -OB
                     3   ;          -OE -zswitch_tabmem_default -zautobitastruct-4 -zautobita-0 -FSC -A1
                     4   ;          -zvolatile_union -O0 -g -newerr -s -i0 -Ms
                     5   $DEBUG
                     6   $NOLOCALS
                     7   $EXTEND2
                     8   $NOMOD166
                     9   $STDNAMES(regsuper10bo.def)
                    10   $EXTMAC
                    11   $CASE
                    12   $NOEXPANDREGBANK
                    13   $MODEL(SMALL)
                    14           NAME    CCU62_C
                    15           ?SYMB   'ccu62.c',32,80,16
                    16           ?SYMB   '',1,82,0
                    17           ?SYMB   '80166',0,84,0
                    18           ?SYMB   '',0,81,0
                    19           ?SYMB   'void',00H,45,1
                    20           ?SYMB   'char',080000H,45,2
                    21           ?SYMB   'unsigned char',080000H,45,3
                    22           ?SYMB   'short',0100000H,45,4
                    23           ?SYMB   'unsigned short',0100000H,45,5
                    24           ?SYMB   'long',0200000H,45,6
                    25           ?SYMB   'unsigned long',0200000H,45,7
                    26           ?SYMB   'float',0200000H,45,10
                    27           ?SYMB   'double',0400000H,45,11
                    28           ?SYMB   'int',0100000H,45,16
                    29           ?SYMB   'unsigned int',0100000H,45,18
                    30           ?SYMB   'bit',010000H,7,256
                    31           ?SYMB   'ccu62.c',0,29,1
                    32           ?SYMB   '',0,86,1
                    33   ; ccu62.c     1 //****************************************************************************
                    34   ; ccu62.c     2 // @Module        Capture / Compare Unit 62 (CCU62)
                    35   ; ccu62.c     3 // @Filename      CCU62.C
                    36   ; ccu62.c     4 // @Project       DAvE_config.dav
                    37   ; ccu62.c     5 //----------------------------------------------------------------------------
                    38   ; ccu62.c     6 // @Controller    Infineon XE167F-96F66
                    39   ; ccu62.c     7 //
                    40   ; ccu62.c     8 // @Compiler      Tasking Classic
                    41   ; ccu62.c     9 //
                    42   ; ccu62.c    10 // @Codegenerator 2.2
                    43   ; ccu62.c    11 //
                    44   ; ccu62.c    12 // @Description   This file contains functions that use the CCU62 module.
                    45   ; ccu62.c    13 //
                    46   ; ccu62.c    14 //----------------------------------------------------------------------------
                    47   ; ccu62.c    15 // @Date          30.09.2021 14:42:54
                    48   ; ccu62.c    16 //
                    49   ; ccu62.c    17 //****************************************************************************
                    50   ; ccu62.c    18 
                    51   ; ccu62.c    19 // USER CODE BEGIN (CCU62_General,1)
                    52   ; ccu62.c    20 
                    53   ; ccu62.c    21 // USER CODE END
                    54   ; ccu62.c    22 
                    55   ; ccu62.c    23 //****************************************************************************
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:31:52  Page:   2
ccu62

 LOC CODE        LINE   SOURCELINE

                    56   ; ccu62.c    24 // @Project Includes
                    57   ; ccu62.c    25 //****************************************************************************
                    58   ; ccu62.c    26 
                    59   ; ccu62.c    27 #include "MAIN.H"
                    60           ?SYMB   'MAIN.H',0,29,2
                    61           ?SYMB   '',0,86,2
                    62           ?SYMB   'XE16xREGS.H',0,29,3
                    63           ?SYMB   '',0,86,3
                    64           ?SYMB   '',0,86,2
                    65           ?SYMB   'SCS.H',0,29,3
                    66           ?SYMB   '',0,86,3
                    67           ?SYMB   'T$2',0,14,257
                    68           ?SYMB   'SCS_EXTCLK_F_SYS',0,33,257
                    69           ?SYMB   'SCS_EXTCLK_F_OUT',1,33,257
                    70           ?SYMB   'SCS_EXTCLK_F_PLL',2,33,257
                    71           ?SYMB   'SCS_EXTCLK_F_OSC',3,33,257
                    72           ?SYMB   'SCS_EXTCLK_F_WU',4,33,257
                    73           ?SYMB   'SCS_EXTCLK_F_TCK',5,33,257
                    74           ?SYMB   'SCS_EXTCLK_F_OSC_FL',6,33,257
                    75           ?SYMB   'SCS_EXTCLK_F_RTC',8,33,257
                    76           ?SYMB   '',16,16,0
                    77           ?SYMB   'SCS_EXTCLK_Type',257,13,258
                    78           ?SYMB   '',0,86,2
                    79           ?SYMB   'IO.H',0,29,3
                    80           ?SYMB   '',0,86,3
                    81           ?SYMB   '',0,86,2
                    82           ?SYMB   'GPT1.H',0,29,3
                    83           ?SYMB   '',0,86,3
                    84           ?SYMB   '',0,86,2
                    85           ?SYMB   'GPT2.H',0,29,3
                    86           ?SYMB   '',0,86,3
                    87           ?SYMB   '',0,86,2
                    88           ?SYMB   'CCU62.H',0,29,3
                    89           ?SYMB   '',0,86,3
                    90           ?SYMB   '',0,86,2
                    91           ?SYMB   'CCU63.H',0,29,3
                    92           ?SYMB   '',0,86,3
                    93           ?SYMB   '',0,86,2
                    94           ?SYMB   'ADC0.H',0,29,3
                    95           ?SYMB   '',0,86,3
                    96           ?SYMB   'ubyte',3,13,259
                    97           ?SYMB   '',0,86,2
                    98           ?SYMB   '',0,86,1
                    99   ; ccu62.c    28 
                   100   ; ccu62.c    29 // USER CODE BEGIN (CCU62_General,2)
                   101   ; ccu62.c    30 
                   102   ; ccu62.c    31 // USER CODE END
                   103   ; ccu62.c    32 
                   104   ; ccu62.c    33 //****************************************************************************
                   105   ; ccu62.c    34 // @Macros
                   106   ; ccu62.c    35 //****************************************************************************
                   107   ; ccu62.c    36 
                   108   ; ccu62.c    37 // USER CODE BEGIN (CCU62_General,3)
                   109   ; ccu62.c    38 
                   110   ; ccu62.c    39 // USER CODE END
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:31:52  Page:   3
ccu62

 LOC CODE        LINE   SOURCELINE

                   111   ; ccu62.c    40 
                   112   ; ccu62.c    41 //****************************************************************************
                   113   ; ccu62.c    42 // @Defines
                   114   ; ccu62.c    43 //****************************************************************************
                   115   ; ccu62.c    44 
                   116   ; ccu62.c    45 // USER CODE BEGIN (CCU62_General,4)
                   117   ; ccu62.c    46 
                   118   ; ccu62.c    47 // USER CODE END
                   119   ; ccu62.c    48 
                   120   ; ccu62.c    49 //****************************************************************************
                   121   ; ccu62.c    50 // @Typedefs
                   122   ; ccu62.c    51 //****************************************************************************
                   123   ; ccu62.c    52 
                   124   ; ccu62.c    53 // USER CODE BEGIN (CCU62_General,5)
                   125   ; ccu62.c    54 
                   126   ; ccu62.c    55 // USER CODE END
                   127   ; ccu62.c    56 
                   128   ; ccu62.c    57 //****************************************************************************
                   129   ; ccu62.c    58 // @Imported Global Variables
                   130   ; ccu62.c    59 //****************************************************************************
                   131   ; ccu62.c    60 
                   132   ; ccu62.c    61 // USER CODE BEGIN (CCU62_General,6)
                   133   ; ccu62.c    62 // Externe Globale Variablen von der Main.c übernehmen
                   134   ; ccu62.c    63 extern const unsigned int ARRAY_SIZE;
                   135   ; ccu62.c    64 extern unsigned int index;
                   136   ; ccu62.c    65 extern volatile unsigned int rampIndex;
                   137   ; ccu62.c    66 // USER CODE END
                   138   ; ccu62.c    67 
                   139   ; ccu62.c    68 //****************************************************************************
                   140   ; ccu62.c    69 // @Global Variables
                   141   ; ccu62.c    70 //****************************************************************************
                   142   ; ccu62.c    71 
                   143   ; ccu62.c    72 // USER CODE BEGIN (CCU62_General,7)
                   144   ; ccu62.c    73 
                   145   ; ccu62.c    74 // USER CODE END
                   146   ; ccu62.c    75 
                   147   ; ccu62.c    76 //****************************************************************************
                   148   ; ccu62.c    77 // @External Prototypes
                   149   ; ccu62.c    78 //****************************************************************************
                   150   ; ccu62.c    79 
                   151   ; ccu62.c    80 // USER CODE BEGIN (CCU62_General,8)
                   152   ; ccu62.c    81 
                   153   ; ccu62.c    82 // USER CODE END
                   154   ; ccu62.c    83 
                   155   ; ccu62.c    84 //****************************************************************************
                   156   ; ccu62.c    85 // @Prototypes Of Local Functions
                   157   ; ccu62.c    86 //****************************************************************************
                   158   ; ccu62.c    87 
                   159   ; ccu62.c    88 // USER CODE BEGIN (CCU62_General,9)
                   160   ; ccu62.c    89 
                   161   ; ccu62.c    90 // USER CODE END
                   162   ; ccu62.c    91 
                   163   ; ccu62.c    92 //****************************************************************************
                   164   ; ccu62.c    93 // @Function      void CCU62_vInit(void)
                   165   ; ccu62.c    94 //
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:31:52  Page:   4
ccu62

 LOC CODE        LINE   SOURCELINE

                   166   ; ccu62.c    95 //----------------------------------------------------------------------------
                   167   ; ccu62.c    96 // @Description   This is the initialization function of the CCU62 function
                   168   ; ccu62.c    97 //                library. It is assumed that the SFRs used by this library
                   169   ; ccu62.c    98 //                are in reset state.
                   170   ; ccu62.c    99 //
                   171   ; ccu62.c   100 //----------------------------------------------------------------------------
                   172   ; ccu62.c   101 // @Returnvalue   None
                   173   ; ccu62.c   102 //
                   174   ; ccu62.c   103 //----------------------------------------------------------------------------
                   175   ; ccu62.c   104 // @Parameters    None
                   176   ; ccu62.c   105 //
                   177   ; ccu62.c   106 //----------------------------------------------------------------------------
                   178   ; ccu62.c   107 // @Date          30.09.2021
                   179   ; ccu62.c   108 //
                   180   ; ccu62.c   109 //****************************************************************************
                   181   ; ccu62.c   110 
                   182   ; ccu62.c   111 // USER CODE BEGIN (Init,1)
                   183   ; ccu62.c   112 
                   184   ; ccu62.c   113 // USER CODE END
                   185   ; ccu62.c   114 
                   186   ; ccu62.c   115 void CCU62_vInit(void) {
                   187   CCU62_1_PR      SECTION CODE WORD PUBLIC 'CPROGRAM'
                   188           ?LINE   115
                   189           PUBLIC  _CCU62_vInit
               R   190           ?SYMB   'CCU62_vInit',_CCU62_vInit,37,1
                   191           ?SYMB   '',115,8,34
                   192           ?SYMB   'uword',18,13,261
                   193   _CCU62_vInit    PROC    FAR
                   194           ?SYMB   '',00H,95,0
                   195   ; Locals:
                   196   ; 
                   197   ; Statics:
                   198   ; 
                   199   ; CSEs:
                   200   ; 
                   201   ; ccu62.c   116         // USER CODE BEGIN (Init,2)
                   202   ; ccu62.c   117 
                   203   ; ccu62.c   118         // USER CODE END
                   204   ; ccu62.c   119 
                   205   ; ccu62.c   120         ///  ------------------------------------------------------------------
                         -----
                   206   ; ccu62.c   121         ///  Configuration of KERNEL REGISTERS :
                   207   ; ccu62.c   122         ///  ------------------------------------------------------------------
                         -----
                   208   ; ccu62.c   123         ///  - CCU62 Module is enabled.
                   209   ; ccu62.c   124         ///  - The CCU62 module clock = 65,000 MHz.
                   210   ; ccu62.c   125         ///  - T12 is enabled.
                   211   ; ccu62.c   126         ///  - T13 is enabled.
                   212   ; ccu62.c   127         ///  - MCM is enabled.
                   213   ; ccu62.c   128 
                   214   ; ccu62.c   129         CCU62_KSCFG = 0x0003;  // Kernel State Configuration Register
                   215           ?LINE   129
0000 E03C          216           MOV     R12,#03h
0002 F6FC00EB      217           MOV     0EB00h,R12
                   218   ; ccu62.c   130 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:31:52  Page:   5
ccu62

 LOC CODE        LINE   SOURCELINE

                   219   ; ccu62.c   131         _nop();  //No operation function as Delay
                   220           ?LINE   131
0006 CC00          221           NOP
                   222   ; ccu62.c   132         _nop();  //No operation function as Delay
                   223           ?LINE   132
0008 CC00          224           NOP
                   225   ; ccu62.c   133         _nop();  //No operation function as Delay
                   226           ?LINE   133
000A CC00          227           NOP
                   228   ; ccu62.c   134         _nop();  //No operation function as Delay
                   229           ?LINE   134
000C CC00          230           NOP
                   231   ; ccu62.c   135 
                   232   ; ccu62.c   136         ///  ------------------------------------------------------------------
                         -----
                   233   ; ccu62.c   137         ///  Configuration of CCU62 Timer 12:
                   234   ; ccu62.c   138         ///  ------------------------------------------------------------------
                         -----
                   235   ; ccu62.c   139         ///  - Timer 12 Input clock factor (T12CLK) is 0
                   236   ; ccu62.c   140         ///  - prescaler factor is 0
                   237   ; ccu62.c   141         ///  - Timer 12 run bit is reset
                   238   ; ccu62.c   142         ///  - Single shot mode is disabled
                   239   ; ccu62.c   143         ///  - Timer 12 works in edge aligned mode
                   240   ; ccu62.c   144         ///  - Interrupt on period match is enabled
                   241   ; ccu62.c   145         ///  - Interrupt on one match is disabled
                   242   ; ccu62.c   146         ///  - No External run selection is selected.
                   243   ; ccu62.c   147         ///  - Timer mode is selected.
                   244   ; ccu62.c   148         ///  -
                   245   ; ccu62.c   149 
                   246   ; ccu62.c   150         CCU62_T12PR = 0x0595;  // load CCU62 T12 period register
                   247           ?LINE   150
000E E6FC9505      248           MOV     R12,#0595h
0012 F6FC12EB      249           MOV     0EB12h,R12
                   250   ; ccu62.c   151 
                   251   ; ccu62.c   152         ///  ------------------------------------------------------------------
                         -----
                   252   ; ccu62.c   153         ///  Configuration of T13HR Signal:
                   253   ; ccu62.c   154         ///  ------------------------------------------------------------------
                         -----
                   254   ; ccu62.c   155         ///  - Signal T13HRB is selected as Input
                   255   ; ccu62.c   156         CCU62_PISELH = 0x0021;  // Load CCU62 Port Input Selection register
                   256           ?LINE   156
0016 E6FC2100      257           MOV     R12,#021h
001A F6FC06EB      258           MOV     0EB06h,R12
                   259   ; ccu62.c   157 
                   260   ; ccu62.c   158         ///  ------------------------------------------------------------------
                         -----
                   261   ; ccu62.c   159         ///  Configuration of CCU62 Timer 13:
                   262   ; ccu62.c   160         ///  ------------------------------------------------------------------
                         -----
                   263   ; ccu62.c   161         ///  - Timer 13 Input Clock factor (T13CLK) is 0
                   264   ; ccu62.c   162         ///  - prescaler factor is 0
                   265   ; ccu62.c   163         ///  - Timer 13 run bit is reset
                   266   ; ccu62.c   164         ///  - Trigger control is disabled
                   267   ; ccu62.c   165         ///  - No External run selection is selected.
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:31:52  Page:   6
ccu62

 LOC CODE        LINE   SOURCELINE

                   268   ; ccu62.c   166         ///  - Counter mode is selected.
                   269   ; ccu62.c   167         ///  - Counter mode Counts the rising edges at the input T13HR.
                   270   ; ccu62.c   168         ///  - Single shot mode is disabled
                   271   ; ccu62.c   169         ///  - Interrupt on period match is disabled
                   272   ; ccu62.c   170         ///  - Interrupt on compare match is disabled
                   273   ; ccu62.c   171 
                   274   ; ccu62.c   172         CCU62_T13PR = 0x0001;  // load CCU62 T13 period register
                   275           ?LINE   172
001E E01C          276           MOV     R12,#01h
0020 F6FC32EB      277           MOV     0EB32h,R12
                   278   ; ccu62.c   173 
                   279   ; ccu62.c   174         CCU62_TCTR2 = 0x0020;  // load CCU62 timer control register 2
                   280           ?LINE   174
0024 E6FC2000      281           MOV     R12,#020h
0028 F6FC2EEB      282           MOV     0EB2Eh,R12
                   283   ; ccu62.c   175 
                   284   ; ccu62.c   176         ///  ------------------------------------------------------------------
                         -----
                   285   ; ccu62.c   177         ///  Configuration of Multi Channel Mode:
                   286   ; ccu62.c   178         ///  ------------------------------------------------------------------
                         -----
                   287   ; ccu62.c   179         ///  - Multi channel mode is disabled
                   288   ; ccu62.c   180 
                   289   ; ccu62.c   181         ///  ------------------------------------------------------------------
                         -----
                   290   ; ccu62.c   182         ///  Configuration of CCU62 Channel 0:
                   291   ; ccu62.c   183         ///  ------------------------------------------------------------------
                         -----
                   292   ; ccu62.c   184         ///  - Channel 0 is disabled
                   293   ; ccu62.c   185         ///  - T12 modulation for output CC60 is disabled
                   294   ; ccu62.c   186         ///  - T13 modulation for output CC60 is disabled
                   295   ; ccu62.c   187         ///  - T13 modulation for output CC60 is disabled
                   296   ; ccu62.c   188 
                   297   ; ccu62.c   189         ///  - Generation interrupt on flag ICC60R is disabled
                   298   ; ccu62.c   190         ///  - Generation interrupt on flag ICC60F is disabled
                   299   ; ccu62.c   191 
                   300   ; ccu62.c   192         CCU62_CC60SR = 0x0000;  // Load CCU62 capture/compare shadow
                   301           ?LINE   192
002C E00C          302           MOV     R12,#00h
002E F6FC20EB      303           MOV     0EB20h,R12
                   304   ; ccu62.c   193                                                         // register for channel
                          0
                   305   ; ccu62.c   194 
                   306   ; ccu62.c   195         ///  ------------------------------------------------------------------
                         -----
                   307   ; ccu62.c   196         ///  Configuration of CCU62 Channel 1:
                   308   ; ccu62.c   197         ///  ------------------------------------------------------------------
                         -----
                   309   ; ccu62.c   198         ///  - Channel 1 is disabled
                   310   ; ccu62.c   199         ///  - T12 modulation for output CC61 is disabled
                   311   ; ccu62.c   200         ///  - T13 modulation for output CC61 is disabled
                   312   ; ccu62.c   201         ///  - T13 modulation for output CC61 is disabled
                   313   ; ccu62.c   202 
                   314   ; ccu62.c   203         ///  - Generation interrupt on flag ICC61R is disabled
                   315   ; ccu62.c   204         ///  - Generation interrupt on flag ICC61F is disabled
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:31:52  Page:   7
ccu62

 LOC CODE        LINE   SOURCELINE

                   316   ; ccu62.c   205 
                   317   ; ccu62.c   206         CCU62_CC61SR = 0x0000;  // Load CCU62 capture/compare shadow
                   318           ?LINE   206
0032 E00C          319           MOV     R12,#00h
0034 F6FC22EB      320           MOV     0EB22h,R12
                   321   ; ccu62.c   207                                                         // register for channel
                          1
                   322   ; ccu62.c   208 
                   323   ; ccu62.c   209         ///  ------------------------------------------------------------------
                         -----
                   324   ; ccu62.c   210         ///  Configuration of CCU62 Channel 2:
                   325   ; ccu62.c   211         ///  ------------------------------------------------------------------
                         -----
                   326   ; ccu62.c   212         ///  - Channel 2 is disabled
                   327   ; ccu62.c   213         ///  - T12 modulation for output CC62 is disabled
                   328   ; ccu62.c   214         ///  - T13 modulation for output CC62 is disabled
                   329   ; ccu62.c   215         ///  - T13 modulation for output CC62 is disabled
                   330   ; ccu62.c   216 
                   331   ; ccu62.c   217         ///  - Generation interrupt on flag ICC62R is disabled
                   332   ; ccu62.c   218         ///  - Generation interrupt on flag ICC62F is disabled
                   333   ; ccu62.c   219 
                   334   ; ccu62.c   220         CCU62_CC62SR = 0x0000;  // Load CCU62 capture/compare shadow
                   335           ?LINE   220
0038 E00C          336           MOV     R12,#00h
003A F6FC24EB      337           MOV     0EB24h,R12
                   338   ; ccu62.c   221                                                         // register for channel
                          2
                   339   ; ccu62.c   222 
                   340   ; ccu62.c   223         ///  ------------------------------------------------------------------
                         -----
                   341   ; ccu62.c   224         ///  Configuration of CCU62 Channel 3:
                   342   ; ccu62.c   225         ///  ------------------------------------------------------------------
                         -----
                   343   ; ccu62.c   226         ///  - T13 output is not inverted
                   344   ; ccu62.c   227 
                   345   ; ccu62.c   228         CCU62_CC63SR = 0x0000;  // load CCU62 capture/compare shadow
                   346           ?LINE   228
003E E00C          347           MOV     R12,#00h
0040 F6FC36EB      348           MOV     0EB36h,R12
                   349   ; ccu62.c   229                                                         // register for channel
                          3
                   350   ; ccu62.c   230 
                   351   ; ccu62.c   231         CCU62_T12DTC = 0x0001;  // load CCU62 dead time control register for
                   352           ?LINE   231
0044 E01C          353           MOV     R12,#01h
0046 F6FC14EB      354           MOV     0EB14h,R12
                   355   ; ccu62.c   232                                                         // timer T12
                   356   ; ccu62.c   233 
                   357   ; ccu62.c   234         ///  ------------------------------------------------------------------
                         -----
                   358   ; ccu62.c   235         ///  Configuration of CCU62 trap control:
                   359   ; ccu62.c   236         ///  ------------------------------------------------------------------
                         -----
                   360   ; ccu62.c   237         ///  - Trap can only be generated by SW by setting the bit TRPF
                   361   ; ccu62.c   238         ///  - The trap state is left when a zero-match of T12 (while counting 
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:31:52  Page:   8
ccu62

 LOC CODE        LINE   SOURCELINE

                         up)
                   362   ; ccu62.c   239         ///    is detected (synchronization to T12)
                   363   ; ccu62.c   240         ///  - Bit TRPF is automatically cleared by HW (according to TRPPEN, TR
                         PM0
                   364   ; ccu62.c   241         ///    and TRPM1)
                   365   ; ccu62.c   242         ///  - Trap interrupt is disabled
                   366   ; ccu62.c   243 
                   367   ; ccu62.c   244         ///  ------------------------------------------------------------------
                         -----
                   368   ; ccu62.c   245         ///  Configuration of CCU62 interrupt control:
                   369   ; ccu62.c   246         ///  ------------------------------------------------------------------
                         -----
                   370   ; ccu62.c   247         ///  - For channel 0 interrupts is node I0 selected
                   371   ; ccu62.c   248         ///  - For channel 1 interrupts is node I0 selected
                   372   ; ccu62.c   249         ///  - For channel 2 interrupts is node I0 selected
                   373   ; ccu62.c   250         ///  - For correct hall event interrupt is node I0 selected
                   374   ; ccu62.c   251         ///  - For error interrupts is node I0 selected
                   375   ; ccu62.c   252         ///  - For T12 interrupts is node I0 selected
                   376   ; ccu62.c   253         ///  - For T13 interrupts is node I0 selected
                   377   ; ccu62.c   254 
                   378   ; ccu62.c   255         CCU62_INP = 0x0000;      // Load CCU62 capture/compare interrupt node
                   379           ?LINE   255
004A E00C          380           MOV     R12,#00h
004C F6FC56EB      381           MOV     0EB56h,R12
                   382   ; ccu62.c   256                                                  // pointer register
                   383   ; ccu62.c   257 
                   384   ; ccu62.c   258         CCU62_IEN = 0x0080;      // Load CCU62 capture/compare interrupt
                   385           ?LINE   258
0050 E6FC8000      386           MOV     R12,#080h
0054 F6FC58EB      387           MOV     0EB58h,R12
                   388   ; ccu62.c   259                                                  // enable register
                   389   ; ccu62.c   260 
                   390   ; ccu62.c   261         ///  ------------------------------------------------------------------
                         -----
                   391   ; ccu62.c   262         ///  Configuration of the used CCU62 Channel Port Pins:
                   392   ; ccu62.c   263         ///  ------------------------------------------------------------------
                         -----
                   393   ; ccu62.c   264 
                   394   ; ccu62.c   265         CCU62_PISELL = 0x3FC0;  // Load CCU62 Port Input Selection register
                   395           ?LINE   265
0058 E6FCC03F      396           MOV     R12,#03FC0h
005C F6FC04EB      397           MOV     0EB04h,R12
                   398   ; ccu62.c   266 
                   399   ; ccu62.c   267         ///  ------------------------------------------------------------------
                         -----
                   400   ; ccu62.c   268         ///  Configuration of the used CCU62 Channels Interrupts:
                   401   ; ccu62.c   269         ///  ------------------------------------------------------------------
                         -----
                   402   ; ccu62.c   270         ///  NodeI0 service request node configuration:
                   403   ; ccu62.c   271         ///  - NodeI0 interrupt priority level (ILVL) = 13
                   404   ; ccu62.c   272         ///  - NodeI0 interrupt group level (GLVL) = 0
                   405   ; ccu62.c   273         ///  - NodeI0 group priority extension (GPX) = 0
                   406   ; ccu62.c   274 
                   407   ; ccu62.c   275         CCU62_0IC = 0x0074;
                   408           ?LINE   275
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:31:52  Page:   9
ccu62

 LOC CODE        LINE   SOURCELINE

0060 E6FC7400      409           MOV     R12,#074h
0064 F6FC70F1      410           MOV     0F170h,R12
                   411   ; ccu62.c   276 
                   412   ; ccu62.c   277         ///  ------------------------------------------------------------------
                         -----
                   413   ; ccu62.c   278         ///  Configuration of T12, T13 ---- CCU62_TCTR4 Register:
                   414   ; ccu62.c   279         ///  ------------------------------------------------------------------
                         -----
                   415   ; ccu62.c   280         ///  - Enable shadow transfer of T12 and T13
                   416   ; ccu62.c   281         ///  - Timer 12 run bit is reset
                   417   ; ccu62.c   282         ///  - Timer 13 run bit is reset
                   418   ; ccu62.c   283         CCU62_TCTR4 = 0x4040;  // load CCU62 timer control register 4
                   419           ?LINE   283
0068 E6FC4040      420           MOV     R12,#04040h
006C F6FC26EB      421           MOV     0EB26h,R12
                   422   ; ccu62.c   284 
                   423   ; ccu62.c   285         // USER CODE BEGIN (NodeI3,3)
                   424   ; ccu62.c   286 
                   425   ; ccu62.c   287         // USER CODE END
                   426   ; ccu62.c   288 
                   427   ; ccu62.c   289 }  //  End of function CCU62_vInit
                   428           ?LINE   289
0070 DB00          429           RETS
                   430   _CCU62_vInit    ENDP
               R   431           ?SYMB   '',$,17,289
                   432   ; ccu62.c   290 
                   433   ; ccu62.c   291 //****************************************************************************
                   434   ; ccu62.c   292 // @Function      void CCU62_viNodeI0(void)
                   435   ; ccu62.c   293 //
                   436   ; ccu62.c   294 //----------------------------------------------------------------------------
                   437   ; ccu62.c   295 // @Description   This is the interrupt service routine for the CCU62 node
                   438   ; ccu62.c   296 //                I0. If the content of the corresponding compare timer
                   439   ; ccu62.c   297 //                (configurable) equals the content of the capture/compare
                   440   ; ccu62.c   298 //                register or if a capture event occurs at the associated
                   441   ; ccu62.c   299 //                port pin, the interrupt request flag is set and an
                   442   ; ccu62.c   300 //                interrupt is triggered (only if enabled).
                   443   ; ccu62.c   301 //                Please note that you have to add application specific code
                   444   ; ccu62.c   302 //                to this function.
                   445   ; ccu62.c   303 //
                   446   ; ccu62.c   304 //----------------------------------------------------------------------------
                   447   ; ccu62.c   305 // @Returnvalue   None
                   448   ; ccu62.c   306 //
                   449   ; ccu62.c   307 //----------------------------------------------------------------------------
                   450   ; ccu62.c   308 // @Parameters    None
                   451   ; ccu62.c   309 //
                   452   ; ccu62.c   310 //----------------------------------------------------------------------------
                   453   ; ccu62.c   311 // @Date          30.09.2021
                   454   ; ccu62.c   312 //
                   455   ; ccu62.c   313 //****************************************************************************
                   456   ; ccu62.c   314 
                   457   ; ccu62.c   315 // USER CODE BEGIN (NodeI0,1)
                   458   ; ccu62.c   316 
                   459   ; ccu62.c   317 // USER CODE END
                   460   ; ccu62.c   318 
                   461   ; ccu62.c   319 _interrupt(CCU62_NodeI0_INT) void CCU62_viNodeI0(void) {
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:31:52  Page:  10
ccu62

 LOC CODE        LINE   SOURCELINE

               R   462           ?SYMB   'CCU62_viNodeI0',_CCU62_viNodeI0,37,1
                   463           ?SYMB   '',319,8,16
                   464   _CCU62_viNodeI0 PROC TASK CCU62_TASK INTNO CCU62_INUM = 038h
                   465           ?LINE   319
                   466           ?SYMB   '',00H,95,0
0072 F6F00000  R   467           MOV     CCU62_RB,R0
0076 C6080000  R   468           SCXT    CP,#CCU62_RB
007A C6871000      469           SCXT    MDC,#010h
007E EC00          470           PUSH    DPP0
0080 E6000000  R   471           MOV     DPP0,#PAG ?BASE_DPP0
0084 CC00          472           NOP
0086 EC02          473           PUSH    DPP2
0088 E6020000  R   474           MOV     DPP2,#PAG ?BASE_DPP2
008C CC00          475           NOP
008E EC06          476           PUSH    MDH
0090 EC07          477           PUSH    MDL
0092 ECEF          478           PUSH    MSW
0094 EC2E          479           PUSH    MAL
0096 EC2F          480           PUSH    MAH
0098 ECEE          481           PUSH    MCW
009A C6ED0000      482           SCXT    MRW,#00h
009E EC84          483           PUSH    IDX0
00A0 EC85          484           PUSH    IDX1
00A2 D180          485           EXTR    #01h
00A4 EC00     1    486           PUSH    QX0
00A6 D180          487           EXTR    #01h
00A8 EC01     1    488           PUSH    QX1
00AA D180          489           EXTR    #01h
00AC EC02     1    490           PUSH    QR0
00AE D180          491           EXTR    #01h
00B0 EC03     1    492           PUSH    QR1
                   493   ; Locals:
                   494   ; 
                   495   ; Statics:
                   496   ; 
                   497   ; CSEs:
                   498   ; 
                   499   ; ccu62.c   320         // USER CODE BEGIN (NodeI0,2)
                   500   ; ccu62.c   321 
                   501   ; ccu62.c   322         // USER CODE END
                   502   ; ccu62.c   323 
                   503   ; ccu62.c   324         if (CCU62_IS & 0x0080)  // if CCU62_IS_T12PM
                   504           ?LINE   324
00B2 F2FC50EB      505           MOV     R12,0EB50h
00B6 9AFC2070      506           JNB     R12.7,_10
                   507   ; ccu62.c   325         {
                   508   ; ccu62.c   326                 // Timer T12 period match detection
                   509   ; ccu62.c   327 
                   510   ; ccu62.c   328                 // USER CODE BEGIN (NodeI0,19)
                   511   ; ccu62.c   329                 // Anhalten des Index für das Gleichstrombremsen
                   512   ; ccu62.c   330                 if (rampIndex < 5250 && rampIndex > 4500) {
                   513           ?LINE   330
00BA F2FC0000  R   514           MOV     R12,_rampIndex
00BE 46FC8214      515           CMP     R12,#01482h
00C2 9D06          516           JMPR    cc_UGE,_7
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:31:52  Page:  11
ccu62

 LOC CODE        LINE   SOURCELINE

00C4 F2FC0000  R   517           MOV     R12,_rampIndex
00C8 46FC9411      518           CMP     R12,#01194h
00CC FD01          519           JMPR    cc_ULE,_8
                   520   ; ccu62.c   331                 } else {
                   521           ?LINE   331
00CE 0D10          522           JMPR    cc_UC,_9
00D0               523   _7:
00D0               524   _8:
                   525   ; ccu62.c   332                         // durchzählen des Index für die Sinus Wertetabelle
                   526   ; ccu62.c   333                         index++;
                   527           ?LINE   333
00D0 F2FC0000  R   528           MOV     R12,_index
00D4 08C1          529           ADD     R12,#01h
00D6 F6FC0000  R   530           MOV     _index,R12
                   531   ; ccu62.c   334                         // Modulo Operator zur Verhinderung eines Überlaufens
                   532   ; ccu62.c   335                         index = index % ARRAY_SIZE;
                   533           ?LINE   335
00DA F2FC0000  R   534           MOV     R12,_index
00DE F2FD0000  R   535           MOV     R13,_ARRAY_SIZE
00E2 F6FC0EFE      536           MOV     MDL,R12
00E6 5BDD          537           DIVU    R13
00E8 F2FC0CFE      538           MOV     R12,MDH
00EC F6FC0000  R   539           MOV     _index,R12
                   540   ; ccu62.c   336                 }
                   541           ?LINE   336
00F0               542   _9:
                   543   ; ccu62.c   337                 // USER CODE END
                   544   ; ccu62.c   338 
                   545   ; ccu62.c   339                 CCU62_ISR |= 0x0080;  // clear flag CCU62_IS_T12PM
                   546           ?LINE   339
00F0 E6FC54EB      547           MOV     R12,#0EB54h
00F4 A8DC          548           MOV     R13,[R12]
00F6 7FFD          549           BSET    R13.7
00F8 B8DC          550           MOV     [R12],R13
                   551   ; ccu62.c   340         }
                   552           ?LINE   340
00FA               553   _10:
                   554   ; ccu62.c   341 
                   555   ; ccu62.c   342 }  //  End of function CCU62_viNodeI0
                   556           ?LINE   342
00FA D180          557           EXTR    #01h
00FC FC03     1    558           POP     QR1
00FE D180          559           EXTR    #01h
0100 FC02     1    560           POP     QR0
0102 D180          561           EXTR    #01h
0104 FC01     1    562           POP     QX1
0106 D180          563           EXTR    #01h
0108 FC00     1    564           POP     QX0
010A FC85          565           POP     IDX1
010C FC84          566           POP     IDX0
010E FCED          567           POP     MRW
0110 FCEE          568           POP     MCW
0112 FC2F          569           POP     MAH
0114 FC2E          570           POP     MAL
0116 FCEF          571           POP     MSW
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:31:52  Page:  12
ccu62

 LOC CODE        LINE   SOURCELINE

0118 FC07          572           POP     MDL
011A FC06          573           POP     MDH
011C FC02          574           POP     DPP2
011E FC00          575           POP     DPP0
0120 FC87          576           POP     MDC
0122 FC08          577           POP     CP
                   578           ?LINE   342
0124 FB88          579           RETI
                   580   _CCU62_viNodeI0 ENDP
               R   581           ?SYMB   '',$,17,342
                   582   ; ccu62.c   343 
                   583   ; ccu62.c   344 // USER CODE BEGIN (CCU62_General,10)
                   584   ; ccu62.c   345 
                   585   ; ccu62.c   346 // USER CODE END
                   586   CCU62_1_PR      ENDS
                   587   
                   588           EXTERN  _rampIndex:WORD
                   589           EXTERN  _ARRAY_SIZE:WORD
                   590           EXTERN  _index:WORD
                   591   CCU62_RB        REGDEF  R0-R15
                   592           END

total errors: 0, warnings: 0

