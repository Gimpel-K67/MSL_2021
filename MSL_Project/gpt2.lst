TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:31:52  Page:   1
gpt2

 LOC CODE        LINE   SOURCELINE

                     1   ; TASKING C166/ST10 C compiler v8.7r1 Build 775
                     2   ; options: -e -Id:\programme\tasking\c166 v8.7r1\include -x2 -Bhoeufmknladij -OB
                     3   ;          -OE -zswitch_tabmem_default -zautobitastruct-4 -zautobita-0 -FSC -A1
                     4   ;          -zvolatile_union -O0 -g -newerr -s -i0 -Ms
                     5   $DEBUG
                     6   $NOLOCALS
                     7   $EXTEND2
                     8   $NOMOD166
                     9   $STDNAMES(regsuper10bo.def)
                    10   $EXTMAC
                    11   $CASE
                    12   $NOEXPANDREGBANK
                    13   $MODEL(SMALL)
                    14           NAME    GPT2_C
                    15           ?SYMB   'gpt2.c',32,80,16
                    16           ?SYMB   '',1,82,0
                    17           ?SYMB   '80166',0,84,0
                    18           ?SYMB   '',0,81,0
                    19           ?SYMB   'void',00H,45,1
                    20           ?SYMB   'char',080000H,45,2
                    21           ?SYMB   'unsigned char',080000H,45,3
                    22           ?SYMB   'short',0100000H,45,4
                    23           ?SYMB   'unsigned short',0100000H,45,5
                    24           ?SYMB   'long',0200000H,45,6
                    25           ?SYMB   'unsigned long',0200000H,45,7
                    26           ?SYMB   'float',0200000H,45,10
                    27           ?SYMB   'double',0400000H,45,11
                    28           ?SYMB   'int',0100000H,45,16
                    29           ?SYMB   'unsigned int',0100000H,45,18
                    30           ?SYMB   'bit',010000H,7,256
                    31           ?SYMB   'gpt2.c',0,29,1
                    32           ?SYMB   '',0,86,1
                    33   ; gpt2.c      1 //****************************************************************************
                    34   ; gpt2.c      2 // @Module        General Purpose Timer Unit (GPT2)
                    35   ; gpt2.c      3 // @Filename      GPT2.C
                    36   ; gpt2.c      4 // @Project       DAvE_config.dav
                    37   ; gpt2.c      5 //----------------------------------------------------------------------------
                    38   ; gpt2.c      6 // @Controller    Infineon XE167F-96F66
                    39   ; gpt2.c      7 //
                    40   ; gpt2.c      8 // @Compiler      Tasking Classic
                    41   ; gpt2.c      9 //
                    42   ; gpt2.c     10 // @Codegenerator 2.2
                    43   ; gpt2.c     11 //
                    44   ; gpt2.c     12 // @Description   This file contains functions that use the GPT2 module.
                    45   ; gpt2.c     13 //
                    46   ; gpt2.c     14 //----------------------------------------------------------------------------
                    47   ; gpt2.c     15 // @Date          30.09.2021 14:42:54
                    48   ; gpt2.c     16 //
                    49   ; gpt2.c     17 //****************************************************************************
                    50   ; gpt2.c     18 
                    51   ; gpt2.c     19 // USER CODE BEGIN (GPT2_General,1)
                    52   ; gpt2.c     20 
                    53   ; gpt2.c     21 // USER CODE END
                    54   ; gpt2.c     22 
                    55   ; gpt2.c     23 //****************************************************************************
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:31:52  Page:   2
gpt2

 LOC CODE        LINE   SOURCELINE

                    56   ; gpt2.c     24 // @Project Includes
                    57   ; gpt2.c     25 //****************************************************************************
                    58   ; gpt2.c     26 
                    59   ; gpt2.c     27 #include "MAIN.H"
                    60           ?SYMB   'MAIN.H',0,29,2
                    61           ?SYMB   '',0,86,2
                    62           ?SYMB   'XE16xREGS.H',0,29,3
                    63           ?SYMB   '',0,86,3
                    64           ?SYMB   '',0,86,2
                    65           ?SYMB   'SCS.H',0,29,3
                    66           ?SYMB   '',0,86,3
                    67           ?SYMB   'T$2',0,14,257
                    68           ?SYMB   'SCS_EXTCLK_F_SYS',0,33,257
                    69           ?SYMB   'SCS_EXTCLK_F_OUT',1,33,257
                    70           ?SYMB   'SCS_EXTCLK_F_PLL',2,33,257
                    71           ?SYMB   'SCS_EXTCLK_F_OSC',3,33,257
                    72           ?SYMB   'SCS_EXTCLK_F_WU',4,33,257
                    73           ?SYMB   'SCS_EXTCLK_F_TCK',5,33,257
                    74           ?SYMB   'SCS_EXTCLK_F_OSC_FL',6,33,257
                    75           ?SYMB   'SCS_EXTCLK_F_RTC',8,33,257
                    76           ?SYMB   '',16,16,0
                    77           ?SYMB   'SCS_EXTCLK_Type',257,13,258
                    78           ?SYMB   '',0,86,2
                    79           ?SYMB   'IO.H',0,29,3
                    80           ?SYMB   '',0,86,3
                    81           ?SYMB   '',0,86,2
                    82           ?SYMB   'GPT1.H',0,29,3
                    83           ?SYMB   '',0,86,3
                    84           ?SYMB   '',0,86,2
                    85           ?SYMB   'GPT2.H',0,29,3
                    86           ?SYMB   '',0,86,3
                    87           ?SYMB   '',0,86,2
                    88           ?SYMB   'CCU62.H',0,29,3
                    89           ?SYMB   '',0,86,3
                    90           ?SYMB   '',0,86,2
                    91           ?SYMB   'CCU63.H',0,29,3
                    92           ?SYMB   '',0,86,3
                    93           ?SYMB   '',0,86,2
                    94           ?SYMB   'ADC0.H',0,29,3
                    95           ?SYMB   '',0,86,3
                    96           ?SYMB   'ubyte',3,13,259
                    97           ?SYMB   '',0,86,2
                    98           ?SYMB   '',0,86,1
                    99   ; gpt2.c     28 
                   100   ; gpt2.c     29 // USER CODE BEGIN (GPT2_General,2)
                   101   ; gpt2.c     30 
                   102   ; gpt2.c     31 // USER CODE END
                   103   ; gpt2.c     32 
                   104   ; gpt2.c     33 //****************************************************************************
                   105   ; gpt2.c     34 // @Macros
                   106   ; gpt2.c     35 //****************************************************************************
                   107   ; gpt2.c     36 
                   108   ; gpt2.c     37 // USER CODE BEGIN (GPT2_General,3)
                   109   ; gpt2.c     38 
                   110   ; gpt2.c     39 // USER CODE END
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:31:52  Page:   3
gpt2

 LOC CODE        LINE   SOURCELINE

                   111   ; gpt2.c     40 
                   112   ; gpt2.c     41 //****************************************************************************
                   113   ; gpt2.c     42 // @Defines
                   114   ; gpt2.c     43 //****************************************************************************
                   115   ; gpt2.c     44 
                   116   ; gpt2.c     45 // USER CODE BEGIN (GPT2_General,4)
                   117   ; gpt2.c     46 
                   118   ; gpt2.c     47 // USER CODE END
                   119   ; gpt2.c     48 
                   120   ; gpt2.c     49 //****************************************************************************
                   121   ; gpt2.c     50 // @Typedefs
                   122   ; gpt2.c     51 //****************************************************************************
                   123   ; gpt2.c     52 
                   124   ; gpt2.c     53 // USER CODE BEGIN (GPT2_General,5)
                   125   ; gpt2.c     54 
                   126   ; gpt2.c     55 // USER CODE END
                   127   ; gpt2.c     56 
                   128   ; gpt2.c     57 //****************************************************************************
                   129   ; gpt2.c     58 // @Imported Global Variables
                   130   ; gpt2.c     59 //****************************************************************************
                   131   ; gpt2.c     60 
                   132   ; gpt2.c     61 // USER CODE BEGIN (GPT2_General,6)
                   133   ; gpt2.c     62 // Externe Globale Variablen von der Main.c übernehmen
                   134   ; gpt2.c     63 extern const unsigned int ARRAY_SIZE;
                   135   ; gpt2.c     64 extern unsigned int rampIndex;
                   136   ; gpt2.c     65 extern volatile float velocity;
                   137   ; gpt2.c     66 volatile unsigned int inc;
                   138   ; gpt2.c     67 // USER CODE END
                   139   ; gpt2.c     68 
                   140   ; gpt2.c     69 //****************************************************************************
                   141   ; gpt2.c     70 // @Global Variables
                   142   ; gpt2.c     71 //****************************************************************************
                   143   ; gpt2.c     72 
                   144   ; gpt2.c     73 // USER CODE BEGIN (GPT2_General,7)
                   145   ; gpt2.c     74 
                   146   ; gpt2.c     75 // USER CODE END
                   147   ; gpt2.c     76 
                   148   ; gpt2.c     77 //****************************************************************************
                   149   ; gpt2.c     78 // @External Prototypes
                   150   ; gpt2.c     79 //****************************************************************************
                   151   ; gpt2.c     80 
                   152   ; gpt2.c     81 // USER CODE BEGIN (GPT2_General,8)
                   153   ; gpt2.c     82 
                   154   ; gpt2.c     83 // USER CODE END
                   155   ; gpt2.c     84 
                   156   ; gpt2.c     85 //****************************************************************************
                   157   ; gpt2.c     86 // @Prototypes Of Local Functions
                   158   ; gpt2.c     87 //****************************************************************************
                   159   ; gpt2.c     88 
                   160   ; gpt2.c     89 // USER CODE BEGIN (GPT2_General,9)
                   161   ; gpt2.c     90 
                   162   ; gpt2.c     91 // USER CODE END
                   163   ; gpt2.c     92 
                   164   ; gpt2.c     93 //****************************************************************************
                   165   ; gpt2.c     94 // @Function      void GPT2_vInit(void)
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:31:52  Page:   4
gpt2

 LOC CODE        LINE   SOURCELINE

                   166   ; gpt2.c     95 //
                   167   ; gpt2.c     96 //----------------------------------------------------------------------------
                   168   ; gpt2.c     97 // @Description   This is the initialization function of the GPT2 function
                   169   ; gpt2.c     98 //                library. It is assumed that the SFRs used by this library
                   170   ; gpt2.c     99 //                are in reset state.
                   171   ; gpt2.c    100 //
                   172   ; gpt2.c    101 //----------------------------------------------------------------------------
                   173   ; gpt2.c    102 // @Returnvalue   None
                   174   ; gpt2.c    103 //
                   175   ; gpt2.c    104 //----------------------------------------------------------------------------
                   176   ; gpt2.c    105 // @Parameters    None
                   177   ; gpt2.c    106 //
                   178   ; gpt2.c    107 //----------------------------------------------------------------------------
                   179   ; gpt2.c    108 // @Date          30.09.2021
                   180   ; gpt2.c    109 //
                   181   ; gpt2.c    110 //****************************************************************************
                   182   ; gpt2.c    111 
                   183   ; gpt2.c    112 // USER CODE BEGIN (Init,1)
                   184   ; gpt2.c    113 
                   185   ; gpt2.c    114 // USER CODE END
                   186   ; gpt2.c    115 
                   187   ; gpt2.c    116 void GPT2_vInit(void) {
                   188   GPT2_1_PR       SECTION CODE WORD PUBLIC 'CPROGRAM'
                   189           ?LINE   116
                   190           PUBLIC  _GPT2_vInit
               R   191           ?SYMB   'GPT2_vInit',_GPT2_vInit,37,1
                   192           ?SYMB   '',116,8,34
                   193           ?SYMB   'uword',18,13,261
                   194   _GPT2_vInit     PROC    FAR
                   195           ?SYMB   '',00H,95,0
                   196   ; Locals:
                   197   ; 
                   198   ; Statics:
                   199   ; 
                   200   ; CSEs:
                   201   ; 
                   202   ; gpt2.c    117         // USER CODE BEGIN (Init,2)
                   203   ; gpt2.c    118 
                   204   ; gpt2.c    119         // USER CODE END
                   205   ; gpt2.c    120         ///  ------------------------------------------------------------------
                         -----
                   206   ; gpt2.c    121         ///  Configuration of Timer Block Prescaler 1:
                   207   ; gpt2.c    122         ///  ------------------------------------------------------------------
                         -----
                   208   ; gpt2.c    123         GPT12E_KSCCFG = 0x0003;  // Module Enable
                   209           ?LINE   123
0000 E03C          210           MOV     R12,#03h
0002 F6FC1CFE      211           MOV     0FE1Ch,R12
                   212   ; gpt2.c    124 
                   213   ; gpt2.c    125         _nop();  // one cycle delay
                   214           ?LINE   125
0006 CC00          215           NOP
                   216   ; gpt2.c    126 
                   217   ; gpt2.c    127         _nop();  // one cycle delay
                   218           ?LINE   127
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:31:52  Page:   5
gpt2

 LOC CODE        LINE   SOURCELINE

0008 CC00          219           NOP
                   220   ; gpt2.c    128 
                   221   ; gpt2.c    129         ///  ------------------------------------------------------------------
                         -----
                   222   ; gpt2.c    130         ///  Configuration of Timer Block Prescaler 2:
                   223   ; gpt2.c    131         ///  ------------------------------------------------------------------
                         -----
                   224   ; gpt2.c    132         ///  - prescaler for timer block 2 is 2
                   225   ; gpt2.c    133 
                   226   ; gpt2.c    134         ///  ------------------------------------------------------------------
                         -----
                   227   ; gpt2.c    135         ///  Configuration of the GPT2 Core Timer 5:
                   228   ; gpt2.c    136         ///  ------------------------------------------------------------------
                         -----
                   229   ; gpt2.c    137         ///  - timer 5 works in timer mode
                   230   ; gpt2.c    138         ///  - prescaler factor is 2
                   231   ; gpt2.c    139         ///  - up/down control bit is reset
                   232   ; gpt2.c    140         ///  - external up/down control is disabled
                   233   ; gpt2.c    141         ///  - timer 5 run bit is reset
                   234   ; gpt2.c    142         ///  - timer 5 remote control is disabled
                   235   ; gpt2.c    143 
                   236   ; gpt2.c    144         GPT12E_T5CON = 0x0000;  // load timer 5 control register
                   237           ?LINE   144
000A E00C          238           MOV     R12,#00h
000C F6FC46FF      239           MOV     0FF46h,R12
                   240   ; gpt2.c    145         GPT12E_T5 = 0xFFFF;             // load timer 5 register
                   241           ?LINE   145
0010 E6FCFFFF      242           MOV     R12,#0FFFFh
0014 F6FC46FE      243           MOV     0FE46h,R12
                   244   ; gpt2.c    146 
                   245   ; gpt2.c    147         ///  ------------------------------------------------------------------
                         -----
                   246   ; gpt2.c    148         ///  Configuration of the GPT2 Core Timer 6:
                   247   ; gpt2.c    149         ///  ------------------------------------------------------------------
                         -----
                   248   ; gpt2.c    150         ///  - timer 6 works in timer mode
                   249   ; gpt2.c    151         ///  - prescaler factor is 8
                   250   ; gpt2.c    152         ///  - up/down control bit is reset
                   251   ; gpt2.c    153         ///  - external up/down control is disabled
                   252   ; gpt2.c    154         ///  - alternate output function T6OUT (P6.2) is disabled
                   253   ; gpt2.c    155         ///  - alternate output function T6OUT (P7.0) is disabled
                   254   ; gpt2.c    156         ///  - timer 6 output toggle latch (T6OTL) is set to 0
                   255   ; gpt2.c    157         ///  - timer 6 run bit is reset
                   256   ; gpt2.c    158         ///  - timer 6 is not cleared on a capture
                   257   ; gpt2.c    159 
                   258   ; gpt2.c    160         GPT12E_T6CON = 0x0802;  // load timer 6 control register
                   259           ?LINE   160
0018 E6FC0208      260           MOV     R12,#0802h
001C F6FC48FF      261           MOV     0FF48h,R12
                   262   ; gpt2.c    161         GPT12E_T6 = 0x0218;             // load timer 6 register
                   263           ?LINE   161
0020 E6FC1802      264           MOV     R12,#0218h
0024 F6FC48FE      265           MOV     0FE48h,R12
                   266   ; gpt2.c    162 
                   267   ; gpt2.c    163         ///  ------------------------------------------------------------------
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:31:52  Page:   6
gpt2

 LOC CODE        LINE   SOURCELINE

                         -----
                   268   ; gpt2.c    164         ///  Configuration of the GPT2 CAPREL:
                   269   ; gpt2.c    165         ///  ------------------------------------------------------------------
                         -----
                   270   ; gpt2.c    166         ///  - capture T5 into CAPREL is disabled
                   271   ; gpt2.c    167         ///  - capture trigger from pin CAPIN
                   272   ; gpt2.c    168         ///  - capure is disabled
                   273   ; gpt2.c    169         ///  - timer 5 is not cleared on a capture
                   274   ; gpt2.c    170         ///  - timer 5 is just captured without any correction
                   275   ; gpt2.c    171 
                   276   ; gpt2.c    172         GPT12E_T5CON |= 0x0000;  // load timer 5 control register
                   277           ?LINE   172
0028 E6FC46FF      278           MOV     R12,#0FF46h
002C A8CC          279           MOV     R12,[R12]
                   280   ; gpt2.c    173         GPT12E_CAPREL = 0x0218;  // load CAPREL register
                   281           ?LINE   173
002E E6FC1802      282           MOV     R12,#0218h
0032 F6FC4AFE      283           MOV     0FE4Ah,R12
                   284   ; gpt2.c    174 
                   285   ; gpt2.c    175         ///  ------------------------------------------------------------------
                         -----
                   286   ; gpt2.c    176         ///  Configuration of the used GPT2 Port Pins:
                   287   ; gpt2.c    177         ///  ------------------------------------------------------------------
                         -----
                   288   ; gpt2.c    178         ///  - P5.3 is used for  GPT12E Timer2 Count input(T3IN)
                   289   ; gpt2.c    179 
                   290   ; gpt2.c    180         ///  ------------------------------------------------------------------
                         -----
                   291   ; gpt2.c    181         ///  Configuration of the used GPT2 Interrupts:
                   292   ; gpt2.c    182         ///  ------------------------------------------------------------------
                         -----
                   293   ; gpt2.c    183         ///  timer 6 service request node configuration:
                   294   ; gpt2.c    184         ///  - timer 6 interrupt priority level (ILVL) = 14
                   295   ; gpt2.c    185         ///  - timer 6 interrupt group level (GLVL) = 0
                   296   ; gpt2.c    186         ///  - timer 6 group priority extension (GPX) = 0
                   297   ; gpt2.c    187 
                   298   ; gpt2.c    188         GPT12E_T6IC = 0x0078;
                   299           ?LINE   188
0036 E6FC7800      300           MOV     R12,#078h
003A F6FC68FF      301           MOV     0FF68h,R12
                   302   ; gpt2.c    189 
                   303   ; gpt2.c    190         ///  Use PEC channel 0 for GPT2 T6 INT:
                   304   ; gpt2.c    191         ///  - normal interrupt
                   305   ; gpt2.c    192         ///  - pointers are not modified
                   306   ; gpt2.c    193         ///  - transfer a word
                   307   ; gpt2.c    194         ///  - service End of PEC interrrupt by a EOP interrupt node is disable
                         d
                   308   ; gpt2.c    195         ///  - channel link mode is disabled
                   309   ; gpt2.c    196 
                   310   ; gpt2.c    197         PECC0 = 0x0000;  // load PECC0 control register
                   311           ?LINE   197
003E E00C          312           MOV     R12,#00h
0040 F6FCC0FE      313           MOV     0FEC0h,R12
                   314   ; gpt2.c    198 
                   315   ; gpt2.c    199         // USER CODE BEGIN (GPT2_Function,3)
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:31:52  Page:   7
gpt2

 LOC CODE        LINE   SOURCELINE

                   316   ; gpt2.c    200 
                   317   ; gpt2.c    201         // USER CODE END
                   318   ; gpt2.c    202 
                   319   ; gpt2.c    203 }  //  End of function GPT2_viCAPREL
                   320           ?LINE   203
0044 DB00          321           RETS
                   322   _GPT2_vInit     ENDP
               R   323           ?SYMB   '',$,17,203
                   324   ; gpt2.c    204 
                   325   ; gpt2.c    205 //****************************************************************************
                   326   ; gpt2.c    206 // @Function      void GPT2_viTmr6(void)
                   327   ; gpt2.c    207 //
                   328   ; gpt2.c    208 //----------------------------------------------------------------------------
                   329   ; gpt2.c    209 // @Description   This is the interrupt service routine for the GPT2 timer 6.
                   330   ; gpt2.c    210 //                It is called up in the case of over or underflow of the
                   331   ; gpt2.c    211 //                timer 6 register.
                   332   ; gpt2.c    212 //
                   333   ; gpt2.c    213 //                Please note that you have to add application specific code
                   334   ; gpt2.c    214 //                to this function.
                   335   ; gpt2.c    215 //
                   336   ; gpt2.c    216 //----------------------------------------------------------------------------
                   337   ; gpt2.c    217 // @Returnvalue   None
                   338   ; gpt2.c    218 //
                   339   ; gpt2.c    219 //----------------------------------------------------------------------------
                   340   ; gpt2.c    220 // @Parameters    None
                   341   ; gpt2.c    221 //
                   342   ; gpt2.c    222 //----------------------------------------------------------------------------
                   343   ; gpt2.c    223 // @Date          30.09.2021
                   344   ; gpt2.c    224 //
                   345   ; gpt2.c    225 //****************************************************************************
                   346   ; gpt2.c    226 
                   347   ; gpt2.c    227 // USER CODE BEGIN (Tmr6,1)
                   348   ; gpt2.c    228 
                   349   ; gpt2.c    229 // USER CODE END
                   350   ; gpt2.c    230 
                   351   ; gpt2.c    231 _interrupt(T6INT) void GPT2_viTmr6(void) {
               R   352           ?SYMB   'GPT2_viTmr6',_GPT2_viTmr6,37,1
                   353           ?SYMB   '',231,8,16
                   354   _GPT2_viTmr6    PROC TASK GPT2_TASK INTNO GPT2_INUM = 024h
                   355           ?LINE   231
                   356           ?SYMB   '',00H,95,0
0046 F6F00000  R   357           MOV     GPT2_RB,R0
004A C6080000  R   358           SCXT    CP,#GPT2_RB
004E C6871000      359           SCXT    MDC,#010h
0052 EC00          360           PUSH    DPP0
0054 E6000000  R   361           MOV     DPP0,#PAG ?BASE_DPP0
0058 CC00          362           NOP
005A EC02          363           PUSH    DPP2
005C E6020000  R   364           MOV     DPP2,#PAG ?BASE_DPP2
0060 CC00          365           NOP
0062 EC06          366           PUSH    MDH
0064 EC07          367           PUSH    MDL
0066 ECEF          368           PUSH    MSW
0068 EC2E          369           PUSH    MAL
006A EC2F          370           PUSH    MAH
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:31:52  Page:   8
gpt2

 LOC CODE        LINE   SOURCELINE

006C ECEE          371           PUSH    MCW
006E C6ED0000      372           SCXT    MRW,#00h
0072 EC84          373           PUSH    IDX0
0074 EC85          374           PUSH    IDX1
0076 D180          375           EXTR    #01h
0078 EC00     1    376           PUSH    QX0
007A D180          377           EXTR    #01h
007C EC01     1    378           PUSH    QX1
007E D180          379           EXTR    #01h
0080 EC02     1    380           PUSH    QR0
0082 D180          381           EXTR    #01h
0084 EC03     1    382           PUSH    QR1
                   383   ; Locals:
                   384   ; 
                   385   ; Statics:
                   386   ; 
                   387   ; CSEs:
                   388   ; 
                   389   ; gpt2.c    232         // USER CODE BEGIN (Tmr6,2)
                   390   ; gpt2.c    233         // Index für den Programmablauf, größer 5251 damit der Programmablauf b
                         ei Überlauf
                   391   ; gpt2.c    234         // der Variable RampIndex (16 Bit) nicht erneut von vorn startet
                   392   ; gpt2.c    235         if (rampIndex < 5251) {
                   393           ?LINE   235
0086 F2FC0000  R   394           MOV     R12,_rampIndex
008A 46FC8314      395           CMP     R12,#01483h
008E 9D05          396           JMPR    cc_UGE,_7
                   397   ; gpt2.c    236                 rampIndex++;
                   398           ?LINE   236
0090 F2FC0000  R   399           MOV     R12,_rampIndex
0094 08C1          400           ADD     R12,#01h
0096 F6FC0000  R   401           MOV     _rampIndex,R12
                   402   ; gpt2.c    237         }
                   403           ?LINE   237
009A               404   _7:
                   405   ; gpt2.c    238 
                   406   ; gpt2.c    239         // auslesen des GPT Timer 4 Registers
                   407   ; gpt2.c    240         // Entspricht der Anzahl der Inkremente des Encoders in 8 ms
                   408   ; gpt2.c    241         inc = GPT12E_T4;
                   409           ?LINE   241
009A F2FC44FE      410           MOV     R12,0FE44h
009E F6FC0000  R   411           MOV     _inc,R12
                   412   ; gpt2.c    242         // Berechnung der Geschwindigkeit durch Differenzbildung
                   413   ; gpt2.c    243         velocity = (1000 * (float)inc) / (8);
                   414           ?LINE   243
00A2 F2F40000  R   415           MOV     R4,_inc
00A6 DA000000  R   416           CALLS   SEG __cuf24r,__cuf24r
00AA E6FA7A44      417           MOV     R10,#0447Ah
00AE E00B          418           MOV     R11,#00h
00B0 DA000000  R   419           CALLS   SEG __mlf4r,__mlf4r
00B4 E6FA0041      420           MOV     R10,#04100h
00B8 E00B          421           MOV     R11,#00h
00BA DA000000  R   422           CALLS   SEG __dvf4r,__dvf4r
00BE F6F40000  R   423           MOV     _velocity,R4
00C2 F6F50000  R   424           MOV     (_velocity+2),R5
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:31:52  Page:   9
gpt2

 LOC CODE        LINE   SOURCELINE

                   425   ; gpt2.c    244         // Umrechnung von inc/s zu 1/s
                   426   ; gpt2.c    245         velocity = velocity / 2048;
                   427           ?LINE   245
00C6 F2F40000  R   428           MOV     R4,_velocity
00CA F2F50000  R   429           MOV     R5,(_velocity+2)
00CE E6FA0045      430           MOV     R10,#04500h
00D2 E00B          431           MOV     R11,#00h
00D4 DA000000  R   432           CALLS   SEG __dvf4r,__dvf4r
00D8 F6F40000  R   433           MOV     _velocity,R4
00DC F6F50000  R   434           MOV     (_velocity+2),R5
                   435   ; gpt2.c    246         // zurücksetzen des Timer 4 Registers
                   436   ; gpt2.c    247         GPT12E_T4 = 0;
                   437           ?LINE   247
00E0 E00C          438           MOV     R12,#00h
00E2 F6FC44FE      439           MOV     0FE44h,R12
                   440   ; gpt2.c    248         // USER CODE END
                   441   ; gpt2.c    249 
                   442   ; gpt2.c    250 }  //  End of function GPT2_viTmr6
                   443           ?LINE   250
00E6 D180          444           EXTR    #01h
00E8 FC03     1    445           POP     QR1
00EA D180          446           EXTR    #01h
00EC FC02     1    447           POP     QR0
00EE D180          448           EXTR    #01h
00F0 FC01     1    449           POP     QX1
00F2 D180          450           EXTR    #01h
00F4 FC00     1    451           POP     QX0
00F6 FC85          452           POP     IDX1
00F8 FC84          453           POP     IDX0
00FA FCED          454           POP     MRW
00FC FCEE          455           POP     MCW
00FE FC2F          456           POP     MAH
0100 FC2E          457           POP     MAL
0102 FCEF          458           POP     MSW
0104 FC07          459           POP     MDL
0106 FC06          460           POP     MDH
0108 FC02          461           POP     DPP2
010A FC00          462           POP     DPP0
010C FC87          463           POP     MDC
010E FC08          464           POP     CP
                   465           ?LINE   250
0110 FB88          466           RETI
                   467   _GPT2_viTmr6    ENDP
               R   468           ?SYMB   '',$,17,250
                   469   ; gpt2.c    251 
                   470   ; gpt2.c    252 // USER CODE BEGIN (GPT2_General,10)
                   471   ; gpt2.c    253 
                   472   ; gpt2.c    254 // USER CODE END
                   473   GPT2_1_PR       ENDS
                   474   
                   475   GPT2_2_NB       SECTION LDAT WORD PUBLIC 'CNEAR'
0000               476   GPT2_2_NB_ENTRY LABEL   BYTE
0000               477   _inc    LABEL   WORD
0000               478           DS      2
                   479           PUBLIC  _inc
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 30 2021  Time: 15:31:52  Page:  10
gpt2

 LOC CODE        LINE   SOURCELINE

               R   480           ?SYMB   'inc',_inc,22,18
                   481   GPT2_2_NB       ENDS
                   482   
                   483   C166_BSS        SECTION PDAT WORD GLOBAL 'CINITROM'
0000 05000000  R   484           DW      05h,GPT2_2_NB_ENTRY,02h
0004 0200        
                   485   C166_BSS        ENDS
                   486   
                   487   $FLOAT(ANSI)
                   488           EXTERN  _velocity:WORD
                   489           EXTERN  _rampIndex:WORD
                   490           EXTERN  __cuf24r:FAR
                   491           EXTERN  __mlf4r:FAR
                   492           EXTERN  __dvf4r:FAR
                   493   GPT2_RB REGDEF  R0-R15
                   494           END

total errors: 0, warnings: 0

