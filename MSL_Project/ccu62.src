; TASKING C166/ST10 C compiler v8.7r1 Build 775
; options: -e -Id:\programme\tasking\c166 v8.7r1\include -x2 -Bhoeufmknladij -OB
;          -OE -zswitch_tabmem_default -zautobitastruct-4 -zautobita-0 -FSC -A1
;          -zvolatile_union -O0 -g -newerr -s -i0 -Ms
$DEBUG
$NOLOCALS
$EXTEND2
$NOMOD166
$STDNAMES(regsuper10bo.def)
$EXTMAC
$CASE
$NOEXPANDREGBANK
$MODEL(SMALL)
	NAME	CCU62_C
	?SYMB	'ccu62.c',32,80,16
	?SYMB	'',1,82,0
	?SYMB	'80166',0,84,0
	?SYMB	'',0,81,0
	?SYMB	'void',00H,45,1
	?SYMB	'char',080000H,45,2
	?SYMB	'unsigned char',080000H,45,3
	?SYMB	'short',0100000H,45,4
	?SYMB	'unsigned short',0100000H,45,5
	?SYMB	'long',0200000H,45,6
	?SYMB	'unsigned long',0200000H,45,7
	?SYMB	'float',0200000H,45,10
	?SYMB	'double',0400000H,45,11
	?SYMB	'int',0100000H,45,16
	?SYMB	'unsigned int',0100000H,45,18
	?SYMB	'bit',010000H,7,256
	?SYMB	'ccu62.c',0,29,1
	?SYMB	'',0,86,1
; ccu62.c     1	//****************************************************************************
; ccu62.c     2	// @Module        Capture / Compare Unit 62 (CCU62)
; ccu62.c     3	// @Filename      CCU62.C
; ccu62.c     4	// @Project       DAvE_config.dav
; ccu62.c     5	//----------------------------------------------------------------------------
; ccu62.c     6	// @Controller    Infineon XE167F-96F66
; ccu62.c     7	//
; ccu62.c     8	// @Compiler      Tasking Classic
; ccu62.c     9	//
; ccu62.c    10	// @Codegenerator 2.2
; ccu62.c    11	//
; ccu62.c    12	// @Description   This file contains functions that use the CCU62 module.
; ccu62.c    13	//
; ccu62.c    14	//----------------------------------------------------------------------------
; ccu62.c    15	// @Date          29.09.2021 09:41:09
; ccu62.c    16	//
; ccu62.c    17	//****************************************************************************
; ccu62.c    18	
; ccu62.c    19	// USER CODE BEGIN (CCU62_General,1)
; ccu62.c    20	
; ccu62.c    21	// USER CODE END
; ccu62.c    22	
; ccu62.c    23	
; ccu62.c    24	
; ccu62.c    25	//****************************************************************************
; ccu62.c    26	// @Project Includes
; ccu62.c    27	//****************************************************************************
; ccu62.c    28	
; ccu62.c    29	#include "MAIN.H"
	?SYMB	'MAIN.H',0,29,2
	?SYMB	'',0,86,2
	?SYMB	'XE16xREGS.H',0,29,3
	?SYMB	'',0,86,3
	?SYMB	'',0,86,2
	?SYMB	'SCS.H',0,29,3
	?SYMB	'',0,86,3
	?SYMB	'T$2',0,14,257
	?SYMB	'SCS_EXTCLK_F_SYS',0,33,257
	?SYMB	'SCS_EXTCLK_F_OUT',1,33,257
	?SYMB	'SCS_EXTCLK_F_PLL',2,33,257
	?SYMB	'SCS_EXTCLK_F_OSC',3,33,257
	?SYMB	'SCS_EXTCLK_F_WU',4,33,257
	?SYMB	'SCS_EXTCLK_F_TCK',5,33,257
	?SYMB	'SCS_EXTCLK_F_OSC_FL',6,33,257
	?SYMB	'SCS_EXTCLK_F_RTC',8,33,257
	?SYMB	'',16,16,0
	?SYMB	'SCS_EXTCLK_Type',257,13,258
	?SYMB	'',0,86,2
	?SYMB	'IO.H',0,29,3
	?SYMB	'',0,86,3
	?SYMB	'',0,86,2
	?SYMB	'GPT1.H',0,29,3
	?SYMB	'',0,86,3
	?SYMB	'',0,86,2
	?SYMB	'GPT2.H',0,29,3
	?SYMB	'',0,86,3
	?SYMB	'',0,86,2
	?SYMB	'CCU62.H',0,29,3
	?SYMB	'',0,86,3
	?SYMB	'',0,86,2
	?SYMB	'CCU63.H',0,29,3
	?SYMB	'',0,86,3
	?SYMB	'',0,86,2
	?SYMB	'ADC0.H',0,29,3
	?SYMB	'',0,86,3
	?SYMB	'ubyte',3,13,259
	?SYMB	'',0,86,2
	?SYMB	'',0,86,1
; ccu62.c    30	
; ccu62.c    31	// USER CODE BEGIN (CCU62_General,2)
; ccu62.c    32	
; ccu62.c    33	// USER CODE END
; ccu62.c    34	
; ccu62.c    35	
; ccu62.c    36	//****************************************************************************
; ccu62.c    37	// @Macros
; ccu62.c    38	//****************************************************************************
; ccu62.c    39	
; ccu62.c    40	// USER CODE BEGIN (CCU62_General,3)
; ccu62.c    41	
; ccu62.c    42	// USER CODE END
; ccu62.c    43	
; ccu62.c    44	
; ccu62.c    45	//****************************************************************************
; ccu62.c    46	// @Defines
; ccu62.c    47	//****************************************************************************
; ccu62.c    48	
; ccu62.c    49	// USER CODE BEGIN (CCU62_General,4)
; ccu62.c    50	
; ccu62.c    51	// USER CODE END
; ccu62.c    52	
; ccu62.c    53	
; ccu62.c    54	//****************************************************************************
; ccu62.c    55	// @Typedefs
; ccu62.c    56	//****************************************************************************
; ccu62.c    57	
; ccu62.c    58	// USER CODE BEGIN (CCU62_General,5)
; ccu62.c    59	
; ccu62.c    60	// USER CODE END
; ccu62.c    61	
; ccu62.c    62	
; ccu62.c    63	//****************************************************************************
; ccu62.c    64	// @Imported Global Variables
; ccu62.c    65	//****************************************************************************
; ccu62.c    66	
; ccu62.c    67	// USER CODE BEGIN (CCU62_General,6)
; ccu62.c    68		extern const unsigned int ARRAY_SIZE;
; ccu62.c    69		extern	unsigned int index;
; ccu62.c    70		extern volatile unsigned int rampIndex;
; ccu62.c    71	// USER CODE END
; ccu62.c    72	
; ccu62.c    73	
; ccu62.c    74	//****************************************************************************
; ccu62.c    75	// @Global Variables
; ccu62.c    76	//****************************************************************************
; ccu62.c    77	
; ccu62.c    78	// USER CODE BEGIN (CCU62_General,7)
; ccu62.c    79	
; ccu62.c    80	// USER CODE END
; ccu62.c    81	
; ccu62.c    82	
; ccu62.c    83	//****************************************************************************
; ccu62.c    84	// @External Prototypes
; ccu62.c    85	//****************************************************************************
; ccu62.c    86	
; ccu62.c    87	// USER CODE BEGIN (CCU62_General,8)
; ccu62.c    88	
; ccu62.c    89	// USER CODE END
; ccu62.c    90	
; ccu62.c    91	
; ccu62.c    92	//****************************************************************************
; ccu62.c    93	// @Prototypes Of Local Functions
; ccu62.c    94	//****************************************************************************
; ccu62.c    95	
; ccu62.c    96	// USER CODE BEGIN (CCU62_General,9)
; ccu62.c    97	
; ccu62.c    98	// USER CODE END
; ccu62.c    99	
; ccu62.c   100	
; ccu62.c   101	//****************************************************************************
; ccu62.c   102	// @Function      void CCU62_vInit(void) 
; ccu62.c   103	//
; ccu62.c   104	//----------------------------------------------------------------------------
; ccu62.c   105	// @Description   This is the initialization function of the CCU62 function 
; ccu62.c   106	//                library. It is assumed that the SFRs used by this library 
; ccu62.c   107	//                are in reset state. 
; ccu62.c   108	//
; ccu62.c   109	//----------------------------------------------------------------------------
; ccu62.c   110	// @Returnvalue   None
; ccu62.c   111	//
; ccu62.c   112	//----------------------------------------------------------------------------
; ccu62.c   113	// @Parameters    None
; ccu62.c   114	//
; ccu62.c   115	//----------------------------------------------------------------------------
; ccu62.c   116	// @Date          29.09.2021
; ccu62.c   117	//
; ccu62.c   118	//****************************************************************************
; ccu62.c   119	
; ccu62.c   120	// USER CODE BEGIN (Init,1)
; ccu62.c   121	
; ccu62.c   122	// USER CODE END
; ccu62.c   123	
; ccu62.c   124	void CCU62_vInit(void)
; ccu62.c   125	{
CCU62_1_PR	SECTION	CODE WORD PUBLIC 'CPROGRAM'
	?LINE	125
	PUBLIC	_CCU62_vInit
	?SYMB	'CCU62_vInit',_CCU62_vInit,37,1
	?SYMB	'',125,8,34
	?SYMB	'uword',18,13,261
_CCU62_vInit	PROC	FAR
	?SYMB	'',00H,95,0
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; ccu62.c   126	  // USER CODE BEGIN (Init,2)
; ccu62.c   127	
; ccu62.c   128	  // USER CODE END
; ccu62.c   129	
; ccu62.c   130	  ///  -----------------------------------------------------------------------
; ccu62.c   131	  ///  Configuration of KERNEL REGISTERS :
; ccu62.c   132	  ///  -----------------------------------------------------------------------
; ccu62.c   133	  ///  - CCU62 Module is enabled.
; ccu62.c   134	  ///  - The CCU62 module clock = 65,000 MHz. 
; ccu62.c   135	  ///  - T12 is enabled.
; ccu62.c   136	  ///  - T13 is enabled.
; ccu62.c   137	  ///  - MCM is enabled.
; ccu62.c   138	
; ccu62.c   139	  CCU62_KSCFG    =  0x0003;      // Kernel State Configuration Register
	?LINE	139
	MOV	R12,#03h
	MOV	0EB00h,R12
; ccu62.c   140	
; ccu62.c   141	
; ccu62.c   142	  _nop();    //No operation function as Delay
	?LINE	142
	NOP
; ccu62.c   143	  _nop();    //No operation function as Delay
	?LINE	143
	NOP
; ccu62.c   144	  _nop();    //No operation function as Delay
	?LINE	144
	NOP
; ccu62.c   145	  _nop();    //No operation function as Delay
	?LINE	145
	NOP
; ccu62.c   146	
; ccu62.c   147	  ///  -----------------------------------------------------------------------
; ccu62.c   148	  ///  Configuration of CCU62 Timer 12:
; ccu62.c   149	  ///  -----------------------------------------------------------------------
; ccu62.c   150	  ///  - Timer 12 Input clock factor (T12CLK) is 0
; ccu62.c   151	  ///  - prescaler factor is 0
; ccu62.c   152	  ///  - Timer 12 run bit is reset
; ccu62.c   153	  ///  - Single shot mode is disabled
; ccu62.c   154	  ///  - Timer 12 works in edge aligned mode
; ccu62.c   155	  ///  - Interrupt on period match is enabled
; ccu62.c   156	  ///  - Interrupt on one match is disabled
; ccu62.c   157	  ///  - No External run selection is selected.
; ccu62.c   158	  ///  - Timer mode is selected.
; ccu62.c   159	  ///  - 
; ccu62.c   160	
; ccu62.c   161	  CCU62_T12PR    =  0x0595;      // load CCU62 T12 period register
	?LINE	161
	MOV	R12,#0595h
	MOV	0EB12h,R12
; ccu62.c   162	
; ccu62.c   163	  ///  -----------------------------------------------------------------------
; ccu62.c   164	  ///  Configuration of T13HR Signal:
; ccu62.c   165	  ///  -----------------------------------------------------------------------
; ccu62.c   166	  ///  - Signal T13HRB is selected as Input
; ccu62.c   167	  CCU62_PISELH   =  0x0021;      // Load CCU62 Port Input Selection register
	?LINE	167
	MOV	R12,#021h
	MOV	0EB06h,R12
; ccu62.c   168	
; ccu62.c   169	
; ccu62.c   170	  ///  -----------------------------------------------------------------------
; ccu62.c   171	  ///  Configuration of CCU62 Timer 13:
; ccu62.c   172	  ///  -----------------------------------------------------------------------
; ccu62.c   173	  ///  - Timer 13 Input Clock factor (T13CLK) is 0
; ccu62.c   174	  ///  - prescaler factor is 0
; ccu62.c   175	  ///  - Timer 13 run bit is reset
; ccu62.c   176	  ///  - Trigger control is disabled
; ccu62.c   177	  ///  - No External run selection is selected.
; ccu62.c   178	  ///  - Counter mode is selected.
; ccu62.c   179	  ///  - Counter mode Counts the rising edges at the input T13HR.
; ccu62.c   180	  ///  - Single shot mode is disabled
; ccu62.c   181	  ///  - Interrupt on period match is disabled
; ccu62.c   182	  ///  - Interrupt on compare match is disabled
; ccu62.c   183	
; ccu62.c   184	  CCU62_T13PR    =  0x0001;      // load CCU62 T13 period register
	?LINE	184
	MOV	R12,#01h
	MOV	0EB32h,R12
; ccu62.c   185	
; ccu62.c   186	  CCU62_TCTR2    =  0x0020;      // load CCU62 timer control register 2
	?LINE	186
	MOV	R12,#020h
	MOV	0EB2Eh,R12
; ccu62.c   187	
; ccu62.c   188	  ///  -----------------------------------------------------------------------
; ccu62.c   189	  ///  Configuration of Multi Channel Mode:
; ccu62.c   190	  ///  -----------------------------------------------------------------------
; ccu62.c   191	  ///  - Multi channel mode is disabled
; ccu62.c   192	
; ccu62.c   193	
; ccu62.c   194	  ///  -----------------------------------------------------------------------
; ccu62.c   195	  ///  Configuration of CCU62 Channel 0:
; ccu62.c   196	  ///  -----------------------------------------------------------------------
; ccu62.c   197	  ///  - Channel 0 is disabled
; ccu62.c   198	  ///  - T12 modulation for output CC60 is disabled
; ccu62.c   199	  ///  - T13 modulation for output CC60 is disabled
; ccu62.c   200	  ///  - T13 modulation for output CC60 is disabled
; ccu62.c   201	
; ccu62.c   202	  ///  - Generation interrupt on flag ICC60R is disabled
; ccu62.c   203	  ///  - Generation interrupt on flag ICC60F is disabled
; ccu62.c   204	
; ccu62.c   205	  CCU62_CC60SR   =  0x0000;      // Load CCU62 capture/compare shadow 
	?LINE	205
	MOV	R12,#00h
	MOV	0EB20h,R12
; ccu62.c   206	                                 // register for channel 0
; ccu62.c   207	
; ccu62.c   208	  ///  -----------------------------------------------------------------------
; ccu62.c   209	  ///  Configuration of CCU62 Channel 1:
; ccu62.c   210	  ///  -----------------------------------------------------------------------
; ccu62.c   211	  ///  - Channel 1 is disabled
; ccu62.c   212	  ///  - T12 modulation for output CC61 is disabled
; ccu62.c   213	  ///  - T13 modulation for output CC61 is disabled
; ccu62.c   214	  ///  - T13 modulation for output CC61 is disabled
; ccu62.c   215	
; ccu62.c   216	  ///  - Generation interrupt on flag ICC61R is disabled
; ccu62.c   217	  ///  - Generation interrupt on flag ICC61F is disabled
; ccu62.c   218	
; ccu62.c   219	  CCU62_CC61SR   =  0x0000;      // Load CCU62 capture/compare shadow 
	?LINE	219
	MOV	R12,#00h
	MOV	0EB22h,R12
; ccu62.c   220	                                 // register for channel 1
; ccu62.c   221	
; ccu62.c   222	  ///  -----------------------------------------------------------------------
; ccu62.c   223	  ///  Configuration of CCU62 Channel 2:
; ccu62.c   224	  ///  -----------------------------------------------------------------------
; ccu62.c   225	  ///  - Channel 2 is disabled
; ccu62.c   226	  ///  - T12 modulation for output CC62 is disabled
; ccu62.c   227	  ///  - T13 modulation for output CC62 is disabled
; ccu62.c   228	  ///  - T13 modulation for output CC62 is disabled
; ccu62.c   229	
; ccu62.c   230	  ///  - Generation interrupt on flag ICC62R is disabled
; ccu62.c   231	  ///  - Generation interrupt on flag ICC62F is disabled
; ccu62.c   232	
; ccu62.c   233	  CCU62_CC62SR   =  0x0000;      // Load CCU62 capture/compare shadow 
	?LINE	233
	MOV	R12,#00h
	MOV	0EB24h,R12
; ccu62.c   234	                                 // register for channel 2
; ccu62.c   235	
; ccu62.c   236	  ///  -----------------------------------------------------------------------
; ccu62.c   237	  ///  Configuration of CCU62 Channel 3:
; ccu62.c   238	  ///  -----------------------------------------------------------------------
; ccu62.c   239	  ///  - T13 output is not inverted
; ccu62.c   240	
; ccu62.c   241	
; ccu62.c   242	  CCU62_CC63SR   =  0x0000;      // load CCU62 capture/compare shadow 
	?LINE	242
	MOV	R12,#00h
	MOV	0EB36h,R12
; ccu62.c   243	                                 // register for channel 3
; ccu62.c   244	
; ccu62.c   245	
; ccu62.c   246	  CCU62_T12DTC   =  0x0001;      // load CCU62 dead time control register for 
	?LINE	246
	MOV	R12,#01h
	MOV	0EB14h,R12
; ccu62.c   247	                                 // timer T12
; ccu62.c   248	
; ccu62.c   249	  ///  -----------------------------------------------------------------------
; ccu62.c   250	  ///  Configuration of CCU62 trap control:
; ccu62.c   251	  ///  -----------------------------------------------------------------------
; ccu62.c   252	  ///  - Trap can only be generated by SW by setting the bit TRPF
; ccu62.c   253	  ///  - The trap state is left when a zero-match of T12 (while counting up) 
; ccu62.c   254	  ///    is detected (synchronization to T12)
; ccu62.c   255	  ///  - Bit TRPF is automatically cleared by HW (according to TRPPEN, TRPM0 
; ccu62.c   256	  ///    and TRPM1)
; ccu62.c   257	  ///  - Trap interrupt is disabled
; ccu62.c   258	
; ccu62.c   259	
; ccu62.c   260	  ///  -----------------------------------------------------------------------
; ccu62.c   261	  ///  Configuration of CCU62 interrupt control:
; ccu62.c   262	  ///  -----------------------------------------------------------------------
; ccu62.c   263	  ///  - For channel 0 interrupts is node I0 selected
; ccu62.c   264	  ///  - For channel 1 interrupts is node I0 selected
; ccu62.c   265	  ///  - For channel 2 interrupts is node I0 selected
; ccu62.c   266	  ///  - For correct hall event interrupt is node I0 selected
; ccu62.c   267	  ///  - For error interrupts is node I0 selected
; ccu62.c   268	  ///  - For T12 interrupts is node I0 selected
; ccu62.c   269	  ///  - For T13 interrupts is node I0 selected
; ccu62.c   270	
; ccu62.c   271	
; ccu62.c   272	  CCU62_INP      =  0x0000;      // Load CCU62 capture/compare interrupt node 
	?LINE	272
	MOV	R12,#00h
	MOV	0EB56h,R12
; ccu62.c   273	                                 // pointer register
; ccu62.c   274	
; ccu62.c   275	  CCU62_IEN      =  0x0080;      // Load CCU62 capture/compare interrupt 
	?LINE	275
	MOV	R12,#080h
	MOV	0EB58h,R12
; ccu62.c   276	                                 // enable register
; ccu62.c   277	
; ccu62.c   278	
; ccu62.c   279	  ///  -----------------------------------------------------------------------
; ccu62.c   280	  ///  Configuration of the used CCU62 Channel Port Pins:
; ccu62.c   281	  ///  -----------------------------------------------------------------------
; ccu62.c   282	
; ccu62.c   283	
; ccu62.c   284	  CCU62_PISELL   =  0x3FC0;      // Load CCU62 Port Input Selection register
	?LINE	284
	MOV	R12,#03FC0h
	MOV	0EB04h,R12
; ccu62.c   285	
; ccu62.c   286	  ///  -----------------------------------------------------------------------
; ccu62.c   287	  ///  Configuration of the used CCU62 Channels Interrupts:
; ccu62.c   288	  ///  -----------------------------------------------------------------------
; ccu62.c   289	  ///  NodeI0 service request node configuration:
; ccu62.c   290	  ///  - NodeI0 interrupt priority level (ILVL) = 13
; ccu62.c   291	  ///  - NodeI0 interrupt group level (GLVL) = 0
; ccu62.c   292	  ///  - NodeI0 group priority extension (GPX) = 0
; ccu62.c   293	
; ccu62.c   294	  CCU62_0IC      =  0x0074;     
	?LINE	294
	MOV	R12,#074h
	MOV	0F170h,R12
; ccu62.c   295	
; ccu62.c   296	
; ccu62.c   297	  ///  -----------------------------------------------------------------------
; ccu62.c   298	  ///  Configuration of T12, T13 ---- CCU62_TCTR4 Register:
; ccu62.c   299	  ///  -----------------------------------------------------------------------
; ccu62.c   300	  ///  - Enable shadow transfer of T12 and T13
; ccu62.c   301	  ///  - Timer 12 run bit is reset
; ccu62.c   302	  ///  - Timer 13 run bit is reset
; ccu62.c   303	  CCU62_TCTR4    =  0x4040;      // load CCU62 timer control register 4
	?LINE	303
	MOV	R12,#04040h
	MOV	0EB26h,R12
; ccu62.c   304	
; ccu62.c   305	
; ccu62.c   306	  // USER CODE BEGIN (NodeI3,3)
; ccu62.c   307	
; ccu62.c   308	  // USER CODE END
; ccu62.c   309	
; ccu62.c   310	} //  End of function CCU62_vInit
	?LINE	310
	RETS
_CCU62_vInit	ENDP
	?SYMB	'',$,17,310
; ccu62.c   311	
; ccu62.c   312	
; ccu62.c   313	//****************************************************************************
; ccu62.c   314	// @Function      void CCU62_viNodeI0(void) 
; ccu62.c   315	//
; ccu62.c   316	//----------------------------------------------------------------------------
; ccu62.c   317	// @Description   This is the interrupt service routine for the CCU62 node 
; ccu62.c   318	//                I0. If the content of the corresponding compare timer 
; ccu62.c   319	//                (configurable) equals the content of the capture/compare 
; ccu62.c   320	//                register or if a capture event occurs at the associated 
; ccu62.c   321	//                port pin, the interrupt request flag is set and an 
; ccu62.c   322	//                interrupt is triggered (only if enabled).
; ccu62.c   323	//                Please note that you have to add application specific code 
; ccu62.c   324	//                to this function.
; ccu62.c   325	//
; ccu62.c   326	//----------------------------------------------------------------------------
; ccu62.c   327	// @Returnvalue   None
; ccu62.c   328	//
; ccu62.c   329	//----------------------------------------------------------------------------
; ccu62.c   330	// @Parameters    None
; ccu62.c   331	//
; ccu62.c   332	//----------------------------------------------------------------------------
; ccu62.c   333	// @Date          29.09.2021
; ccu62.c   334	//
; ccu62.c   335	//****************************************************************************
; ccu62.c   336	
; ccu62.c   337	// USER CODE BEGIN (NodeI0,1)
; ccu62.c   338	
; ccu62.c   339	// USER CODE END
; ccu62.c   340	
; ccu62.c   341	_interrupt(CCU62_NodeI0_INT)  void CCU62_viNodeI0(void)
; ccu62.c   342	{
	?SYMB	'CCU62_viNodeI0',_CCU62_viNodeI0,37,1
	?SYMB	'',342,8,16
_CCU62_viNodeI0	PROC TASK CCU62_TASK INTNO CCU62_INUM = 038h
	?LINE	342
	?SYMB	'',00H,95,0
	MOV	CCU62_RB,R0
	SCXT	CP,#CCU62_RB
	SCXT	MDC,#010h
	PUSH	DPP0
	MOV	DPP0,#PAG ?BASE_DPP0
	NOP
	PUSH	DPP2
	MOV	DPP2,#PAG ?BASE_DPP2
	NOP
	PUSH	MDH
	PUSH	MDL
	PUSH	MSW
	PUSH	MAL
	PUSH	MAH
	PUSH	MCW
	SCXT	MRW,#00h
	PUSH	IDX0
	PUSH	IDX1
	EXTR	#01h
	PUSH	QX0
	EXTR	#01h
	PUSH	QX1
	EXTR	#01h
	PUSH	QR0
	EXTR	#01h
	PUSH	QR1
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; ccu62.c   343	  // USER CODE BEGIN (NodeI0,2)
; ccu62.c   344	
; ccu62.c   345	  // USER CODE END
; ccu62.c   346	
; ccu62.c   347	  if(CCU62_IS & 0x0080)  // if CCU62_IS_T12PM
	?LINE	347
	MOV	R12,0EB50h
	JNB	R12.7,_10
; ccu62.c   348	  {
; ccu62.c   349	    // Timer T12 period match detection
; ccu62.c   350	
; ccu62.c   351	    // USER CODE BEGIN (NodeI0,19)
; ccu62.c   352		  if(rampIndex < 5250 && rampIndex > 4500){
	?LINE	352
	MOV	R12,_rampIndex
	CMP	R12,#01482h
	JMPR	cc_UGE,_7
	MOV	R12,_rampIndex
	CMP	R12,#01194h
	JMPR	cc_ULE,_8
; ccu62.c   353		  }
	?LINE	353
	JMPR	cc_UC,_9
_7:
_8:
; ccu62.c   354		  else{
; ccu62.c   355		  index++;
	?LINE	355
	MOV	R12,_index
	ADD	R12,#01h
	MOV	_index,R12
; ccu62.c   356		  index = index%ARRAY_SIZE;
	?LINE	356
	MOV	R12,_index
	MOV	R13,_ARRAY_SIZE
	MOV	MDL,R12
	DIVU	R13
	MOV	R12,MDH
	MOV	_index,R12
; ccu62.c   357		  }
	?LINE	357
_9:
; ccu62.c   358	    // USER CODE END
; ccu62.c   359	
; ccu62.c   360	    CCU62_ISR |= 0x0080;  // clear flag CCU62_IS_T12PM
	?LINE	360
	MOV	R12,#0EB54h
	MOV	R13,[R12]
	BSET	R13.7
	MOV	[R12],R13
; ccu62.c   361	  }
	?LINE	361
_10:
; ccu62.c   362	
; ccu62.c   363	
; ccu62.c   364	} //  End of function CCU62_viNodeI0
	?LINE	364
	EXTR	#01h
	POP	QR1
	EXTR	#01h
	POP	QR0
	EXTR	#01h
	POP	QX1
	EXTR	#01h
	POP	QX0
	POP	IDX1
	POP	IDX0
	POP	MRW
	POP	MCW
	POP	MAH
	POP	MAL
	POP	MSW
	POP	MDL
	POP	MDH
	POP	DPP2
	POP	DPP0
	POP	MDC
	POP	CP
	?LINE	364
	RETI
_CCU62_viNodeI0	ENDP
	?SYMB	'',$,17,364
; ccu62.c   365	
; ccu62.c   366	
; ccu62.c   367	
; ccu62.c   368	
; ccu62.c   369	// USER CODE BEGIN (CCU62_General,10)
; ccu62.c   370	
; ccu62.c   371	// USER CODE END
; ccu62.c   372	
CCU62_1_PR	ENDS

	EXTERN	_rampIndex:WORD
	EXTERN	_ARRAY_SIZE:WORD
	EXTERN	_index:WORD
CCU62_RB	REGDEF	R0-R15
	END
